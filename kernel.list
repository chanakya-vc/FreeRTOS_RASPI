
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	000142e4 	andeq	r4, r1, r4, ror #5

00008028 <swi_handler>:
    8028:	000103dc 	ldrdeq	r0, [r1], -ip

0000802c <prefetch_handler>:
    802c:	000142e8 	andeq	r4, r1, r8, ror #5

00008030 <data_handler>:
    8030:	000142ec 	andeq	r4, r1, ip, ror #5

00008034 <unused_handler>:
    8034:	000142f0 	strdeq	r4, [r1], -r0

00008038 <irq_handler>:
    8038:	00010490 	muleq	r1, r0, r4

0000803c <fiq_handler>:
    803c:	000142f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00008040 <reset>:
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    8044:	e3a01000 	mov	r1, #0
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    805c:	e121f000 	msr	CPSR_c, r0
    8060:	e3a0d902 	mov	sp, #32768	; 0x8000
    8064:	e3a000d1 	mov	r0, #209	; 0xd1
    8068:	e121f000 	msr	CPSR_c, r0
    806c:	e3a0d901 	mov	sp, #16384	; 0x4000
    8070:	e3a000d3 	mov	r0, #211	; 0xd3
    8074:	e121f000 	msr	CPSR_c, r0
    8078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    807c:	e59f0018 	ldr	r0, [pc, #24]	; 809c <zero_loop+0x14>
    8080:	e59f1018 	ldr	r1, [pc, #24]	; 80a0 <zero_loop+0x18>
    8084:	e3a02000 	mov	r2, #0

00008088 <zero_loop>:
    8088:	e1500001 	cmp	r0, r1
    808c:	b4802004 	strlt	r2, [r0], #4
    8090:	bafffffc 	blt	8088 <zero_loop>
    8094:	eb002d64 	bl	1362c <irqBlock>
    8098:	ea0030b9 	b	14384 <main>
    809c:	00014770 	andeq	r4, r1, r0, ror r7
    80a0:	00015b50 	andeq	r5, r1, r0, asr fp

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10004:	e28db000 	add	fp, sp, #0
   10008:	e24dd01c 	sub	sp, sp, #28
   1000c:	e50b0010 	str	r0, [fp, #-16]
   10010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10018:	e51b3010 	ldr	r3, [fp, #-16]
   1001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10020:	e51b3010 	ldr	r3, [fp, #-16]
   10024:	e2433004 	sub	r3, r3, #4
   10028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   1002c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10030:	e2832004 	add	r2, r3, #4
   10034:	e51b3010 	ldr	r3, [fp, #-16]
   10038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1003c:	e51b3010 	ldr	r3, [fp, #-16]
   10040:	e2433004 	sub	r3, r3, #4
   10044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10048:	e51b3010 	ldr	r3, [fp, #-16]
   1004c:	e59f21b8 	ldr	r2, [pc, #440]	; 1020c <pxPortInitialiseStack+0x20c>
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10054:	e51b3010 	ldr	r3, [fp, #-16]
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   10060:	e51b2008 	ldr	r2, [fp, #-8]
   10064:	e51b3010 	ldr	r3, [fp, #-16]
   10068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1006c:	e51b3010 	ldr	r3, [fp, #-16]
   10070:	e2433004 	sub	r3, r3, #4
   10074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10078:	e51b3010 	ldr	r3, [fp, #-16]
   1007c:	e59f218c 	ldr	r2, [pc, #396]	; 10210 <pxPortInitialiseStack+0x210>
   10080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10084:	e51b3010 	ldr	r3, [fp, #-16]
   10088:	e2433004 	sub	r3, r3, #4
   1008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   10090:	e51b3010 	ldr	r3, [fp, #-16]
   10094:	e59f2178 	ldr	r2, [pc, #376]	; 10214 <pxPortInitialiseStack+0x214>
   10098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1009c:	e51b3010 	ldr	r3, [fp, #-16]
   100a0:	e2433004 	sub	r3, r3, #4
   100a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100a8:	e51b3010 	ldr	r3, [fp, #-16]
   100ac:	e59f2164 	ldr	r2, [pc, #356]	; 10218 <pxPortInitialiseStack+0x218>
   100b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100b4:	e51b3010 	ldr	r3, [fp, #-16]
   100b8:	e2433004 	sub	r3, r3, #4
   100bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100c0:	e51b3010 	ldr	r3, [fp, #-16]
   100c4:	e59f2150 	ldr	r2, [pc, #336]	; 1021c <pxPortInitialiseStack+0x21c>
   100c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100cc:	e51b3010 	ldr	r3, [fp, #-16]
   100d0:	e2433004 	sub	r3, r3, #4
   100d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   100d8:	e51b3010 	ldr	r3, [fp, #-16]
   100dc:	e59f213c 	ldr	r2, [pc, #316]	; 10220 <pxPortInitialiseStack+0x220>
   100e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100e4:	e51b3010 	ldr	r3, [fp, #-16]
   100e8:	e2433004 	sub	r3, r3, #4
   100ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   100f0:	e51b3010 	ldr	r3, [fp, #-16]
   100f4:	e59f2128 	ldr	r2, [pc, #296]	; 10224 <pxPortInitialiseStack+0x224>
   100f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100fc:	e51b3010 	ldr	r3, [fp, #-16]
   10100:	e2433004 	sub	r3, r3, #4
   10104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   10108:	e51b3010 	ldr	r3, [fp, #-16]
   1010c:	e59f2114 	ldr	r2, [pc, #276]	; 10228 <pxPortInitialiseStack+0x228>
   10110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10114:	e51b3010 	ldr	r3, [fp, #-16]
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10120:	e51b3010 	ldr	r3, [fp, #-16]
   10124:	e59f2100 	ldr	r2, [pc, #256]	; 1022c <pxPortInitialiseStack+0x22c>
   10128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1012c:	e51b3010 	ldr	r3, [fp, #-16]
   10130:	e2433004 	sub	r3, r3, #4
   10134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10138:	e51b3010 	ldr	r3, [fp, #-16]
   1013c:	e59f20ec 	ldr	r2, [pc, #236]	; 10230 <pxPortInitialiseStack+0x230>
   10140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10144:	e51b3010 	ldr	r3, [fp, #-16]
   10148:	e2433004 	sub	r3, r3, #4
   1014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10150:	e51b3010 	ldr	r3, [fp, #-16]
   10154:	e59f20d8 	ldr	r2, [pc, #216]	; 10234 <pxPortInitialiseStack+0x234>
   10158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1015c:	e51b3010 	ldr	r3, [fp, #-16]
   10160:	e2433004 	sub	r3, r3, #4
   10164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   10168:	e51b3010 	ldr	r3, [fp, #-16]
   1016c:	e59f20c4 	ldr	r2, [pc, #196]	; 10238 <pxPortInitialiseStack+0x238>
   10170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10174:	e51b3010 	ldr	r3, [fp, #-16]
   10178:	e2433004 	sub	r3, r3, #4
   1017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   10180:	e51b3010 	ldr	r3, [fp, #-16]
   10184:	e59f20b0 	ldr	r2, [pc, #176]	; 1023c <pxPortInitialiseStack+0x23c>
   10188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1018c:	e51b3010 	ldr	r3, [fp, #-16]
   10190:	e2433004 	sub	r3, r3, #4
   10194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   10198:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1019c:	e51b3010 	ldr	r3, [fp, #-16]
   101a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101a4:	e51b3010 	ldr	r3, [fp, #-16]
   101a8:	e2433004 	sub	r3, r3, #4
   101ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101b0:	e51b3010 	ldr	r3, [fp, #-16]
   101b4:	e3a0201f 	mov	r2, #31
   101b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   101bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   101c0:	e2033001 	and	r3, r3, #1
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a000004 	beq	101e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   101cc:	e51b3010 	ldr	r3, [fp, #-16]
   101d0:	e5933000 	ldr	r3, [r3]
   101d4:	e3832020 	orr	r2, r3, #32
   101d8:	e51b3010 	ldr	r3, [fp, #-16]
   101dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   101e0:	e51b3010 	ldr	r3, [fp, #-16]
   101e4:	e2433004 	sub	r3, r3, #4
   101e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   101ec:	e51b3010 	ldr	r3, [fp, #-16]
   101f0:	e3a02000 	mov	r2, #0
   101f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   101f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   101fc:	e1a00003 	mov	r0, r3
   10200:	e28bd000 	add	sp, fp, #0
   10204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10208:	e12fff1e 	bx	lr
   1020c:	aaaaaaaa 	bge	feabacbc <_estack+0xf6aaacbc>
   10210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   10214:	11111111 	tstne	r1, r1, lsl r1
   10218:	10101010 	andsne	r1, r0, r0, lsl r0
   1021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   10220:	08080808 	stmdaeq	r8, {r3, fp}
   10224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   10228:	06060606 	streq	r0, [r6], -r6, lsl #12
   1022c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
   10230:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
   10234:	03030303 	movweq	r0, #13059	; 0x3303
   10238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   1023c:	01010101 	tsteq	r1, r1, lsl #2

00010240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   10240:	e92d4800 	push	{fp, lr}
   10244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   10248:	eb000017 	bl	102ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   1024c:	eb00003c 	bl	10344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10250:	e3a03000 	mov	r3, #0
}
   10254:	e1a00003 	mov	r0, r3
   10258:	e8bd8800 	pop	{fp, pc}

0001025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   1025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   10264:	e320f000 	nop	{0}
   10268:	e28bd000 	add	sp, fp, #0
   1026c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10270:	e12fff1e 	bx	lr

00010274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   10274:	e92d4800 	push	{fp, lr}
   10278:	e28db004 	add	fp, sp, #4
   1027c:	e24dd008 	sub	sp, sp, #8
   10280:	e50b0008 	str	r0, [fp, #-8]
   10284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   10288:	eb0009ae 	bl	12948 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   1028c:	eb000a81 	bl	12c98 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   10290:	e59f3010 	ldr	r3, [pc, #16]	; 102a8 <vTickISR+0x34>
   10294:	e3a02000 	mov	r2, #0
   10298:	e583200c 	str	r2, [r3, #12]
}
   1029c:	e320f000 	nop	{0}
   102a0:	e24bd004 	sub	sp, fp, #4
   102a4:	e8bd8800 	pop	{fp, pc}
   102a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000102ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   102ac:	e92d4800 	push	{fp, lr}
   102b0:	e28db004 	add	fp, sp, #4
   102b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   102b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   102bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   102c0:	eb000cd9 	bl	1362c <irqBlock>

	pRegs->CTL = 0x003E0000;
   102c4:	e59f3068 	ldr	r3, [pc, #104]	; 10334 <prvSetupTimerInterrupt+0x88>
   102c8:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   102cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   102d0:	e59f305c 	ldr	r3, [pc, #92]	; 10334 <prvSetupTimerInterrupt+0x88>
   102d4:	e59f205c 	ldr	r2, [pc, #92]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   102dc:	e59f3050 	ldr	r3, [pc, #80]	; 10334 <prvSetupTimerInterrupt+0x88>
   102e0:	e59f2050 	ldr	r2, [pc, #80]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   102e8:	e59f3044 	ldr	r3, [pc, #68]	; 10334 <prvSetupTimerInterrupt+0x88>
   102ec:	e3a020f9 	mov	r2, #249	; 0xf9
   102f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   102f4:	e59f3038 	ldr	r3, [pc, #56]	; 10334 <prvSetupTimerInterrupt+0x88>
   102f8:	e3a02000 	mov	r2, #0
   102fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   10300:	e59f302c 	ldr	r3, [pc, #44]	; 10334 <prvSetupTimerInterrupt+0x88>
   10304:	e59f2030 	ldr	r2, [pc, #48]	; 1033c <prvSetupTimerInterrupt+0x90>
   10308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   1030c:	e3a02000 	mov	r2, #0
   10310:	e59f1028 	ldr	r1, [pc, #40]	; 10340 <prvSetupTimerInterrupt+0x94>
   10314:	e3a00040 	mov	r0, #64	; 0x40
   10318:	eb000cca 	bl	13648 <irqRegister>

	irqEnable(64);
   1031c:	e3a00040 	mov	r0, #64	; 0x40
   10320:	eb000ce1 	bl	136ac <irqEnable>

	irqUnblock();
   10324:	eb000cb9 	bl	13610 <irqUnblock>
}
   10328:	e320f000 	nop	{0}
   1032c:	e24bd004 	sub	sp, fp, #4
   10330:	e8bd8800 	pop	{fp, pc}
   10334:	2000b400 	andcs	fp, r0, r0, lsl #8
   10338:	000003e7 	andeq	r0, r0, r7, ror #7
   1033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   10340:	00010274 	andeq	r0, r1, r4, ror r2

00010344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   1034c:	e59f307c 	ldr	r3, [pc, #124]	; 103d0 <vPortISRStartFirstTask+0x8c>
   10350:	e5933000 	ldr	r3, [r3]
   10354:	e2833001 	add	r3, r3, #1
   10358:	e59f2070 	ldr	r2, [pc, #112]	; 103d0 <vPortISRStartFirstTask+0x8c>
   1035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   10360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10364:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   1036c:	e59f0274 	ldr	r0, [pc, #628]	; 105e8 <vPortExitCritical+0x64>
   10370:	e5900000 	ldr	r0, [r0]
   10374:	e590e000 	ldr	lr, [r0]
   10378:	e59f026c 	ldr	r0, [pc, #620]	; 105ec <vPortExitCritical+0x68>
   1037c:	e8be0002 	ldm	lr!, {r1}
   10380:	e5801000 	str	r1, [r0]
   10384:	e8be0001 	ldm	lr!, {r0}
   10388:	e16ff000 	msr	SPSR_fsxc, r0
   1038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10390:	e320f000 	nop	{0}
   10394:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10398:	e25ef004 	subs	pc, lr, #4
   1039c:	e320f000 	nop	{0}
   103a0:	e320f000 	nop	{0}
   103a4:	e59f3028 	ldr	r3, [pc, #40]	; 103d4 <vPortISRStartFirstTask+0x90>
   103a8:	e5933000 	ldr	r3, [r3]
   103ac:	e59f3024 	ldr	r3, [pc, #36]	; 103d8 <vPortISRStartFirstTask+0x94>
   103b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   103b4:	e8bd4000 	ldmfd	sp!, {lr}
   103b8:	e24ee004 	sub	lr, lr, #4
   103bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   103c0:	e320f000 	nop	{0}
   103c4:	e28bd000 	add	sp, fp, #0
   103c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   103cc:	e12fff1e 	bx	lr
   103d0:	00014770 	andeq	r4, r1, r0, ror r7
   103d4:	0001475c 	andeq	r4, r1, ip, asr r7
   103d8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000103dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   103dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   103e0:	e92d0001 	stmfd	sp!, {r0}
   103e4:	e94d2000 	stmdb	sp, {sp}^
   103e8:	e24dd004 	sub	sp, sp, #4
   103ec:	e8bd0001 	ldmfd	sp!, {r0}
   103f0:	e9204000 	stmdb	r0!, {lr}
   103f4:	e1a0e000 	mov	lr, r0
   103f8:	e8bd0001 	ldmfd	sp!, {r0}
   103fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10400:	e320f000 	nop	{0}
   10404:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   10408:	e14f0000 	mrs	r0, SPSR
   1040c:	e92e0001 	stmdb	lr!, {r0}
   10410:	e59f01d4 	ldr	r0, [pc, #468]	; 105ec <vPortExitCritical+0x68>
   10414:	e5900000 	ldr	r0, [r0]
   10418:	e92e0001 	stmdb	lr!, {r0}
   1041c:	e59f01c4 	ldr	r0, [pc, #452]	; 105e8 <vPortExitCritical+0x64>
   10420:	e5900000 	ldr	r0, [r0]
   10424:	e580e000 	str	lr, [r0]
   10428:	e59f3058 	ldr	r3, [pc, #88]	; 10488 <vPortYieldProcessor+0xac>
   1042c:	e5933000 	ldr	r3, [r3]
   10430:	e59f3054 	ldr	r3, [pc, #84]	; 1048c <vPortYieldProcessor+0xb0>
   10434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10438:	eb000a16 	bl	12c98 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   1043c:	e59f01a4 	ldr	r0, [pc, #420]	; 105e8 <vPortExitCritical+0x64>
   10440:	e5900000 	ldr	r0, [r0]
   10444:	e590e000 	ldr	lr, [r0]
   10448:	e59f019c 	ldr	r0, [pc, #412]	; 105ec <vPortExitCritical+0x68>
   1044c:	e8be0002 	ldm	lr!, {r1}
   10450:	e5801000 	str	r1, [r0]
   10454:	e8be0001 	ldm	lr!, {r0}
   10458:	e16ff000 	msr	SPSR_fsxc, r0
   1045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10460:	e320f000 	nop	{0}
   10464:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10468:	e25ef004 	subs	pc, lr, #4
   1046c:	e320f000 	nop	{0}
   10470:	e320f000 	nop	{0}
   10474:	e59f300c 	ldr	r3, [pc, #12]	; 10488 <vPortYieldProcessor+0xac>
   10478:	e5933000 	ldr	r3, [r3]
   1047c:	e59f3008 	ldr	r3, [pc, #8]	; 1048c <vPortYieldProcessor+0xb0>
   10480:	e5933000 	ldr	r3, [r3]
}
   10484:	e320f000 	nop	{0}
   10488:	0001475c 	andeq	r4, r1, ip, asr r7
   1048c:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   10490:	e92d0001 	stmfd	sp!, {r0}
   10494:	e94d2000 	stmdb	sp, {sp}^
   10498:	e24dd004 	sub	sp, sp, #4
   1049c:	e8bd0001 	ldmfd	sp!, {r0}
   104a0:	e9204000 	stmdb	r0!, {lr}
   104a4:	e1a0e000 	mov	lr, r0
   104a8:	e8bd0001 	ldmfd	sp!, {r0}
   104ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   104b0:	e320f000 	nop	{0}
   104b4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   104b8:	e14f0000 	mrs	r0, SPSR
   104bc:	e92e0001 	stmdb	lr!, {r0}
   104c0:	e59f0124 	ldr	r0, [pc, #292]	; 105ec <vPortExitCritical+0x68>
   104c4:	e5900000 	ldr	r0, [r0]
   104c8:	e92e0001 	stmdb	lr!, {r0}
   104cc:	e59f0114 	ldr	r0, [pc, #276]	; 105e8 <vPortExitCritical+0x64>
   104d0:	e5900000 	ldr	r0, [r0]
   104d4:	e580e000 	str	lr, [r0]
   104d8:	e59f3058 	ldr	r3, [pc, #88]	; 10538 <vFreeRTOS_ISR+0xa8>
   104dc:	e5933000 	ldr	r3, [r3]
   104e0:	e59f3054 	ldr	r3, [pc, #84]	; 1053c <vFreeRTOS_ISR+0xac>
   104e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   104e8:	eb000c20 	bl	13570 <irqHandler>
	portRESTORE_CONTEXT();	
   104ec:	e59f00f4 	ldr	r0, [pc, #244]	; 105e8 <vPortExitCritical+0x64>
   104f0:	e5900000 	ldr	r0, [r0]
   104f4:	e590e000 	ldr	lr, [r0]
   104f8:	e59f00ec 	ldr	r0, [pc, #236]	; 105ec <vPortExitCritical+0x68>
   104fc:	e8be0002 	ldm	lr!, {r1}
   10500:	e5801000 	str	r1, [r0]
   10504:	e8be0001 	ldm	lr!, {r0}
   10508:	e16ff000 	msr	SPSR_fsxc, r0
   1050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10510:	e320f000 	nop	{0}
   10514:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10518:	e25ef004 	subs	pc, lr, #4
   1051c:	e320f000 	nop	{0}
   10520:	e320f000 	nop	{0}
   10524:	e59f300c 	ldr	r3, [pc, #12]	; 10538 <vFreeRTOS_ISR+0xa8>
   10528:	e5933000 	ldr	r3, [r3]
   1052c:	e59f3008 	ldr	r3, [pc, #8]	; 1053c <vFreeRTOS_ISR+0xac>
   10530:	e5933000 	ldr	r3, [r3]
}
   10534:	e320f000 	nop	{0}
   10538:	0001475c 	andeq	r4, r1, ip, asr r7
   1053c:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10548:	e92d0001 	stmfd	sp!, {r0}
   1054c:	e10f0000 	mrs	r0, CPSR
   10550:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10554:	e129f000 	msr	CPSR_fc, r0
   10558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   1055c:	e59f301c 	ldr	r3, [pc, #28]	; 10580 <vPortEnterCritical+0x40>
   10560:	e5933000 	ldr	r3, [r3]
   10564:	e2833001 	add	r3, r3, #1
   10568:	e59f2010 	ldr	r2, [pc, #16]	; 10580 <vPortEnterCritical+0x40>
   1056c:	e5823000 	str	r3, [r2]
}
   10570:	e320f000 	nop	{0}
   10574:	e28bd000 	add	sp, fp, #0
   10578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1057c:	e12fff1e 	bx	lr
   10580:	0001475c 	andeq	r4, r1, ip, asr r7

00010584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   10584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   1058c:	e59f3050 	ldr	r3, [pc, #80]	; 105e4 <vPortExitCritical+0x60>
   10590:	e5933000 	ldr	r3, [r3]
   10594:	e3530000 	cmp	r3, #0
   10598:	0a00000d 	beq	105d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   1059c:	e59f3040 	ldr	r3, [pc, #64]	; 105e4 <vPortExitCritical+0x60>
   105a0:	e5933000 	ldr	r3, [r3]
   105a4:	e2433001 	sub	r3, r3, #1
   105a8:	e59f2034 	ldr	r2, [pc, #52]	; 105e4 <vPortExitCritical+0x60>
   105ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   105b0:	e59f302c 	ldr	r3, [pc, #44]	; 105e4 <vPortExitCritical+0x60>
   105b4:	e5933000 	ldr	r3, [r3]
   105b8:	e3530000 	cmp	r3, #0
   105bc:	1a000004 	bne	105d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   105c0:	e92d0001 	stmfd	sp!, {r0}
   105c4:	e10f0000 	mrs	r0, CPSR
   105c8:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   105cc:	e129f000 	msr	CPSR_fc, r0
   105d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   105d4:	e320f000 	nop	{0}
   105d8:	e28bd000 	add	sp, fp, #0
   105dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   105e0:	e12fff1e 	bx	lr
   105e4:	0001475c 	andeq	r4, r1, ip, asr r7
   105e8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   105ec:	0001475c 	andeq	r4, r1, ip, asr r7

000105f0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   105f0:	e92d4800 	push	{fp, lr}
   105f4:	e28db004 	add	fp, sp, #4
   105f8:	e24dd018 	sub	sp, sp, #24
   105fc:	e50b0010 	str	r0, [fp, #-16]
   10600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   10608:	e3a00038 	mov	r0, #56	; 0x38
   1060c:	eb000e09 	bl	13e38 <pvPortMalloc>
   10610:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   10614:	e51b300c 	ldr	r3, [fp, #-12]
   10618:	e3530000 	cmp	r3, #0
   1061c:	0a000044 	beq	10734 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10620:	e59f3124 	ldr	r3, [pc, #292]	; 1074c <xCoRoutineCreate+0x15c>
   10624:	e5933000 	ldr	r3, [r3]
   10628:	e3530000 	cmp	r3, #0
   1062c:	1a000003 	bne	10640 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   10630:	e59f2114 	ldr	r2, [pc, #276]	; 1074c <xCoRoutineCreate+0x15c>
   10634:	e51b300c 	ldr	r3, [fp, #-12]
   10638:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   1063c:	eb000177 	bl	10c20 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   10640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10644:	e3530001 	cmp	r3, #1
   10648:	9a000001 	bls	10654 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   1064c:	e3a03001 	mov	r3, #1
   10650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   10654:	e51b300c 	ldr	r3, [fp, #-12]
   10658:	e3a02000 	mov	r2, #0
   1065c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   10660:	e51b300c 	ldr	r3, [fp, #-12]
   10664:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10668:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   1066c:	e51b300c 	ldr	r3, [fp, #-12]
   10670:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10674:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   10678:	e51b300c 	ldr	r3, [fp, #-12]
   1067c:	e51b2010 	ldr	r2, [fp, #-16]
   10680:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   10684:	e51b300c 	ldr	r3, [fp, #-12]
   10688:	e2833004 	add	r3, r3, #4
   1068c:	e1a00003 	mov	r0, r3
   10690:	eb0001c9 	bl	10dbc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   10694:	e51b300c 	ldr	r3, [fp, #-12]
   10698:	e2833018 	add	r3, r3, #24
   1069c:	e1a00003 	mov	r0, r3
   106a0:	eb0001c5 	bl	10dbc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   106a4:	e51b300c 	ldr	r3, [fp, #-12]
   106a8:	e51b200c 	ldr	r2, [fp, #-12]
   106ac:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   106b0:	e51b300c 	ldr	r3, [fp, #-12]
   106b4:	e51b200c 	ldr	r2, [fp, #-12]
   106b8:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   106bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   106c0:	e2632005 	rsb	r2, r3, #5
   106c4:	e51b300c 	ldr	r3, [fp, #-12]
   106c8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   106cc:	e51b300c 	ldr	r3, [fp, #-12]
   106d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106d4:	e59f3074 	ldr	r3, [pc, #116]	; 10750 <xCoRoutineCreate+0x160>
   106d8:	e5933000 	ldr	r3, [r3]
   106dc:	e1520003 	cmp	r2, r3
   106e0:	9a000003 	bls	106f4 <xCoRoutineCreate+0x104>
   106e4:	e51b300c 	ldr	r3, [fp, #-12]
   106e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   106ec:	e59f205c 	ldr	r2, [pc, #92]	; 10750 <xCoRoutineCreate+0x160>
   106f0:	e5823000 	str	r3, [r2]
   106f4:	e51b300c 	ldr	r3, [fp, #-12]
   106f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106fc:	e1a03002 	mov	r3, r2
   10700:	e1a03103 	lsl	r3, r3, #2
   10704:	e0833002 	add	r3, r3, r2
   10708:	e1a03103 	lsl	r3, r3, #2
   1070c:	e59f2040 	ldr	r2, [pc, #64]	; 10754 <xCoRoutineCreate+0x164>
   10710:	e0832002 	add	r2, r3, r2
   10714:	e51b300c 	ldr	r3, [fp, #-12]
   10718:	e2833004 	add	r3, r3, #4
   1071c:	e1a01003 	mov	r1, r3
   10720:	e1a00002 	mov	r0, r2
   10724:	eb0001af 	bl	10de8 <vListInsertEnd>

		xReturn = pdPASS;
   10728:	e3a03001 	mov	r3, #1
   1072c:	e50b3008 	str	r3, [fp, #-8]
   10730:	ea000001 	b	1073c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   10734:	e3e03000 	mvn	r3, #0
   10738:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   1073c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10740:	e1a00003 	mov	r0, r3
   10744:	e24bd004 	sub	sp, fp, #4
   10748:	e8bd8800 	pop	{fp, pc}
   1074c:	000147e0 	andeq	r4, r1, r0, ror #15
   10750:	000147e4 	andeq	r4, r1, r4, ror #15
   10754:	00014774 	andeq	r4, r1, r4, ror r7

00010758 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   10758:	e92d4800 	push	{fp, lr}
   1075c:	e28db004 	add	fp, sp, #4
   10760:	e24dd010 	sub	sp, sp, #16
   10764:	e50b0010 	str	r0, [fp, #-16]
   10768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   1076c:	e59f30b8 	ldr	r3, [pc, #184]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   10770:	e5932000 	ldr	r2, [r3]
   10774:	e51b3010 	ldr	r3, [fp, #-16]
   10778:	e0823003 	add	r3, r2, r3
   1077c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10780:	e59f30a8 	ldr	r3, [pc, #168]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10784:	e5933000 	ldr	r3, [r3]
   10788:	e2833004 	add	r3, r3, #4
   1078c:	e1a00003 	mov	r0, r3
   10790:	eb0001f0 	bl	10f58 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   10794:	e59f3094 	ldr	r3, [pc, #148]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10798:	e5933000 	ldr	r3, [r3]
   1079c:	e51b2008 	ldr	r2, [fp, #-8]
   107a0:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   107a4:	e59f3080 	ldr	r3, [pc, #128]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   107a8:	e5933000 	ldr	r3, [r3]
   107ac:	e51b2008 	ldr	r2, [fp, #-8]
   107b0:	e1520003 	cmp	r2, r3
   107b4:	2a000008 	bcs	107dc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107b8:	e59f3074 	ldr	r3, [pc, #116]	; 10834 <vCoRoutineAddToDelayedList+0xdc>
   107bc:	e5932000 	ldr	r2, [r3]
   107c0:	e59f3068 	ldr	r3, [pc, #104]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107c4:	e5933000 	ldr	r3, [r3]
   107c8:	e2833004 	add	r3, r3, #4
   107cc:	e1a01003 	mov	r1, r3
   107d0:	e1a00002 	mov	r0, r2
   107d4:	eb0001a9 	bl	10e80 <vListInsert>
   107d8:	ea000007 	b	107fc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107dc:	e59f3054 	ldr	r3, [pc, #84]	; 10838 <vCoRoutineAddToDelayedList+0xe0>
   107e0:	e5932000 	ldr	r2, [r3]
   107e4:	e59f3044 	ldr	r3, [pc, #68]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107e8:	e5933000 	ldr	r3, [r3]
   107ec:	e2833004 	add	r3, r3, #4
   107f0:	e1a01003 	mov	r1, r3
   107f4:	e1a00002 	mov	r0, r2
   107f8:	eb0001a0 	bl	10e80 <vListInsert>
	}

	if( pxEventList )
   107fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10800:	e3530000 	cmp	r3, #0
   10804:	0a000005 	beq	10820 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   10808:	e59f3020 	ldr	r3, [pc, #32]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   1080c:	e5933000 	ldr	r3, [r3]
   10810:	e2833018 	add	r3, r3, #24
   10814:	e1a01003 	mov	r1, r3
   10818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1081c:	eb000197 	bl	10e80 <vListInsert>
	}
}
   10820:	e320f000 	nop	{0}
   10824:	e24bd004 	sub	sp, fp, #4
   10828:	e8bd8800 	pop	{fp, pc}
   1082c:	000147e8 	andeq	r4, r1, r8, ror #15
   10830:	000147e0 	andeq	r4, r1, r0, ror #15
   10834:	000147c8 	andeq	r4, r1, r8, asr #15
   10838:	000147c4 	andeq	r4, r1, r4, asr #15

0001083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   1083c:	e92d4800 	push	{fp, lr}
   10840:	e28db004 	add	fp, sp, #4
   10844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10848:	ea00002c 	b	10900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   1084c:	e92d0001 	stmfd	sp!, {r0}
   10850:	e10f0000 	mrs	r0, CPSR
   10854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10858:	e129f000 	msr	CPSR_fc, r0
   1085c:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   10860:	e59f30b4 	ldr	r3, [pc, #180]	; 1091c <prvCheckPendingReadyList+0xe0>
   10864:	e593300c 	ldr	r3, [r3, #12]
   10868:	e593300c 	ldr	r3, [r3, #12]
   1086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10870:	e51b3008 	ldr	r3, [fp, #-8]
   10874:	e2833018 	add	r3, r3, #24
   10878:	e1a00003 	mov	r0, r3
   1087c:	eb0001b5 	bl	10f58 <vListRemove>
		}
		portENABLE_INTERRUPTS();
   10880:	e92d0001 	stmfd	sp!, {r0}
   10884:	e10f0000 	mrs	r0, CPSR
   10888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   1088c:	e129f000 	msr	CPSR_fc, r0
   10890:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10894:	e51b3008 	ldr	r3, [fp, #-8]
   10898:	e2833004 	add	r3, r3, #4
   1089c:	e1a00003 	mov	r0, r3
   108a0:	eb0001ac 	bl	10f58 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   108a4:	e51b3008 	ldr	r3, [fp, #-8]
   108a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108ac:	e59f306c 	ldr	r3, [pc, #108]	; 10920 <prvCheckPendingReadyList+0xe4>
   108b0:	e5933000 	ldr	r3, [r3]
   108b4:	e1520003 	cmp	r2, r3
   108b8:	9a000003 	bls	108cc <prvCheckPendingReadyList+0x90>
   108bc:	e51b3008 	ldr	r3, [fp, #-8]
   108c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   108c4:	e59f2054 	ldr	r2, [pc, #84]	; 10920 <prvCheckPendingReadyList+0xe4>
   108c8:	e5823000 	str	r3, [r2]
   108cc:	e51b3008 	ldr	r3, [fp, #-8]
   108d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108d4:	e1a03002 	mov	r3, r2
   108d8:	e1a03103 	lsl	r3, r3, #2
   108dc:	e0833002 	add	r3, r3, r2
   108e0:	e1a03103 	lsl	r3, r3, #2
   108e4:	e59f2038 	ldr	r2, [pc, #56]	; 10924 <prvCheckPendingReadyList+0xe8>
   108e8:	e0832002 	add	r2, r3, r2
   108ec:	e51b3008 	ldr	r3, [fp, #-8]
   108f0:	e2833004 	add	r3, r3, #4
   108f4:	e1a01003 	mov	r1, r3
   108f8:	e1a00002 	mov	r0, r2
   108fc:	eb000139 	bl	10de8 <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10900:	e59f3014 	ldr	r3, [pc, #20]	; 1091c <prvCheckPendingReadyList+0xe0>
   10904:	e5933000 	ldr	r3, [r3]
   10908:	e3530000 	cmp	r3, #0
   1090c:	1affffce 	bne	1084c <prvCheckPendingReadyList+0x10>
	}
}
   10910:	e320f000 	nop	{0}
   10914:	e24bd004 	sub	sp, fp, #4
   10918:	e8bd8800 	pop	{fp, pc}
   1091c:	000147cc 	andeq	r4, r1, ip, asr #15
   10920:	000147e4 	andeq	r4, r1, r4, ror #15
   10924:	00014774 	andeq	r4, r1, r4, ror r7

00010928 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   10928:	e92d4800 	push	{fp, lr}
   1092c:	e28db004 	add	fp, sp, #4
   10930:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   10934:	eb0007df 	bl	128b8 <xTaskGetTickCount>
   10938:	e1a02000 	mov	r2, r0
   1093c:	e59f3198 	ldr	r3, [pc, #408]	; 10adc <prvCheckDelayedList+0x1b4>
   10940:	e5933000 	ldr	r3, [r3]
   10944:	e0423003 	sub	r3, r2, r3
   10948:	e59f2190 	ldr	r2, [pc, #400]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1094c:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   10950:	ea000056 	b	10ab0 <prvCheckDelayedList+0x188>
	{
		xCoRoutineTickCount++;
   10954:	e59f3188 	ldr	r3, [pc, #392]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10958:	e5933000 	ldr	r3, [r3]
   1095c:	e2833001 	add	r3, r3, #1
   10960:	e59f217c 	ldr	r2, [pc, #380]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10964:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   10968:	e59f3170 	ldr	r3, [pc, #368]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1096c:	e5933000 	ldr	r3, [r3]
   10970:	e2433001 	sub	r3, r3, #1
   10974:	e59f2164 	ldr	r2, [pc, #356]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10978:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   1097c:	e59f3160 	ldr	r3, [pc, #352]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10980:	e5933000 	ldr	r3, [r3]
   10984:	e3530000 	cmp	r3, #0
   10988:	1a000043 	bne	10a9c <prvCheckDelayedList+0x174>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   1098c:	e59f3154 	ldr	r3, [pc, #340]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10990:	e5933000 	ldr	r3, [r3]
   10994:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10998:	e59f314c 	ldr	r3, [pc, #332]	; 10aec <prvCheckDelayedList+0x1c4>
   1099c:	e5933000 	ldr	r3, [r3]
   109a0:	e59f2140 	ldr	r2, [pc, #320]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109a4:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   109a8:	e59f213c 	ldr	r2, [pc, #316]	; 10aec <prvCheckDelayedList+0x1c4>
   109ac:	e51b3008 	ldr	r3, [fp, #-8]
   109b0:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   109b4:	ea000038 	b	10a9c <prvCheckDelayedList+0x174>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   109b8:	e59f3128 	ldr	r3, [pc, #296]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109bc:	e5933000 	ldr	r3, [r3]
   109c0:	e593300c 	ldr	r3, [r3, #12]
   109c4:	e593300c 	ldr	r3, [r3, #12]
   109c8:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   109cc:	e51b300c 	ldr	r3, [fp, #-12]
   109d0:	e5932004 	ldr	r2, [r3, #4]
   109d4:	e59f3108 	ldr	r3, [pc, #264]	; 10ae4 <prvCheckDelayedList+0x1bc>
   109d8:	e5933000 	ldr	r3, [r3]
   109dc:	e1520003 	cmp	r2, r3
   109e0:	9a000000 	bls	109e8 <prvCheckDelayedList+0xc0>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   109e4:	ea000031 	b	10ab0 <prvCheckDelayedList+0x188>
			}																						

			portDISABLE_INTERRUPTS();
   109e8:	e92d0001 	stmfd	sp!, {r0}
   109ec:	e10f0000 	mrs	r0, CPSR
   109f0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   109f4:	e129f000 	msr	CPSR_fc, r0
   109f8:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   109fc:	e51b300c 	ldr	r3, [fp, #-12]
   10a00:	e2833004 	add	r3, r3, #4
   10a04:	e1a00003 	mov	r0, r3
   10a08:	eb000152 	bl	10f58 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   10a0c:	e51b300c 	ldr	r3, [fp, #-12]
   10a10:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   10a14:	e3530000 	cmp	r3, #0
   10a18:	0a000003 	beq	10a2c <prvCheckDelayedList+0x104>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   10a1c:	e51b300c 	ldr	r3, [fp, #-12]
   10a20:	e2833018 	add	r3, r3, #24
   10a24:	e1a00003 	mov	r0, r3
   10a28:	eb00014a 	bl	10f58 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   10a2c:	e92d0001 	stmfd	sp!, {r0}
   10a30:	e10f0000 	mrs	r0, CPSR
   10a34:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a38:	e129f000 	msr	CPSR_fc, r0
   10a3c:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10a40:	e51b300c 	ldr	r3, [fp, #-12]
   10a44:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a48:	e59f30a0 	ldr	r3, [pc, #160]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a4c:	e5933000 	ldr	r3, [r3]
   10a50:	e1520003 	cmp	r2, r3
   10a54:	9a000003 	bls	10a68 <prvCheckDelayedList+0x140>
   10a58:	e51b300c 	ldr	r3, [fp, #-12]
   10a5c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10a60:	e59f2088 	ldr	r2, [pc, #136]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a64:	e5823000 	str	r3, [r2]
   10a68:	e51b300c 	ldr	r3, [fp, #-12]
   10a6c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a70:	e1a03002 	mov	r3, r2
   10a74:	e1a03103 	lsl	r3, r3, #2
   10a78:	e0833002 	add	r3, r3, r2
   10a7c:	e1a03103 	lsl	r3, r3, #2
   10a80:	e59f206c 	ldr	r2, [pc, #108]	; 10af4 <prvCheckDelayedList+0x1cc>
   10a84:	e0832002 	add	r2, r3, r2
   10a88:	e51b300c 	ldr	r3, [fp, #-12]
   10a8c:	e2833004 	add	r3, r3, #4
   10a90:	e1a01003 	mov	r1, r3
   10a94:	e1a00002 	mov	r0, r2
   10a98:	eb0000d2 	bl	10de8 <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10a9c:	e59f3044 	ldr	r3, [pc, #68]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10aa0:	e5933000 	ldr	r3, [r3]
   10aa4:	e5933000 	ldr	r3, [r3]
   10aa8:	e3530000 	cmp	r3, #0
   10aac:	1affffc1 	bne	109b8 <prvCheckDelayedList+0x90>
	while( xPassedTicks )
   10ab0:	e59f3028 	ldr	r3, [pc, #40]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10ab4:	e5933000 	ldr	r3, [r3]
   10ab8:	e3530000 	cmp	r3, #0
   10abc:	1affffa4 	bne	10954 <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10ac0:	e59f301c 	ldr	r3, [pc, #28]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10ac4:	e5933000 	ldr	r3, [r3]
   10ac8:	e59f200c 	ldr	r2, [pc, #12]	; 10adc <prvCheckDelayedList+0x1b4>
   10acc:	e5823000 	str	r3, [r2]
}
   10ad0:	e320f000 	nop	{0}
   10ad4:	e24bd004 	sub	sp, fp, #4
   10ad8:	e8bd8800 	pop	{fp, pc}
   10adc:	000147ec 	andeq	r4, r1, ip, ror #15
   10ae0:	000147f0 	strdeq	r4, [r1], -r0
   10ae4:	000147e8 	andeq	r4, r1, r8, ror #15
   10ae8:	000147c4 	andeq	r4, r1, r4, asr #15
   10aec:	000147c8 	andeq	r4, r1, r8, asr #15
   10af0:	000147e4 	andeq	r4, r1, r4, ror #15
   10af4:	00014774 	andeq	r4, r1, r4, ror r7

00010af8 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10af8:	e92d4800 	push	{fp, lr}
   10afc:	e28db004 	add	fp, sp, #4
   10b00:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10b04:	ebffff4c 	bl	1083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10b08:	ebffff86 	bl	10928 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b0c:	ea000008 	b	10b34 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10b10:	e59f30fc 	ldr	r3, [pc, #252]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b14:	e5933000 	ldr	r3, [r3]
   10b18:	e3530000 	cmp	r3, #0
   10b1c:	0a000039 	beq	10c08 <vCoRoutineSchedule+0x110>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   10b20:	e59f30ec 	ldr	r3, [pc, #236]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b24:	e5933000 	ldr	r3, [r3]
   10b28:	e2433001 	sub	r3, r3, #1
   10b2c:	e59f20e0 	ldr	r2, [pc, #224]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b30:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b34:	e59f30d8 	ldr	r3, [pc, #216]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b38:	e5932000 	ldr	r2, [r3]
   10b3c:	e59f10d4 	ldr	r1, [pc, #212]	; 10c18 <vCoRoutineSchedule+0x120>
   10b40:	e1a03002 	mov	r3, r2
   10b44:	e1a03103 	lsl	r3, r3, #2
   10b48:	e0833002 	add	r3, r3, r2
   10b4c:	e1a03103 	lsl	r3, r3, #2
   10b50:	e0813003 	add	r3, r1, r3
   10b54:	e5933000 	ldr	r3, [r3]
   10b58:	e3530000 	cmp	r3, #0
   10b5c:	0affffeb 	beq	10b10 <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10b60:	e59f30ac 	ldr	r3, [pc, #172]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b64:	e5932000 	ldr	r2, [r3]
   10b68:	e1a03002 	mov	r3, r2
   10b6c:	e1a03103 	lsl	r3, r3, #2
   10b70:	e0833002 	add	r3, r3, r2
   10b74:	e1a03103 	lsl	r3, r3, #2
   10b78:	e59f2098 	ldr	r2, [pc, #152]	; 10c18 <vCoRoutineSchedule+0x120>
   10b7c:	e0833002 	add	r3, r3, r2
   10b80:	e50b3008 	str	r3, [fp, #-8]
   10b84:	e51b3008 	ldr	r3, [fp, #-8]
   10b88:	e5933004 	ldr	r3, [r3, #4]
   10b8c:	e5932004 	ldr	r2, [r3, #4]
   10b90:	e51b3008 	ldr	r3, [fp, #-8]
   10b94:	e5832004 	str	r2, [r3, #4]
   10b98:	e51b3008 	ldr	r3, [fp, #-8]
   10b9c:	e5932004 	ldr	r2, [r3, #4]
   10ba0:	e51b3008 	ldr	r3, [fp, #-8]
   10ba4:	e2833008 	add	r3, r3, #8
   10ba8:	e1520003 	cmp	r2, r3
   10bac:	1a000004 	bne	10bc4 <vCoRoutineSchedule+0xcc>
   10bb0:	e51b3008 	ldr	r3, [fp, #-8]
   10bb4:	e5933004 	ldr	r3, [r3, #4]
   10bb8:	e5932004 	ldr	r2, [r3, #4]
   10bbc:	e51b3008 	ldr	r3, [fp, #-8]
   10bc0:	e5832004 	str	r2, [r3, #4]
   10bc4:	e51b3008 	ldr	r3, [fp, #-8]
   10bc8:	e5933004 	ldr	r3, [r3, #4]
   10bcc:	e593300c 	ldr	r3, [r3, #12]
   10bd0:	e59f2044 	ldr	r2, [pc, #68]	; 10c1c <vCoRoutineSchedule+0x124>
   10bd4:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10bd8:	e59f303c 	ldr	r3, [pc, #60]	; 10c1c <vCoRoutineSchedule+0x124>
   10bdc:	e5933000 	ldr	r3, [r3]
   10be0:	e5933000 	ldr	r3, [r3]
   10be4:	e59f2030 	ldr	r2, [pc, #48]	; 10c1c <vCoRoutineSchedule+0x124>
   10be8:	e5920000 	ldr	r0, [r2]
   10bec:	e59f2028 	ldr	r2, [pc, #40]	; 10c1c <vCoRoutineSchedule+0x124>
   10bf0:	e5922000 	ldr	r2, [r2]
   10bf4:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   10bf8:	e1a01002 	mov	r1, r2
   10bfc:	e12fff33 	blx	r3

	return;
   10c00:	e320f000 	nop	{0}
   10c04:	ea000000 	b	10c0c <vCoRoutineSchedule+0x114>
			return;
   10c08:	e320f000 	nop	{0}
}
   10c0c:	e24bd004 	sub	sp, fp, #4
   10c10:	e8bd8800 	pop	{fp, pc}
   10c14:	000147e4 	andeq	r4, r1, r4, ror #15
   10c18:	00014774 	andeq	r4, r1, r4, ror r7
   10c1c:	000147e0 	andeq	r4, r1, r0, ror #15

00010c20 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10c20:	e92d4800 	push	{fp, lr}
   10c24:	e28db004 	add	fp, sp, #4
   10c28:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c2c:	e3a03000 	mov	r3, #0
   10c30:	e50b3008 	str	r3, [fp, #-8]
   10c34:	ea00000b 	b	10c68 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10c38:	e51b2008 	ldr	r2, [fp, #-8]
   10c3c:	e1a03002 	mov	r3, r2
   10c40:	e1a03103 	lsl	r3, r3, #2
   10c44:	e0833002 	add	r3, r3, r2
   10c48:	e1a03103 	lsl	r3, r3, #2
   10c4c:	e59f205c 	ldr	r2, [pc, #92]	; 10cb0 <prvInitialiseCoRoutineLists+0x90>
   10c50:	e0833002 	add	r3, r3, r2
   10c54:	e1a00003 	mov	r0, r3
   10c58:	eb00003d 	bl	10d54 <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c5c:	e51b3008 	ldr	r3, [fp, #-8]
   10c60:	e2833001 	add	r3, r3, #1
   10c64:	e50b3008 	str	r3, [fp, #-8]
   10c68:	e51b3008 	ldr	r3, [fp, #-8]
   10c6c:	e3530001 	cmp	r3, #1
   10c70:	9afffff0 	bls	10c38 <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10c74:	e59f0038 	ldr	r0, [pc, #56]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c78:	eb000035 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10c7c:	e59f0034 	ldr	r0, [pc, #52]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10c80:	eb000033 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10c84:	e59f0030 	ldr	r0, [pc, #48]	; 10cbc <prvInitialiseCoRoutineLists+0x9c>
   10c88:	eb000031 	bl	10d54 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10c8c:	e59f302c 	ldr	r3, [pc, #44]	; 10cc0 <prvInitialiseCoRoutineLists+0xa0>
   10c90:	e59f201c 	ldr	r2, [pc, #28]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c94:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10c98:	e59f3024 	ldr	r3, [pc, #36]	; 10cc4 <prvInitialiseCoRoutineLists+0xa4>
   10c9c:	e59f2014 	ldr	r2, [pc, #20]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10ca0:	e5832000 	str	r2, [r3]
}
   10ca4:	e320f000 	nop	{0}
   10ca8:	e24bd004 	sub	sp, fp, #4
   10cac:	e8bd8800 	pop	{fp, pc}
   10cb0:	00014774 	andeq	r4, r1, r4, ror r7
   10cb4:	0001479c 	muleq	r1, ip, r7
   10cb8:	000147b0 			; <UNDEFINED> instruction: 0x000147b0
   10cbc:	000147cc 	andeq	r4, r1, ip, asr #15
   10cc0:	000147c4 	andeq	r4, r1, r4, asr #15
   10cc4:	000147c8 	andeq	r4, r1, r8, asr #15

00010cc8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10cc8:	e92d4800 	push	{fp, lr}
   10ccc:	e28db004 	add	fp, sp, #4
   10cd0:	e24dd010 	sub	sp, sp, #16
   10cd4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10cd8:	e51b3010 	ldr	r3, [fp, #-16]
   10cdc:	e593300c 	ldr	r3, [r3, #12]
   10ce0:	e593300c 	ldr	r3, [r3, #12]
   10ce4:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10ce8:	e51b300c 	ldr	r3, [fp, #-12]
   10cec:	e2833018 	add	r3, r3, #24
   10cf0:	e1a00003 	mov	r0, r3
   10cf4:	eb000097 	bl	10f58 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10cf8:	e51b300c 	ldr	r3, [fp, #-12]
   10cfc:	e2833018 	add	r3, r3, #24
   10d00:	e1a01003 	mov	r1, r3
   10d04:	e59f0040 	ldr	r0, [pc, #64]	; 10d4c <xCoRoutineRemoveFromEventList+0x84>
   10d08:	eb000036 	bl	10de8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10d0c:	e51b300c 	ldr	r3, [fp, #-12]
   10d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10d14:	e59f3034 	ldr	r3, [pc, #52]	; 10d50 <xCoRoutineRemoveFromEventList+0x88>
   10d18:	e5933000 	ldr	r3, [r3]
   10d1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10d20:	e1520003 	cmp	r2, r3
   10d24:	3a000002 	bcc	10d34 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   10d28:	e3a03001 	mov	r3, #1
   10d2c:	e50b3008 	str	r3, [fp, #-8]
   10d30:	ea000001 	b	10d3c <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   10d34:	e3a03000 	mov	r3, #0
   10d38:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   10d3c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10d40:	e1a00003 	mov	r0, r3
   10d44:	e24bd004 	sub	sp, fp, #4
   10d48:	e8bd8800 	pop	{fp, pc}
   10d4c:	000147cc 	andeq	r4, r1, ip, asr #15
   10d50:	000147e0 	andeq	r4, r1, r0, ror #15

00010d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   10d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d58:	e28db000 	add	fp, sp, #0
   10d5c:	e24dd00c 	sub	sp, sp, #12
   10d60:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   10d64:	e51b3008 	ldr	r3, [fp, #-8]
   10d68:	e2832008 	add	r2, r3, #8
   10d6c:	e51b3008 	ldr	r3, [fp, #-8]
   10d70:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10d74:	e51b3008 	ldr	r3, [fp, #-8]
   10d78:	e3e02000 	mvn	r2, #0
   10d7c:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   10d80:	e51b3008 	ldr	r3, [fp, #-8]
   10d84:	e2832008 	add	r2, r3, #8
   10d88:	e51b3008 	ldr	r3, [fp, #-8]
   10d8c:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   10d90:	e51b3008 	ldr	r3, [fp, #-8]
   10d94:	e2832008 	add	r2, r3, #8
   10d98:	e51b3008 	ldr	r3, [fp, #-8]
   10d9c:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   10da0:	e51b3008 	ldr	r3, [fp, #-8]
   10da4:	e3a02000 	mov	r2, #0
   10da8:	e5832000 	str	r2, [r3]
}
   10dac:	e320f000 	nop	{0}
   10db0:	e28bd000 	add	sp, fp, #0
   10db4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10db8:	e12fff1e 	bx	lr

00010dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   10dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dc0:	e28db000 	add	fp, sp, #0
   10dc4:	e24dd00c 	sub	sp, sp, #12
   10dc8:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   10dcc:	e51b3008 	ldr	r3, [fp, #-8]
   10dd0:	e3a02000 	mov	r2, #0
   10dd4:	e5832010 	str	r2, [r3, #16]
}
   10dd8:	e320f000 	nop	{0}
   10ddc:	e28bd000 	add	sp, fp, #0
   10de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10de4:	e12fff1e 	bx	lr

00010de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   10de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dec:	e28db000 	add	fp, sp, #0
   10df0:	e24dd014 	sub	sp, sp, #20
   10df4:	e50b0010 	str	r0, [fp, #-16]
   10df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   10dfc:	e51b3010 	ldr	r3, [fp, #-16]
   10e00:	e5933004 	ldr	r3, [r3, #4]
   10e04:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   10e08:	e51b3008 	ldr	r3, [fp, #-8]
   10e0c:	e5932004 	ldr	r2, [r3, #4]
   10e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e14:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   10e18:	e51b3010 	ldr	r3, [fp, #-16]
   10e1c:	e5932004 	ldr	r2, [r3, #4]
   10e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e24:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10e28:	e51b3008 	ldr	r3, [fp, #-8]
   10e2c:	e5933004 	ldr	r3, [r3, #4]
   10e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e34:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   10e38:	e51b3008 	ldr	r3, [fp, #-8]
   10e3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e40:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   10e44:	e51b3010 	ldr	r3, [fp, #-16]
   10e48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e4c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e54:	e51b2010 	ldr	r2, [fp, #-16]
   10e58:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10e5c:	e51b3010 	ldr	r3, [fp, #-16]
   10e60:	e5933000 	ldr	r3, [r3]
   10e64:	e2832001 	add	r2, r3, #1
   10e68:	e51b3010 	ldr	r3, [fp, #-16]
   10e6c:	e5832000 	str	r2, [r3]
}
   10e70:	e320f000 	nop	{0}
   10e74:	e28bd000 	add	sp, fp, #0
   10e78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10e7c:	e12fff1e 	bx	lr

00010e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   10e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10e84:	e28db000 	add	fp, sp, #0
   10e88:	e24dd014 	sub	sp, sp, #20
   10e8c:	e50b0010 	str	r0, [fp, #-16]
   10e90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   10e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e98:	e5933000 	ldr	r3, [r3]
   10e9c:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10ea0:	e51b300c 	ldr	r3, [fp, #-12]
   10ea4:	e3730001 	cmn	r3, #1
   10ea8:	1a000003 	bne	10ebc <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10eac:	e51b3010 	ldr	r3, [fp, #-16]
   10eb0:	e5933010 	ldr	r3, [r3, #16]
   10eb4:	e50b3008 	str	r3, [fp, #-8]
   10eb8:	ea00000c 	b	10ef0 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   10ebc:	e51b3010 	ldr	r3, [fp, #-16]
   10ec0:	e2833008 	add	r3, r3, #8
   10ec4:	e50b3008 	str	r3, [fp, #-8]
   10ec8:	ea000002 	b	10ed8 <vListInsert+0x58>
   10ecc:	e51b3008 	ldr	r3, [fp, #-8]
   10ed0:	e5933004 	ldr	r3, [r3, #4]
   10ed4:	e50b3008 	str	r3, [fp, #-8]
   10ed8:	e51b3008 	ldr	r3, [fp, #-8]
   10edc:	e5933004 	ldr	r3, [r3, #4]
   10ee0:	e5932000 	ldr	r2, [r3]
   10ee4:	e51b300c 	ldr	r3, [fp, #-12]
   10ee8:	e1520003 	cmp	r2, r3
   10eec:	9afffff6 	bls	10ecc <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10ef0:	e51b3008 	ldr	r3, [fp, #-8]
   10ef4:	e5932004 	ldr	r2, [r3, #4]
   10ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10efc:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f04:	e5933004 	ldr	r3, [r3, #4]
   10f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f0c:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   10f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f14:	e51b2008 	ldr	r2, [fp, #-8]
   10f18:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   10f1c:	e51b3008 	ldr	r3, [fp, #-8]
   10f20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f24:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f2c:	e51b2010 	ldr	r2, [fp, #-16]
   10f30:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10f34:	e51b3010 	ldr	r3, [fp, #-16]
   10f38:	e5933000 	ldr	r3, [r3]
   10f3c:	e2832001 	add	r2, r3, #1
   10f40:	e51b3010 	ldr	r3, [fp, #-16]
   10f44:	e5832000 	str	r2, [r3]
}
   10f48:	e320f000 	nop	{0}
   10f4c:	e28bd000 	add	sp, fp, #0
   10f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f54:	e12fff1e 	bx	lr

00010f58 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   10f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f5c:	e28db000 	add	fp, sp, #0
   10f60:	e24dd014 	sub	sp, sp, #20
   10f64:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   10f68:	e51b3010 	ldr	r3, [fp, #-16]
   10f6c:	e5933004 	ldr	r3, [r3, #4]
   10f70:	e51b2010 	ldr	r2, [fp, #-16]
   10f74:	e5922008 	ldr	r2, [r2, #8]
   10f78:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f7c:	e51b3010 	ldr	r3, [fp, #-16]
   10f80:	e5933008 	ldr	r3, [r3, #8]
   10f84:	e51b2010 	ldr	r2, [fp, #-16]
   10f88:	e5922004 	ldr	r2, [r2, #4]
   10f8c:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   10f90:	e51b3010 	ldr	r3, [fp, #-16]
   10f94:	e5933010 	ldr	r3, [r3, #16]
   10f98:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   10f9c:	e51b3008 	ldr	r3, [fp, #-8]
   10fa0:	e5932004 	ldr	r2, [r3, #4]
   10fa4:	e51b3010 	ldr	r3, [fp, #-16]
   10fa8:	e1520003 	cmp	r2, r3
   10fac:	1a000003 	bne	10fc0 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   10fb0:	e51b3010 	ldr	r3, [fp, #-16]
   10fb4:	e5932008 	ldr	r2, [r3, #8]
   10fb8:	e51b3008 	ldr	r3, [fp, #-8]
   10fbc:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   10fc0:	e51b3010 	ldr	r3, [fp, #-16]
   10fc4:	e3a02000 	mov	r2, #0
   10fc8:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   10fcc:	e51b3008 	ldr	r3, [fp, #-8]
   10fd0:	e5933000 	ldr	r3, [r3]
   10fd4:	e2432001 	sub	r2, r3, #1
   10fd8:	e51b3008 	ldr	r3, [fp, #-8]
   10fdc:	e5832000 	str	r2, [r3]
}
   10fe0:	e320f000 	nop	{0}
   10fe4:	e28bd000 	add	sp, fp, #0
   10fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10fec:	e12fff1e 	bx	lr

00010ff0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   10ff0:	e92d4800 	push	{fp, lr}
   10ff4:	e28db004 	add	fp, sp, #4
   10ff8:	e24dd008 	sub	sp, sp, #8
   10ffc:	e50b0008 	str	r0, [fp, #-8]
   11000:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11004:	ebfffd4d 	bl	10540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   11008:	e51b3008 	ldr	r3, [fp, #-8]
   1100c:	e5932000 	ldr	r2, [r3]
   11010:	e51b3008 	ldr	r3, [fp, #-8]
   11014:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11018:	e51b1008 	ldr	r1, [fp, #-8]
   1101c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11020:	e0030391 	mul	r3, r1, r3
   11024:	e0822003 	add	r2, r2, r3
   11028:	e51b3008 	ldr	r3, [fp, #-8]
   1102c:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   11030:	e51b3008 	ldr	r3, [fp, #-8]
   11034:	e3a02000 	mov	r2, #0
   11038:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1103c:	e51b3008 	ldr	r3, [fp, #-8]
   11040:	e5932000 	ldr	r2, [r3]
   11044:	e51b3008 	ldr	r3, [fp, #-8]
   11048:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   1104c:	e51b3008 	ldr	r3, [fp, #-8]
   11050:	e5932000 	ldr	r2, [r3]
   11054:	e51b3008 	ldr	r3, [fp, #-8]
   11058:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1105c:	e2433001 	sub	r3, r3, #1
   11060:	e51b1008 	ldr	r1, [fp, #-8]
   11064:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11068:	e0030391 	mul	r3, r1, r3
   1106c:	e0822003 	add	r2, r2, r3
   11070:	e51b3008 	ldr	r3, [fp, #-8]
   11074:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   11078:	e51b3008 	ldr	r3, [fp, #-8]
   1107c:	e3e02000 	mvn	r2, #0
   11080:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   11084:	e51b3008 	ldr	r3, [fp, #-8]
   11088:	e3e02000 	mvn	r2, #0
   1108c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   11090:	e51b300c 	ldr	r3, [fp, #-12]
   11094:	e3530000 	cmp	r3, #0
   11098:	1a00000c 	bne	110d0 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1109c:	e51b3008 	ldr	r3, [fp, #-8]
   110a0:	e5933010 	ldr	r3, [r3, #16]
   110a4:	e3530000 	cmp	r3, #0
   110a8:	0a000010 	beq	110f0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   110ac:	e51b3008 	ldr	r3, [fp, #-8]
   110b0:	e2833010 	add	r3, r3, #16
   110b4:	e1a00003 	mov	r0, r3
   110b8:	eb00075f 	bl	12e3c <xTaskRemoveFromEventList>
   110bc:	e1a03000 	mov	r3, r0
   110c0:	e3530001 	cmp	r3, #1
   110c4:	1a000009 	bne	110f0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   110c8:	ef000000 	svc	0x00000000
   110cc:	ea000007 	b	110f0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   110d0:	e51b3008 	ldr	r3, [fp, #-8]
   110d4:	e2833010 	add	r3, r3, #16
   110d8:	e1a00003 	mov	r0, r3
   110dc:	ebffff1c 	bl	10d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   110e0:	e51b3008 	ldr	r3, [fp, #-8]
   110e4:	e2833024 	add	r3, r3, #36	; 0x24
   110e8:	e1a00003 	mov	r0, r3
   110ec:	ebffff18 	bl	10d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   110f0:	ebfffd23 	bl	10584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   110f4:	e3a03001 	mov	r3, #1
}
   110f8:	e1a00003 	mov	r0, r3
   110fc:	e24bd004 	sub	sp, fp, #4
   11100:	e8bd8800 	pop	{fp, pc}

00011104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   11104:	e92d4800 	push	{fp, lr}
   11108:	e28db004 	add	fp, sp, #4
   1110c:	e24dd020 	sub	sp, sp, #32
   11110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11118:	e1a03002 	mov	r3, r2
   1111c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   11120:	e3a03000 	mov	r3, #0
   11124:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   11128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1112c:	e3530000 	cmp	r3, #0
   11130:	0a000021 	beq	111bc <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   11134:	e3a0004c 	mov	r0, #76	; 0x4c
   11138:	eb000b3e 	bl	13e38 <pvPortMalloc>
   1113c:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   11140:	e51b300c 	ldr	r3, [fp, #-12]
   11144:	e3530000 	cmp	r3, #0
   11148:	0a00001b 	beq	111bc <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11154:	e0030392 	mul	r3, r2, r3
   11158:	e2833001 	add	r3, r3, #1
   1115c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11160:	e51b0010 	ldr	r0, [fp, #-16]
   11164:	eb000b33 	bl	13e38 <pvPortMalloc>
   11168:	e1a02000 	mov	r2, r0
   1116c:	e51b300c 	ldr	r3, [fp, #-12]
   11170:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   11174:	e51b300c 	ldr	r3, [fp, #-12]
   11178:	e5933000 	ldr	r3, [r3]
   1117c:	e3530000 	cmp	r3, #0
   11180:	0a00000b 	beq	111b4 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11184:	e51b300c 	ldr	r3, [fp, #-12]
   11188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1118c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   11190:	e51b300c 	ldr	r3, [fp, #-12]
   11194:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11198:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1119c:	e3a01001 	mov	r1, #1
   111a0:	e51b000c 	ldr	r0, [fp, #-12]
   111a4:	ebffff91 	bl	10ff0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   111a8:	e51b300c 	ldr	r3, [fp, #-12]
   111ac:	e50b3008 	str	r3, [fp, #-8]
   111b0:	ea000001 	b	111bc <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   111b4:	e51b000c 	ldr	r0, [fp, #-12]
   111b8:	eb000b90 	bl	14000 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   111bc:	e51b3008 	ldr	r3, [fp, #-8]
}
   111c0:	e1a00003 	mov	r0, r3
   111c4:	e24bd004 	sub	sp, fp, #4
   111c8:	e8bd8800 	pop	{fp, pc}

000111cc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   111cc:	e92d4800 	push	{fp, lr}
   111d0:	e28db004 	add	fp, sp, #4
   111d4:	e24dd020 	sub	sp, sp, #32
   111d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   111dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   111e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   111e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   111e8:	e3a03000 	mov	r3, #0
   111ec:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   111f0:	ebfffcd2 	bl	10540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   111f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   111f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   111fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11200:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11204:	e1520003 	cmp	r2, r3
   11208:	2a000012 	bcs	11258 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11218:	eb00016a 	bl	117c8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1121c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11220:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11224:	e3530000 	cmp	r3, #0
   11228:	0a000007 	beq	1124c <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   1122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11230:	e2833024 	add	r3, r3, #36	; 0x24
   11234:	e1a00003 	mov	r0, r3
   11238:	eb0006ff 	bl	12e3c <xTaskRemoveFromEventList>
   1123c:	e1a03000 	mov	r3, r0
   11240:	e3530001 	cmp	r3, #1
   11244:	1a000000 	bne	1124c <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11248:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   1124c:	ebfffccc 	bl	10584 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11250:	e3a03001 	mov	r3, #1
   11254:	ea000042 	b	11364 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1125c:	e3530000 	cmp	r3, #0
   11260:	1a000002 	bne	11270 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11264:	ebfffcc6 	bl	10584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11268:	e3a03000 	mov	r3, #0
   1126c:	ea00003c 	b	11364 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   11270:	e51b3008 	ldr	r3, [fp, #-8]
   11274:	e3530000 	cmp	r3, #0
   11278:	1a000004 	bne	11290 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1127c:	e24b3010 	sub	r3, fp, #16
   11280:	e1a00003 	mov	r0, r3
   11284:	eb000732 	bl	12f54 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11288:	e3a03001 	mov	r3, #1
   1128c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11290:	ebfffcbb 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11294:	eb000512 	bl	126e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11298:	ebfffca8 	bl	10540 <vPortEnterCritical>
   1129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   112a4:	e3730001 	cmn	r3, #1
   112a8:	1a000002 	bne	112b8 <xQueueGenericSend+0xec>
   112ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112b0:	e3a02000 	mov	r2, #0
   112b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   112b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   112c0:	e3730001 	cmn	r3, #1
   112c4:	1a000002 	bne	112d4 <xQueueGenericSend+0x108>
   112c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112cc:	e3a02000 	mov	r2, #0
   112d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   112d4:	ebfffcaa 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   112d8:	e24b2020 	sub	r2, fp, #32
   112dc:	e24b3010 	sub	r3, fp, #16
   112e0:	e1a01002 	mov	r1, r2
   112e4:	e1a00003 	mov	r0, r3
   112e8:	eb00072b 	bl	12f9c <xTaskCheckForTimeOut>
   112ec:	e1a03000 	mov	r3, r0
   112f0:	e3530000 	cmp	r3, #0
   112f4:	1a000016 	bne	11354 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   112f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   112fc:	eb000202 	bl	11b0c <prvIsQueueFull>
   11300:	e1a03000 	mov	r3, r0
   11304:	e3530000 	cmp	r3, #0
   11308:	0a00000d 	beq	11344 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11310:	e2833010 	add	r3, r3, #16
   11314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   11318:	e1a01002 	mov	r1, r2
   1131c:	e1a00003 	mov	r0, r3
   11320:	eb00069e 	bl	12da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   11324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11328:	eb000195 	bl	11984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1132c:	eb0004f8 	bl	12714 <xTaskResumeAll>
   11330:	e1a03000 	mov	r3, r0
   11334:	e3530000 	cmp	r3, #0
   11338:	1affffac 	bne	111f0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   1133c:	ef000000 	svc	0x00000000
   11340:	eaffffaa 	b	111f0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11348:	eb00018d 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1134c:	eb0004f0 	bl	12714 <xTaskResumeAll>
   11350:	eaffffa6 	b	111f0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   11354:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11358:	eb000189 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1135c:	eb0004ec 	bl	12714 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11360:	e3a03000 	mov	r3, #0
		}
	}
}
   11364:	e1a00003 	mov	r0, r3
   11368:	e24bd004 	sub	sp, fp, #4
   1136c:	e8bd8800 	pop	{fp, pc}

00011370 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11370:	e92d4800 	push	{fp, lr}
   11374:	e28db004 	add	fp, sp, #4
   11378:	e24dd018 	sub	sp, sp, #24
   1137c:	e50b0010 	str	r0, [fp, #-16]
   11380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   11388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1138c:	e3a03000 	mov	r3, #0
   11390:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   11394:	e51b3010 	ldr	r3, [fp, #-16]
   11398:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1139c:	e51b3010 	ldr	r3, [fp, #-16]
   113a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   113a4:	e1520003 	cmp	r2, r3
   113a8:	2a000021 	bcs	11434 <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   113ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   113b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   113b4:	e51b0010 	ldr	r0, [fp, #-16]
   113b8:	eb000102 	bl	117c8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   113bc:	e51b3010 	ldr	r3, [fp, #-16]
   113c0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   113c4:	e3730001 	cmn	r3, #1
   113c8:	1a000011 	bne	11414 <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   113cc:	e51b3010 	ldr	r3, [fp, #-16]
   113d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   113d4:	e3530000 	cmp	r3, #0
   113d8:	0a000012 	beq	11428 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   113dc:	e51b3010 	ldr	r3, [fp, #-16]
   113e0:	e2833024 	add	r3, r3, #36	; 0x24
   113e4:	e1a00003 	mov	r0, r3
   113e8:	eb000693 	bl	12e3c <xTaskRemoveFromEventList>
   113ec:	e1a03000 	mov	r3, r0
   113f0:	e3530000 	cmp	r3, #0
   113f4:	0a00000b 	beq	11428 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   113f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   113fc:	e3530000 	cmp	r3, #0
   11400:	0a000008 	beq	11428 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   11404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11408:	e3a02001 	mov	r2, #1
   1140c:	e5832000 	str	r2, [r3]
   11410:	ea000004 	b	11428 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   11414:	e51b3010 	ldr	r3, [fp, #-16]
   11418:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1141c:	e2832001 	add	r2, r3, #1
   11420:	e51b3010 	ldr	r3, [fp, #-16]
   11424:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   11428:	e3a03001 	mov	r3, #1
   1142c:	e50b3008 	str	r3, [fp, #-8]
   11430:	ea000001 	b	1143c <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   11434:	e3a03000 	mov	r3, #0
   11438:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1143c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11440:	e1a00003 	mov	r0, r3
   11444:	e24bd004 	sub	sp, fp, #4
   11448:	e8bd8800 	pop	{fp, pc}

0001144c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   1144c:	e92d4800 	push	{fp, lr}
   11450:	e28db004 	add	fp, sp, #4
   11454:	e24dd020 	sub	sp, sp, #32
   11458:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1145c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11460:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   11464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   11468:	e3a03000 	mov	r3, #0
   1146c:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   11470:	ebfffc32 	bl	10540 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1147c:	e3530000 	cmp	r3, #0
   11480:	0a00002c 	beq	11538 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   11484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11488:	e593300c 	ldr	r3, [r3, #12]
   1148c:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   11490:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11498:	eb000115 	bl	118f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   1149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   114a0:	e3530000 	cmp	r3, #0
   114a4:	1a000011 	bne	114f0 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   114a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   114b0:	e2432001 	sub	r2, r3, #1
   114b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b8:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   114bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c0:	e5933010 	ldr	r3, [r3, #16]
   114c4:	e3530000 	cmp	r3, #0
   114c8:	0a000017 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   114cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114d0:	e2833010 	add	r3, r3, #16
   114d4:	e1a00003 	mov	r0, r3
   114d8:	eb000657 	bl	12e3c <xTaskRemoveFromEventList>
   114dc:	e1a03000 	mov	r3, r0
   114e0:	e3530001 	cmp	r3, #1
   114e4:	1a000010 	bne	1152c <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   114e8:	ef000000 	svc	0x00000000
   114ec:	ea00000e 	b	1152c <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   114f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114f4:	e51b200c 	ldr	r2, [fp, #-12]
   114f8:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   114fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11504:	e3530000 	cmp	r3, #0
   11508:	0a000007 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11510:	e2833024 	add	r3, r3, #36	; 0x24
   11514:	e1a00003 	mov	r0, r3
   11518:	eb000647 	bl	12e3c <xTaskRemoveFromEventList>
   1151c:	e1a03000 	mov	r3, r0
   11520:	e3530000 	cmp	r3, #0
   11524:	0a000000 	beq	1152c <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   11528:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   1152c:	ebfffc14 	bl	10584 <vPortExitCritical>
				return pdPASS;
   11530:	e3a03001 	mov	r3, #1
   11534:	ea000042 	b	11644 <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1153c:	e3530000 	cmp	r3, #0
   11540:	1a000002 	bne	11550 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11544:	ebfffc0e 	bl	10584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   11548:	e3a03000 	mov	r3, #0
   1154c:	ea00003c 	b	11644 <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   11550:	e51b3008 	ldr	r3, [fp, #-8]
   11554:	e3530000 	cmp	r3, #0
   11558:	1a000004 	bne	11570 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1155c:	e24b3014 	sub	r3, fp, #20
   11560:	e1a00003 	mov	r0, r3
   11564:	eb00067a 	bl	12f54 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11568:	e3a03001 	mov	r3, #1
   1156c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11570:	ebfffc03 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11574:	eb00045a 	bl	126e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11578:	ebfffbf0 	bl	10540 <vPortEnterCritical>
   1157c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11584:	e3730001 	cmn	r3, #1
   11588:	1a000002 	bne	11598 <xQueueGenericReceive+0x14c>
   1158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11590:	e3a02000 	mov	r2, #0
   11594:	e5832044 	str	r2, [r3, #68]	; 0x44
   11598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   115a0:	e3730001 	cmn	r3, #1
   115a4:	1a000002 	bne	115b4 <xQueueGenericReceive+0x168>
   115a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115ac:	e3a02000 	mov	r2, #0
   115b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   115b4:	ebfffbf2 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   115b8:	e24b2020 	sub	r2, fp, #32
   115bc:	e24b3014 	sub	r3, fp, #20
   115c0:	e1a01002 	mov	r1, r2
   115c4:	e1a00003 	mov	r0, r3
   115c8:	eb000673 	bl	12f9c <xTaskCheckForTimeOut>
   115cc:	e1a03000 	mov	r3, r0
   115d0:	e3530000 	cmp	r3, #0
   115d4:	1a000016 	bne	11634 <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   115d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   115dc:	eb000129 	bl	11a88 <prvIsQueueEmpty>
   115e0:	e1a03000 	mov	r3, r0
   115e4:	e3530000 	cmp	r3, #0
   115e8:	0a00000d 	beq	11624 <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   115ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115f0:	e2833024 	add	r3, r3, #36	; 0x24
   115f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   115f8:	e1a01002 	mov	r1, r2
   115fc:	e1a00003 	mov	r0, r3
   11600:	eb0005e6 	bl	12da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   11604:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11608:	eb0000dd 	bl	11984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1160c:	eb000440 	bl	12714 <xTaskResumeAll>
   11610:	e1a03000 	mov	r3, r0
   11614:	e3530000 	cmp	r3, #0
   11618:	1affff94 	bne	11470 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   1161c:	ef000000 	svc	0x00000000
   11620:	eaffff92 	b	11470 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11624:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11628:	eb0000d5 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1162c:	eb000438 	bl	12714 <xTaskResumeAll>
   11630:	eaffff8e 	b	11470 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   11634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11638:	eb0000d1 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1163c:	eb000434 	bl	12714 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11640:	e3a03000 	mov	r3, #0
		}
	}
}
   11644:	e1a00003 	mov	r0, r3
   11648:	e24bd004 	sub	sp, fp, #4
   1164c:	e8bd8800 	pop	{fp, pc}

00011650 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11650:	e92d4800 	push	{fp, lr}
   11654:	e28db004 	add	fp, sp, #4
   11658:	e24dd018 	sub	sp, sp, #24
   1165c:	e50b0010 	str	r0, [fp, #-16]
   11660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11668:	e3a03000 	mov	r3, #0
   1166c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11678:	e3530000 	cmp	r3, #0
   1167c:	0a000025 	beq	11718 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   11684:	e51b0010 	ldr	r0, [fp, #-16]
   11688:	eb000099 	bl	118f4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   1168c:	e51b3010 	ldr	r3, [fp, #-16]
   11690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11694:	e2432001 	sub	r2, r3, #1
   11698:	e51b3010 	ldr	r3, [fp, #-16]
   1169c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   116a0:	e51b3010 	ldr	r3, [fp, #-16]
   116a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116a8:	e3730001 	cmn	r3, #1
   116ac:	1a000011 	bne	116f8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   116b0:	e51b3010 	ldr	r3, [fp, #-16]
   116b4:	e5933010 	ldr	r3, [r3, #16]
   116b8:	e3530000 	cmp	r3, #0
   116bc:	0a000012 	beq	1170c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   116c0:	e51b3010 	ldr	r3, [fp, #-16]
   116c4:	e2833010 	add	r3, r3, #16
   116c8:	e1a00003 	mov	r0, r3
   116cc:	eb0005da 	bl	12e3c <xTaskRemoveFromEventList>
   116d0:	e1a03000 	mov	r3, r0
   116d4:	e3530000 	cmp	r3, #0
   116d8:	0a00000b 	beq	1170c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   116dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116e0:	e3530000 	cmp	r3, #0
   116e4:	0a000008 	beq	1170c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   116e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116ec:	e3a02001 	mov	r2, #1
   116f0:	e5832000 	str	r2, [r3]
   116f4:	ea000004 	b	1170c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   116f8:	e51b3010 	ldr	r3, [fp, #-16]
   116fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11700:	e2832001 	add	r2, r3, #1
   11704:	e51b3010 	ldr	r3, [fp, #-16]
   11708:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   1170c:	e3a03001 	mov	r3, #1
   11710:	e50b3008 	str	r3, [fp, #-8]
   11714:	ea000001 	b	11720 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   11718:	e3a03000 	mov	r3, #0
   1171c:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11720:	e51b3008 	ldr	r3, [fp, #-8]
}
   11724:	e1a00003 	mov	r0, r3
   11728:	e24bd004 	sub	sp, fp, #4
   1172c:	e8bd8800 	pop	{fp, pc}

00011730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11730:	e92d4800 	push	{fp, lr}
   11734:	e28db004 	add	fp, sp, #4
   11738:	e24dd010 	sub	sp, sp, #16
   1173c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11740:	ebfffb7e 	bl	10540 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   11744:	e51b3010 	ldr	r3, [fp, #-16]
   11748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1174c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11750:	ebfffb8b 	bl	10584 <vPortExitCritical>

	return uxReturn;
   11754:	e51b3008 	ldr	r3, [fp, #-8]
}
   11758:	e1a00003 	mov	r0, r3
   1175c:	e24bd004 	sub	sp, fp, #4
   11760:	e8bd8800 	pop	{fp, pc}

00011764 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11768:	e28db000 	add	fp, sp, #0
   1176c:	e24dd014 	sub	sp, sp, #20
   11770:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11774:	e51b3010 	ldr	r3, [fp, #-16]
   11778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1177c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   11780:	e51b3008 	ldr	r3, [fp, #-8]
}
   11784:	e1a00003 	mov	r0, r3
   11788:	e28bd000 	add	sp, fp, #0
   1178c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11790:	e12fff1e 	bx	lr

00011794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11794:	e92d4800 	push	{fp, lr}
   11798:	e28db004 	add	fp, sp, #4
   1179c:	e24dd008 	sub	sp, sp, #8
   117a0:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   117a4:	e51b3008 	ldr	r3, [fp, #-8]
   117a8:	e5933000 	ldr	r3, [r3]
   117ac:	e1a00003 	mov	r0, r3
   117b0:	eb000a12 	bl	14000 <vPortFree>
	vPortFree( pxQueue );
   117b4:	e51b0008 	ldr	r0, [fp, #-8]
   117b8:	eb000a10 	bl	14000 <vPortFree>
}
   117bc:	e320f000 	nop	{0}
   117c0:	e24bd004 	sub	sp, fp, #4
   117c4:	e8bd8800 	pop	{fp, pc}

000117c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   117c8:	e92d4800 	push	{fp, lr}
   117cc:	e28db004 	add	fp, sp, #4
   117d0:	e24dd010 	sub	sp, sp, #16
   117d4:	e50b0008 	str	r0, [fp, #-8]
   117d8:	e50b100c 	str	r1, [fp, #-12]
   117dc:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   117e0:	e51b3008 	ldr	r3, [fp, #-8]
   117e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117e8:	e3530000 	cmp	r3, #0
   117ec:	0a000038 	beq	118d4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   117f0:	e51b3010 	ldr	r3, [fp, #-16]
   117f4:	e3530000 	cmp	r3, #0
   117f8:	1a000018 	bne	11860 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   117fc:	e51b3008 	ldr	r3, [fp, #-8]
   11800:	e5930008 	ldr	r0, [r3, #8]
   11804:	e51b3008 	ldr	r3, [fp, #-8]
   11808:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1180c:	e1a02003 	mov	r2, r3
   11810:	e51b100c 	ldr	r1, [fp, #-12]
   11814:	eb000b0f 	bl	14458 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11818:	e51b3008 	ldr	r3, [fp, #-8]
   1181c:	e5932008 	ldr	r2, [r3, #8]
   11820:	e51b3008 	ldr	r3, [fp, #-8]
   11824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11828:	e0822003 	add	r2, r2, r3
   1182c:	e51b3008 	ldr	r3, [fp, #-8]
   11830:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11834:	e51b3008 	ldr	r3, [fp, #-8]
   11838:	e5932008 	ldr	r2, [r3, #8]
   1183c:	e51b3008 	ldr	r3, [fp, #-8]
   11840:	e5933004 	ldr	r3, [r3, #4]
   11844:	e1520003 	cmp	r2, r3
   11848:	3a000021 	bcc	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1184c:	e51b3008 	ldr	r3, [fp, #-8]
   11850:	e5932000 	ldr	r2, [r3]
   11854:	e51b3008 	ldr	r3, [fp, #-8]
   11858:	e5832008 	str	r2, [r3, #8]
   1185c:	ea00001c 	b	118d4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11860:	e51b3008 	ldr	r3, [fp, #-8]
   11864:	e593000c 	ldr	r0, [r3, #12]
   11868:	e51b3008 	ldr	r3, [fp, #-8]
   1186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11870:	e1a02003 	mov	r2, r3
   11874:	e51b100c 	ldr	r1, [fp, #-12]
   11878:	eb000af6 	bl	14458 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   1187c:	e51b3008 	ldr	r3, [fp, #-8]
   11880:	e593200c 	ldr	r2, [r3, #12]
   11884:	e51b3008 	ldr	r3, [fp, #-8]
   11888:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1188c:	e2633000 	rsb	r3, r3, #0
   11890:	e0822003 	add	r2, r2, r3
   11894:	e51b3008 	ldr	r3, [fp, #-8]
   11898:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   1189c:	e51b3008 	ldr	r3, [fp, #-8]
   118a0:	e593200c 	ldr	r2, [r3, #12]
   118a4:	e51b3008 	ldr	r3, [fp, #-8]
   118a8:	e5933000 	ldr	r3, [r3]
   118ac:	e1520003 	cmp	r2, r3
   118b0:	2a000007 	bcs	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   118b4:	e51b3008 	ldr	r3, [fp, #-8]
   118b8:	e5932004 	ldr	r2, [r3, #4]
   118bc:	e51b3008 	ldr	r3, [fp, #-8]
   118c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   118c4:	e2633000 	rsb	r3, r3, #0
   118c8:	e0822003 	add	r2, r2, r3
   118cc:	e51b3008 	ldr	r3, [fp, #-8]
   118d0:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   118d4:	e51b3008 	ldr	r3, [fp, #-8]
   118d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118dc:	e2832001 	add	r2, r3, #1
   118e0:	e51b3008 	ldr	r3, [fp, #-8]
   118e4:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   118e8:	e320f000 	nop	{0}
   118ec:	e24bd004 	sub	sp, fp, #4
   118f0:	e8bd8800 	pop	{fp, pc}

000118f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   118f4:	e92d4800 	push	{fp, lr}
   118f8:	e28db004 	add	fp, sp, #4
   118fc:	e24dd008 	sub	sp, sp, #8
   11900:	e50b0008 	str	r0, [fp, #-8]
   11904:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   11908:	e51b3008 	ldr	r3, [fp, #-8]
   1190c:	e5933000 	ldr	r3, [r3]
   11910:	e3530000 	cmp	r3, #0
   11914:	0a000017 	beq	11978 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   11918:	e51b3008 	ldr	r3, [fp, #-8]
   1191c:	e593200c 	ldr	r2, [r3, #12]
   11920:	e51b3008 	ldr	r3, [fp, #-8]
   11924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11928:	e0822003 	add	r2, r2, r3
   1192c:	e51b3008 	ldr	r3, [fp, #-8]
   11930:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11934:	e51b3008 	ldr	r3, [fp, #-8]
   11938:	e593200c 	ldr	r2, [r3, #12]
   1193c:	e51b3008 	ldr	r3, [fp, #-8]
   11940:	e5933004 	ldr	r3, [r3, #4]
   11944:	e1520003 	cmp	r2, r3
   11948:	3a000003 	bcc	1195c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   1194c:	e51b3008 	ldr	r3, [fp, #-8]
   11950:	e5932000 	ldr	r2, [r3]
   11954:	e51b3008 	ldr	r3, [fp, #-8]
   11958:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   1195c:	e51b3008 	ldr	r3, [fp, #-8]
   11960:	e593100c 	ldr	r1, [r3, #12]
   11964:	e51b3008 	ldr	r3, [fp, #-8]
   11968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1196c:	e1a02003 	mov	r2, r3
   11970:	e51b000c 	ldr	r0, [fp, #-12]
   11974:	eb000ab7 	bl	14458 <memcpy>
	}
}
   11978:	e320f000 	nop	{0}
   1197c:	e24bd004 	sub	sp, fp, #4
   11980:	e8bd8800 	pop	{fp, pc}

00011984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11984:	e92d4800 	push	{fp, lr}
   11988:	e28db004 	add	fp, sp, #4
   1198c:	e24dd008 	sub	sp, sp, #8
   11990:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11994:	ebfffae9 	bl	10540 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11998:	ea000010 	b	119e0 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1199c:	e51b3008 	ldr	r3, [fp, #-8]
   119a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   119a4:	e3530000 	cmp	r3, #0
   119a8:	0a000011 	beq	119f4 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   119ac:	e51b3008 	ldr	r3, [fp, #-8]
   119b0:	e2833024 	add	r3, r3, #36	; 0x24
   119b4:	e1a00003 	mov	r0, r3
   119b8:	eb00051f 	bl	12e3c <xTaskRemoveFromEventList>
   119bc:	e1a03000 	mov	r3, r0
   119c0:	e3530000 	cmp	r3, #0
   119c4:	0a000000 	beq	119cc <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   119c8:	eb0005b0 	bl	13090 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   119cc:	e51b3008 	ldr	r3, [fp, #-8]
   119d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119d4:	e2432001 	sub	r2, r3, #1
   119d8:	e51b3008 	ldr	r3, [fp, #-8]
   119dc:	e5832048 	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   119e0:	e51b3008 	ldr	r3, [fp, #-8]
   119e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119e8:	e3530000 	cmp	r3, #0
   119ec:	caffffea 	bgt	1199c <prvUnlockQueue+0x18>
   119f0:	ea000000 	b	119f8 <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   119f4:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   119f8:	e51b3008 	ldr	r3, [fp, #-8]
   119fc:	e3e02000 	mvn	r2, #0
   11a00:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   11a04:	ebfffade 	bl	10584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11a08:	ebfffacc 	bl	10540 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a0c:	ea000010 	b	11a54 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11a10:	e51b3008 	ldr	r3, [fp, #-8]
   11a14:	e5933010 	ldr	r3, [r3, #16]
   11a18:	e3530000 	cmp	r3, #0
   11a1c:	0a000011 	beq	11a68 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11a20:	e51b3008 	ldr	r3, [fp, #-8]
   11a24:	e2833010 	add	r3, r3, #16
   11a28:	e1a00003 	mov	r0, r3
   11a2c:	eb000502 	bl	12e3c <xTaskRemoveFromEventList>
   11a30:	e1a03000 	mov	r3, r0
   11a34:	e3530000 	cmp	r3, #0
   11a38:	0a000000 	beq	11a40 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   11a3c:	eb000593 	bl	13090 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   11a40:	e51b3008 	ldr	r3, [fp, #-8]
   11a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a48:	e2432001 	sub	r2, r3, #1
   11a4c:	e51b3008 	ldr	r3, [fp, #-8]
   11a50:	e5832044 	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a54:	e51b3008 	ldr	r3, [fp, #-8]
   11a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a5c:	e3530000 	cmp	r3, #0
   11a60:	caffffea 	bgt	11a10 <prvUnlockQueue+0x8c>
   11a64:	ea000000 	b	11a6c <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   11a68:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   11a6c:	e51b3008 	ldr	r3, [fp, #-8]
   11a70:	e3e02000 	mvn	r2, #0
   11a74:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   11a78:	ebfffac1 	bl	10584 <vPortExitCritical>
}
   11a7c:	e320f000 	nop	{0}
   11a80:	e24bd004 	sub	sp, fp, #4
   11a84:	e8bd8800 	pop	{fp, pc}

00011a88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   11a88:	e92d4800 	push	{fp, lr}
   11a8c:	e28db004 	add	fp, sp, #4
   11a90:	e24dd010 	sub	sp, sp, #16
   11a94:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11a98:	ebfffaa8 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11a9c:	e51b3010 	ldr	r3, [fp, #-16]
   11aa0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11aa4:	e3530000 	cmp	r3, #0
   11aa8:	03a03001 	moveq	r3, #1
   11aac:	13a03000 	movne	r3, #0
   11ab0:	e6ef3073 	uxtb	r3, r3
   11ab4:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11ab8:	ebfffab1 	bl	10584 <vPortExitCritical>

	return xReturn;
   11abc:	e51b3008 	ldr	r3, [fp, #-8]
}
   11ac0:	e1a00003 	mov	r0, r3
   11ac4:	e24bd004 	sub	sp, fp, #4
   11ac8:	e8bd8800 	pop	{fp, pc}

00011acc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   11acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11ad0:	e28db000 	add	fp, sp, #0
   11ad4:	e24dd014 	sub	sp, sp, #20
   11ad8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11adc:	e51b3010 	ldr	r3, [fp, #-16]
   11ae0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11ae4:	e3530000 	cmp	r3, #0
   11ae8:	03a03001 	moveq	r3, #1
   11aec:	13a03000 	movne	r3, #0
   11af0:	e6ef3073 	uxtb	r3, r3
   11af4:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11af8:	e51b3008 	ldr	r3, [fp, #-8]
}
   11afc:	e1a00003 	mov	r0, r3
   11b00:	e28bd000 	add	sp, fp, #0
   11b04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b08:	e12fff1e 	bx	lr

00011b0c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   11b0c:	e92d4800 	push	{fp, lr}
   11b10:	e28db004 	add	fp, sp, #4
   11b14:	e24dd010 	sub	sp, sp, #16
   11b18:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11b1c:	ebfffa87 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b20:	e51b3010 	ldr	r3, [fp, #-16]
   11b24:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b28:	e51b3010 	ldr	r3, [fp, #-16]
   11b2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b30:	e1520003 	cmp	r2, r3
   11b34:	03a03001 	moveq	r3, #1
   11b38:	13a03000 	movne	r3, #0
   11b3c:	e6ef3073 	uxtb	r3, r3
   11b40:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11b44:	ebfffa8e 	bl	10584 <vPortExitCritical>

	return xReturn;
   11b48:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b4c:	e1a00003 	mov	r0, r3
   11b50:	e24bd004 	sub	sp, fp, #4
   11b54:	e8bd8800 	pop	{fp, pc}

00011b58 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   11b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11b5c:	e28db000 	add	fp, sp, #0
   11b60:	e24dd014 	sub	sp, sp, #20
   11b64:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b68:	e51b3010 	ldr	r3, [fp, #-16]
   11b6c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b70:	e51b3010 	ldr	r3, [fp, #-16]
   11b74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b78:	e1520003 	cmp	r2, r3
   11b7c:	03a03001 	moveq	r3, #1
   11b80:	13a03000 	movne	r3, #0
   11b84:	e6ef3073 	uxtb	r3, r3
   11b88:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11b8c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b90:	e1a00003 	mov	r0, r3
   11b94:	e28bd000 	add	sp, fp, #0
   11b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b9c:	e12fff1e 	bx	lr

00011ba0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   11ba0:	e92d4800 	push	{fp, lr}
   11ba4:	e28db004 	add	fp, sp, #4
   11ba8:	e24dd028 	sub	sp, sp, #40	; 0x28
   11bac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11bb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   11bb8:	e14b21be 	strh	r2, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   11bbc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bc0:	e59b100c 	ldr	r1, [fp, #12]
   11bc4:	e1a00003 	mov	r0, r3
   11bc8:	eb000603 	bl	133dc <prvAllocateTCBAndStack>
   11bcc:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   11bd0:	e51b300c 	ldr	r3, [fp, #-12]
   11bd4:	e3530000 	cmp	r3, #0
   11bd8:	0a000067 	beq	11d7c <xTaskGenericCreate+0x1dc>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   11bdc:	e51b300c 	ldr	r3, [fp, #-12]
   11be0:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   11be4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11be8:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   11bec:	e1a03103 	lsl	r3, r3, #2
   11bf0:	e0823003 	add	r3, r2, r3
   11bf4:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   11bf8:	e51b3010 	ldr	r3, [fp, #-16]
   11bfc:	e3c33007 	bic	r3, r3, #7
   11c00:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   11c04:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11c08:	e58d3000 	str	r3, [sp]
   11c0c:	e59b3010 	ldr	r3, [fp, #16]
   11c10:	e59b2004 	ldr	r2, [fp, #4]
   11c14:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11c18:	e51b000c 	ldr	r0, [fp, #-12]
   11c1c:	eb000531 	bl	130e8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   11c20:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11c24:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   11c28:	e51b0010 	ldr	r0, [fp, #-16]
   11c2c:	ebfff8f3 	bl	10000 <pxPortInitialiseStack>
   11c30:	e1a02000 	mov	r2, r0
   11c34:	e51b300c 	ldr	r3, [fp, #-12]
   11c38:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   11c3c:	e59b3008 	ldr	r3, [fp, #8]
   11c40:	e3530000 	cmp	r3, #0
   11c44:	0a000002 	beq	11c54 <xTaskGenericCreate+0xb4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   11c48:	e59b3008 	ldr	r3, [fp, #8]
   11c4c:	e51b200c 	ldr	r2, [fp, #-12]
   11c50:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   11c54:	ebfffa39 	bl	10540 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   11c58:	e59f316c 	ldr	r3, [pc, #364]	; 11dcc <xTaskGenericCreate+0x22c>
   11c5c:	e5933000 	ldr	r3, [r3]
   11c60:	e2833001 	add	r3, r3, #1
   11c64:	e59f2160 	ldr	r2, [pc, #352]	; 11dcc <xTaskGenericCreate+0x22c>
   11c68:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   11c6c:	e59f315c 	ldr	r3, [pc, #348]	; 11dd0 <xTaskGenericCreate+0x230>
   11c70:	e5933000 	ldr	r3, [r3]
   11c74:	e3530000 	cmp	r3, #0
   11c78:	1a000008 	bne	11ca0 <xTaskGenericCreate+0x100>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   11c7c:	e59f214c 	ldr	r2, [pc, #332]	; 11dd0 <xTaskGenericCreate+0x230>
   11c80:	e51b300c 	ldr	r3, [fp, #-12]
   11c84:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   11c88:	e59f313c 	ldr	r3, [pc, #316]	; 11dcc <xTaskGenericCreate+0x22c>
   11c8c:	e5933000 	ldr	r3, [r3]
   11c90:	e3530001 	cmp	r3, #1
   11c94:	1a00000e 	bne	11cd4 <xTaskGenericCreate+0x134>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   11c98:	eb000542 	bl	131a8 <prvInitialiseTaskLists>
   11c9c:	ea00000c 	b	11cd4 <xTaskGenericCreate+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   11ca0:	e59f312c 	ldr	r3, [pc, #300]	; 11dd4 <xTaskGenericCreate+0x234>
   11ca4:	e5933000 	ldr	r3, [r3]
   11ca8:	e3530000 	cmp	r3, #0
   11cac:	1a000008 	bne	11cd4 <xTaskGenericCreate+0x134>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   11cb0:	e59f3118 	ldr	r3, [pc, #280]	; 11dd0 <xTaskGenericCreate+0x230>
   11cb4:	e5933000 	ldr	r3, [r3]
   11cb8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cbc:	e59b3004 	ldr	r3, [fp, #4]
   11cc0:	e1520003 	cmp	r2, r3
   11cc4:	8a000002 	bhi	11cd4 <xTaskGenericCreate+0x134>
					{
						pxCurrentTCB = pxNewTCB;
   11cc8:	e59f2100 	ldr	r2, [pc, #256]	; 11dd0 <xTaskGenericCreate+0x230>
   11ccc:	e51b300c 	ldr	r3, [fp, #-12]
   11cd0:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   11cd4:	e51b300c 	ldr	r3, [fp, #-12]
   11cd8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cdc:	e59f30f4 	ldr	r3, [pc, #244]	; 11dd8 <xTaskGenericCreate+0x238>
   11ce0:	e5933000 	ldr	r3, [r3]
   11ce4:	e1520003 	cmp	r2, r3
   11ce8:	9a000003 	bls	11cfc <xTaskGenericCreate+0x15c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   11cec:	e51b300c 	ldr	r3, [fp, #-12]
   11cf0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11cf4:	e59f20dc 	ldr	r2, [pc, #220]	; 11dd8 <xTaskGenericCreate+0x238>
   11cf8:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   11cfc:	e59f30d8 	ldr	r3, [pc, #216]	; 11ddc <xTaskGenericCreate+0x23c>
   11d00:	e5933000 	ldr	r3, [r3]
   11d04:	e2833001 	add	r3, r3, #1
   11d08:	e59f20cc 	ldr	r2, [pc, #204]	; 11ddc <xTaskGenericCreate+0x23c>
   11d0c:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   11d10:	e51b300c 	ldr	r3, [fp, #-12]
   11d14:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d18:	e59f30c0 	ldr	r3, [pc, #192]	; 11de0 <xTaskGenericCreate+0x240>
   11d1c:	e5933000 	ldr	r3, [r3]
   11d20:	e1520003 	cmp	r2, r3
   11d24:	9a000003 	bls	11d38 <xTaskGenericCreate+0x198>
   11d28:	e51b300c 	ldr	r3, [fp, #-12]
   11d2c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11d30:	e59f20a8 	ldr	r2, [pc, #168]	; 11de0 <xTaskGenericCreate+0x240>
   11d34:	e5823000 	str	r3, [r2]
   11d38:	e51b300c 	ldr	r3, [fp, #-12]
   11d3c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d40:	e1a03002 	mov	r3, r2
   11d44:	e1a03103 	lsl	r3, r3, #2
   11d48:	e0833002 	add	r3, r3, r2
   11d4c:	e1a03103 	lsl	r3, r3, #2
   11d50:	e59f208c 	ldr	r2, [pc, #140]	; 11de4 <xTaskGenericCreate+0x244>
   11d54:	e0832002 	add	r2, r3, r2
   11d58:	e51b300c 	ldr	r3, [fp, #-12]
   11d5c:	e2833004 	add	r3, r3, #4
   11d60:	e1a01003 	mov	r1, r3
   11d64:	e1a00002 	mov	r0, r2
   11d68:	ebfffc1e 	bl	10de8 <vListInsertEnd>

			xReturn = pdPASS;
   11d6c:	e3a03001 	mov	r3, #1
   11d70:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   11d74:	ebfffa02 	bl	10584 <vPortExitCritical>
   11d78:	ea000001 	b	11d84 <xTaskGenericCreate+0x1e4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   11d7c:	e3e03000 	mvn	r3, #0
   11d80:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   11d84:	e51b3008 	ldr	r3, [fp, #-8]
   11d88:	e3530001 	cmp	r3, #1
   11d8c:	1a00000a 	bne	11dbc <xTaskGenericCreate+0x21c>
	{
		if( xSchedulerRunning != pdFALSE )
   11d90:	e59f303c 	ldr	r3, [pc, #60]	; 11dd4 <xTaskGenericCreate+0x234>
   11d94:	e5933000 	ldr	r3, [r3]
   11d98:	e3530000 	cmp	r3, #0
   11d9c:	0a000006 	beq	11dbc <xTaskGenericCreate+0x21c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   11da0:	e59f3028 	ldr	r3, [pc, #40]	; 11dd0 <xTaskGenericCreate+0x230>
   11da4:	e5933000 	ldr	r3, [r3]
   11da8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11dac:	e59b3004 	ldr	r3, [fp, #4]
   11db0:	e1520003 	cmp	r2, r3
   11db4:	2a000000 	bcs	11dbc <xTaskGenericCreate+0x21c>
			{
				portYIELD_WITHIN_API();
   11db8:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   11dbc:	e51b3008 	ldr	r3, [fp, #-8]
}
   11dc0:	e1a00003 	mov	r0, r3
   11dc4:	e24bd004 	sub	sp, fp, #4
   11dc8:	e8bd8800 	pop	{fp, pc}
   11dcc:	000148cc 	andeq	r4, r1, ip, asr #17
   11dd0:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11dd4:	000148dc 	ldrdeq	r4, [r1], -ip
   11dd8:	000148d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11ddc:	000148f0 	strdeq	r4, [r1], -r0
   11de0:	000148d8 	ldrdeq	r4, [r1], -r8
   11de4:	000147f8 	strdeq	r4, [r1], -r8

00011de8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   11de8:	e92d4800 	push	{fp, lr}
   11dec:	e28db004 	add	fp, sp, #4
   11df0:	e24dd010 	sub	sp, sp, #16
   11df4:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   11df8:	ebfff9d0 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   11dfc:	e59f30d0 	ldr	r3, [pc, #208]	; 11ed4 <vTaskDelete+0xec>
   11e00:	e5933000 	ldr	r3, [r3]
   11e04:	e51b2010 	ldr	r2, [fp, #-16]
   11e08:	e1520003 	cmp	r2, r3
   11e0c:	1a000001 	bne	11e18 <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   11e10:	e3a03000 	mov	r3, #0
   11e14:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   11e18:	e51b3010 	ldr	r3, [fp, #-16]
   11e1c:	e3530000 	cmp	r3, #0
   11e20:	1a000002 	bne	11e30 <vTaskDelete+0x48>
   11e24:	e59f30a8 	ldr	r3, [pc, #168]	; 11ed4 <vTaskDelete+0xec>
   11e28:	e5933000 	ldr	r3, [r3]
   11e2c:	ea000000 	b	11e34 <vTaskDelete+0x4c>
   11e30:	e51b3010 	ldr	r3, [fp, #-16]
   11e34:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   11e38:	e51b3008 	ldr	r3, [fp, #-8]
   11e3c:	e2833004 	add	r3, r3, #4
   11e40:	e1a00003 	mov	r0, r3
   11e44:	ebfffc43 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   11e48:	e51b3008 	ldr	r3, [fp, #-8]
   11e4c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   11e50:	e3530000 	cmp	r3, #0
   11e54:	0a000003 	beq	11e68 <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   11e58:	e51b3008 	ldr	r3, [fp, #-8]
   11e5c:	e2833018 	add	r3, r3, #24
   11e60:	e1a00003 	mov	r0, r3
   11e64:	ebfffc3b 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   11e68:	e51b3008 	ldr	r3, [fp, #-8]
   11e6c:	e2833004 	add	r3, r3, #4
   11e70:	e1a01003 	mov	r1, r3
   11e74:	e59f005c 	ldr	r0, [pc, #92]	; 11ed8 <vTaskDelete+0xf0>
   11e78:	ebfffbda 	bl	10de8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   11e7c:	e59f3058 	ldr	r3, [pc, #88]	; 11edc <vTaskDelete+0xf4>
   11e80:	e5933000 	ldr	r3, [r3]
   11e84:	e2833001 	add	r3, r3, #1
   11e88:	e59f204c 	ldr	r2, [pc, #76]	; 11edc <vTaskDelete+0xf4>
   11e8c:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   11e90:	e59f3048 	ldr	r3, [pc, #72]	; 11ee0 <vTaskDelete+0xf8>
   11e94:	e5933000 	ldr	r3, [r3]
   11e98:	e2833001 	add	r3, r3, #1
   11e9c:	e59f203c 	ldr	r2, [pc, #60]	; 11ee0 <vTaskDelete+0xf8>
   11ea0:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   11ea4:	ebfff9b6 	bl	10584 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   11ea8:	e59f3034 	ldr	r3, [pc, #52]	; 11ee4 <vTaskDelete+0xfc>
   11eac:	e5933000 	ldr	r3, [r3]
   11eb0:	e3530000 	cmp	r3, #0
   11eb4:	0a000003 	beq	11ec8 <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   11eb8:	e51b3010 	ldr	r3, [fp, #-16]
   11ebc:	e3530000 	cmp	r3, #0
   11ec0:	1a000000 	bne	11ec8 <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   11ec4:	ef000000 	svc	0x00000000
			}
		}
	}
   11ec8:	e320f000 	nop	{0}
   11ecc:	e24bd004 	sub	sp, fp, #4
   11ed0:	e8bd8800 	pop	{fp, pc}
   11ed4:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11ed8:	000148a0 	andeq	r4, r1, r0, lsr #17
   11edc:	000148b4 			; <UNDEFINED> instruction: 0x000148b4
   11ee0:	000148f0 	strdeq	r4, [r1], -r0
   11ee4:	000148dc 	ldrdeq	r4, [r1], -ip

00011ee8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   11ee8:	e92d4800 	push	{fp, lr}
   11eec:	e28db004 	add	fp, sp, #4
   11ef0:	e24dd018 	sub	sp, sp, #24
   11ef4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11ef8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   11efc:	e3a03000 	mov	r3, #0
   11f00:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   11f04:	eb0001f6 	bl	126e4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   11f08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f0c:	e5932000 	ldr	r2, [r3]
   11f10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f14:	e0823003 	add	r3, r2, r3
   11f18:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   11f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f20:	e5932000 	ldr	r2, [r3]
   11f24:	e59f30c4 	ldr	r3, [pc, #196]	; 11ff0 <vTaskDelayUntil+0x108>
   11f28:	e5933000 	ldr	r3, [r3]
   11f2c:	e1520003 	cmp	r2, r3
   11f30:	9a00000c 	bls	11f68 <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   11f34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f38:	e5932000 	ldr	r2, [r3]
   11f3c:	e51b300c 	ldr	r3, [fp, #-12]
   11f40:	e1520003 	cmp	r2, r3
   11f44:	9a000013 	bls	11f98 <vTaskDelayUntil+0xb0>
   11f48:	e59f30a0 	ldr	r3, [pc, #160]	; 11ff0 <vTaskDelayUntil+0x108>
   11f4c:	e5933000 	ldr	r3, [r3]
   11f50:	e51b200c 	ldr	r2, [fp, #-12]
   11f54:	e1520003 	cmp	r2, r3
   11f58:	9a00000e 	bls	11f98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f5c:	e3a03001 	mov	r3, #1
   11f60:	e50b3008 	str	r3, [fp, #-8]
   11f64:	ea00000b 	b	11f98 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   11f68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f6c:	e5932000 	ldr	r2, [r3]
   11f70:	e51b300c 	ldr	r3, [fp, #-12]
   11f74:	e1520003 	cmp	r2, r3
   11f78:	8a000004 	bhi	11f90 <vTaskDelayUntil+0xa8>
   11f7c:	e59f306c 	ldr	r3, [pc, #108]	; 11ff0 <vTaskDelayUntil+0x108>
   11f80:	e5933000 	ldr	r3, [r3]
   11f84:	e51b200c 	ldr	r2, [fp, #-12]
   11f88:	e1520003 	cmp	r2, r3
   11f8c:	9a000001 	bls	11f98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f90:	e3a03001 	mov	r3, #1
   11f94:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   11f98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f9c:	e51b200c 	ldr	r2, [fp, #-12]
   11fa0:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   11fa4:	e51b3008 	ldr	r3, [fp, #-8]
   11fa8:	e3530000 	cmp	r3, #0
   11fac:	0a000006 	beq	11fcc <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   11fb0:	e59f303c 	ldr	r3, [pc, #60]	; 11ff4 <vTaskDelayUntil+0x10c>
   11fb4:	e5933000 	ldr	r3, [r3]
   11fb8:	e2833004 	add	r3, r3, #4
   11fbc:	e1a00003 	mov	r0, r3
   11fc0:	ebfffbe4 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   11fc4:	e51b000c 	ldr	r0, [fp, #-12]
   11fc8:	eb0004d5 	bl	13324 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   11fcc:	eb0001d0 	bl	12714 <xTaskResumeAll>
   11fd0:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   11fd4:	e51b3010 	ldr	r3, [fp, #-16]
   11fd8:	e3530000 	cmp	r3, #0
   11fdc:	1a000000 	bne	11fe4 <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   11fe0:	ef000000 	svc	0x00000000
		}
	}
   11fe4:	e320f000 	nop	{0}
   11fe8:	e24bd004 	sub	sp, fp, #4
   11fec:	e8bd8800 	pop	{fp, pc}
   11ff0:	000148d0 	ldrdeq	r4, [r1], -r0
   11ff4:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00011ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   11ff8:	e92d4800 	push	{fp, lr}
   11ffc:	e28db004 	add	fp, sp, #4
   12000:	e24dd010 	sub	sp, sp, #16
   12004:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   12008:	e3a03000 	mov	r3, #0
   1200c:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   12010:	e51b3010 	ldr	r3, [fp, #-16]
   12014:	e3530000 	cmp	r3, #0
   12018:	0a00000e 	beq	12058 <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   1201c:	eb0001b0 	bl	126e4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   12020:	e59f304c 	ldr	r3, [pc, #76]	; 12074 <vTaskDelay+0x7c>
   12024:	e5932000 	ldr	r2, [r3]
   12028:	e51b3010 	ldr	r3, [fp, #-16]
   1202c:	e0823003 	add	r3, r2, r3
   12030:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12034:	e59f303c 	ldr	r3, [pc, #60]	; 12078 <vTaskDelay+0x80>
   12038:	e5933000 	ldr	r3, [r3]
   1203c:	e2833004 	add	r3, r3, #4
   12040:	e1a00003 	mov	r0, r3
   12044:	ebfffbc3 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   12048:	e51b000c 	ldr	r0, [fp, #-12]
   1204c:	eb0004b4 	bl	13324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   12050:	eb0001af 	bl	12714 <xTaskResumeAll>
   12054:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   12058:	e51b3008 	ldr	r3, [fp, #-8]
   1205c:	e3530000 	cmp	r3, #0
   12060:	1a000000 	bne	12068 <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   12064:	ef000000 	svc	0x00000000
		}
	}
   12068:	e320f000 	nop	{0}
   1206c:	e24bd004 	sub	sp, fp, #4
   12070:	e8bd8800 	pop	{fp, pc}
   12074:	000148d0 	ldrdeq	r4, [r1], -r0
   12078:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

0001207c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   1207c:	e92d4800 	push	{fp, lr}
   12080:	e28db004 	add	fp, sp, #4
   12084:	e24dd010 	sub	sp, sp, #16
   12088:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   1208c:	ebfff92b 	bl	10540 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12090:	e51b3010 	ldr	r3, [fp, #-16]
   12094:	e3530000 	cmp	r3, #0
   12098:	1a000002 	bne	120a8 <uxTaskPriorityGet+0x2c>
   1209c:	e59f302c 	ldr	r3, [pc, #44]	; 120d0 <uxTaskPriorityGet+0x54>
   120a0:	e5933000 	ldr	r3, [r3]
   120a4:	ea000000 	b	120ac <uxTaskPriorityGet+0x30>
   120a8:	e51b3010 	ldr	r3, [fp, #-16]
   120ac:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   120b0:	e51b3008 	ldr	r3, [fp, #-8]
   120b4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   120b8:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   120bc:	ebfff930 	bl	10584 <vPortExitCritical>

		return uxReturn;
   120c0:	e51b300c 	ldr	r3, [fp, #-12]
	}
   120c4:	e1a00003 	mov	r0, r3
   120c8:	e24bd004 	sub	sp, fp, #4
   120cc:	e8bd8800 	pop	{fp, pc}
   120d0:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000120d4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   120d4:	e92d4800 	push	{fp, lr}
   120d8:	e28db004 	add	fp, sp, #4
   120dc:	e24dd018 	sub	sp, sp, #24
   120e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   120e4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   120e8:	e3a03000 	mov	r3, #0
   120ec:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   120f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   120f4:	e3530004 	cmp	r3, #4
   120f8:	9a000001 	bls	12104 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   120fc:	e3a03004 	mov	r3, #4
   12100:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		}

		taskENTER_CRITICAL();
   12104:	ebfff90d 	bl	10540 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   12108:	e59f3160 	ldr	r3, [pc, #352]	; 12270 <vTaskPrioritySet+0x19c>
   1210c:	e5933000 	ldr	r3, [r3]
   12110:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   12114:	e1520003 	cmp	r2, r3
   12118:	1a000001 	bne	12124 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   1211c:	e3a03000 	mov	r3, #0
   12120:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12128:	e3530000 	cmp	r3, #0
   1212c:	1a000002 	bne	1213c <vTaskPrioritySet+0x68>
   12130:	e59f3138 	ldr	r3, [pc, #312]	; 12270 <vTaskPrioritySet+0x19c>
   12134:	e5933000 	ldr	r3, [r3]
   12138:	ea000000 	b	12140 <vTaskPrioritySet+0x6c>
   1213c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12140:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   12144:	e51b300c 	ldr	r3, [fp, #-12]
   12148:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1214c:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   12150:	e51b2010 	ldr	r2, [fp, #-16]
   12154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   12158:	e1520003 	cmp	r2, r3
   1215c:	0a00003f 	beq	12260 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12160:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   12164:	e51b3010 	ldr	r3, [fp, #-16]
   12168:	e1520003 	cmp	r2, r3
   1216c:	9a000005 	bls	12188 <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   12170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12174:	e3530000 	cmp	r3, #0
   12178:	0a000007 	beq	1219c <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   1217c:	e3a03001 	mov	r3, #1
   12180:	e50b3008 	str	r3, [fp, #-8]
   12184:	ea000004 	b	1219c <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   12188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1218c:	e3530000 	cmp	r3, #0
   12190:	1a000001 	bne	1219c <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12194:	e3a03001 	mov	r3, #1
   12198:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   1219c:	e51b300c 	ldr	r3, [fp, #-12]
   121a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   121a4:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   121a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   121ac:	e2632005 	rsb	r2, r3, #5
   121b0:	e51b300c 	ldr	r3, [fp, #-12]
   121b4:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   121b8:	e51b300c 	ldr	r3, [fp, #-12]
   121bc:	e5931014 	ldr	r1, [r3, #20]
   121c0:	e51b2010 	ldr	r2, [fp, #-16]
   121c4:	e1a03002 	mov	r3, r2
   121c8:	e1a03103 	lsl	r3, r3, #2
   121cc:	e0833002 	add	r3, r3, r2
   121d0:	e1a03103 	lsl	r3, r3, #2
   121d4:	e59f2098 	ldr	r2, [pc, #152]	; 12274 <vTaskPrioritySet+0x1a0>
   121d8:	e0833002 	add	r3, r3, r2
   121dc:	e1510003 	cmp	r1, r3
   121e0:	1a00001a 	bne	12250 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   121e4:	e51b300c 	ldr	r3, [fp, #-12]
   121e8:	e2833004 	add	r3, r3, #4
   121ec:	e1a00003 	mov	r0, r3
   121f0:	ebfffb58 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   121f4:	e51b300c 	ldr	r3, [fp, #-12]
   121f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   121fc:	e59f3074 	ldr	r3, [pc, #116]	; 12278 <vTaskPrioritySet+0x1a4>
   12200:	e5933000 	ldr	r3, [r3]
   12204:	e1520003 	cmp	r2, r3
   12208:	9a000003 	bls	1221c <vTaskPrioritySet+0x148>
   1220c:	e51b300c 	ldr	r3, [fp, #-12]
   12210:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12214:	e59f205c 	ldr	r2, [pc, #92]	; 12278 <vTaskPrioritySet+0x1a4>
   12218:	e5823000 	str	r3, [r2]
   1221c:	e51b300c 	ldr	r3, [fp, #-12]
   12220:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12224:	e1a03002 	mov	r3, r2
   12228:	e1a03103 	lsl	r3, r3, #2
   1222c:	e0833002 	add	r3, r3, r2
   12230:	e1a03103 	lsl	r3, r3, #2
   12234:	e59f2038 	ldr	r2, [pc, #56]	; 12274 <vTaskPrioritySet+0x1a0>
   12238:	e0832002 	add	r2, r3, r2
   1223c:	e51b300c 	ldr	r3, [fp, #-12]
   12240:	e2833004 	add	r3, r3, #4
   12244:	e1a01003 	mov	r1, r3
   12248:	e1a00002 	mov	r0, r2
   1224c:	ebfffae5 	bl	10de8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   12250:	e51b3008 	ldr	r3, [fp, #-8]
   12254:	e3530001 	cmp	r3, #1
   12258:	1a000000 	bne	12260 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   1225c:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   12260:	ebfff8c7 	bl	10584 <vPortExitCritical>
	}
   12264:	e320f000 	nop	{0}
   12268:	e24bd004 	sub	sp, fp, #4
   1226c:	e8bd8800 	pop	{fp, pc}
   12270:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12274:	000147f8 	strdeq	r4, [r1], -r8
   12278:	000148d8 	ldrdeq	r4, [r1], -r8

0001227c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   1227c:	e92d4800 	push	{fp, lr}
   12280:	e28db004 	add	fp, sp, #4
   12284:	e24dd010 	sub	sp, sp, #16
   12288:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   1228c:	ebfff8ab 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   12290:	e59f30d8 	ldr	r3, [pc, #216]	; 12370 <vTaskSuspend+0xf4>
   12294:	e5933000 	ldr	r3, [r3]
   12298:	e51b2010 	ldr	r2, [fp, #-16]
   1229c:	e1520003 	cmp	r2, r3
   122a0:	1a000001 	bne	122ac <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   122a4:	e3a03000 	mov	r3, #0
   122a8:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   122ac:	e51b3010 	ldr	r3, [fp, #-16]
   122b0:	e3530000 	cmp	r3, #0
   122b4:	1a000002 	bne	122c4 <vTaskSuspend+0x48>
   122b8:	e59f30b0 	ldr	r3, [pc, #176]	; 12370 <vTaskSuspend+0xf4>
   122bc:	e5933000 	ldr	r3, [r3]
   122c0:	ea000000 	b	122c8 <vTaskSuspend+0x4c>
   122c4:	e51b3010 	ldr	r3, [fp, #-16]
   122c8:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   122cc:	e51b3008 	ldr	r3, [fp, #-8]
   122d0:	e2833004 	add	r3, r3, #4
   122d4:	e1a00003 	mov	r0, r3
   122d8:	ebfffb1e 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   122dc:	e51b3008 	ldr	r3, [fp, #-8]
   122e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   122e4:	e3530000 	cmp	r3, #0
   122e8:	0a000003 	beq	122fc <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   122ec:	e51b3008 	ldr	r3, [fp, #-8]
   122f0:	e2833018 	add	r3, r3, #24
   122f4:	e1a00003 	mov	r0, r3
   122f8:	ebfffb16 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   122fc:	e51b3008 	ldr	r3, [fp, #-8]
   12300:	e2833004 	add	r3, r3, #4
   12304:	e1a01003 	mov	r1, r3
   12308:	e59f0064 	ldr	r0, [pc, #100]	; 12374 <vTaskSuspend+0xf8>
   1230c:	ebfffab5 	bl	10de8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   12310:	ebfff89b 	bl	10584 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   12314:	e51b3010 	ldr	r3, [fp, #-16]
   12318:	e3530000 	cmp	r3, #0
   1231c:	1a000010 	bne	12364 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   12320:	e59f3050 	ldr	r3, [pc, #80]	; 12378 <vTaskSuspend+0xfc>
   12324:	e5933000 	ldr	r3, [r3]
   12328:	e3530000 	cmp	r3, #0
   1232c:	0a000001 	beq	12338 <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   12330:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   12334:	ea00000a 	b	12364 <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   12338:	e59f3034 	ldr	r3, [pc, #52]	; 12374 <vTaskSuspend+0xf8>
   1233c:	e5932000 	ldr	r2, [r3]
   12340:	e59f3034 	ldr	r3, [pc, #52]	; 1237c <vTaskSuspend+0x100>
   12344:	e5933000 	ldr	r3, [r3]
   12348:	e1520003 	cmp	r2, r3
   1234c:	1a000003 	bne	12360 <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   12350:	e59f3018 	ldr	r3, [pc, #24]	; 12370 <vTaskSuspend+0xf4>
   12354:	e3a02000 	mov	r2, #0
   12358:	e5832000 	str	r2, [r3]
	}
   1235c:	ea000000 	b	12364 <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   12360:	eb00024c 	bl	12c98 <vTaskSwitchContext>
	}
   12364:	e320f000 	nop	{0}
   12368:	e24bd004 	sub	sp, fp, #4
   1236c:	e8bd8800 	pop	{fp, pc}
   12370:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12374:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   12378:	000148dc 	ldrdeq	r4, [r1], -ip
   1237c:	000148cc 	andeq	r4, r1, ip, asr #17

00012380 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12380:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12384:	e28db000 	add	fp, sp, #0
   12388:	e24dd014 	sub	sp, sp, #20
   1238c:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   12390:	e3a03000 	mov	r3, #0
   12394:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   12398:	e51b3010 	ldr	r3, [fp, #-16]
   1239c:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   123a0:	e51b300c 	ldr	r3, [fp, #-12]
   123a4:	e5933014 	ldr	r3, [r3, #20]
   123a8:	e59f2044 	ldr	r2, [pc, #68]	; 123f4 <xTaskIsTaskSuspended+0x74>
   123ac:	e1530002 	cmp	r3, r2
   123b0:	1a00000a 	bne	123e0 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   123b4:	e51b300c 	ldr	r3, [fp, #-12]
   123b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123bc:	e59f2034 	ldr	r2, [pc, #52]	; 123f8 <xTaskIsTaskSuspended+0x78>
   123c0:	e1530002 	cmp	r3, r2
   123c4:	0a000005 	beq	123e0 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   123c8:	e51b300c 	ldr	r3, [fp, #-12]
   123cc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123d0:	e3530000 	cmp	r3, #0
   123d4:	1a000001 	bne	123e0 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   123d8:	e3a03001 	mov	r3, #1
   123dc:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   123e0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   123e4:	e1a00003 	mov	r0, r3
   123e8:	e28bd000 	add	sp, fp, #0
   123ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   123f0:	e12fff1e 	bx	lr
   123f4:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   123f8:	0001488c 	andeq	r4, r1, ip, lsl #17

000123fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   123fc:	e92d4800 	push	{fp, lr}
   12400:	e28db004 	add	fp, sp, #4
   12404:	e24dd010 	sub	sp, sp, #16
   12408:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   1240c:	e51b3010 	ldr	r3, [fp, #-16]
   12410:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   12414:	e51b3008 	ldr	r3, [fp, #-8]
   12418:	e3530000 	cmp	r3, #0
   1241c:	0a00002e 	beq	124dc <vTaskResume+0xe0>
   12420:	e59f30c0 	ldr	r3, [pc, #192]	; 124e8 <vTaskResume+0xec>
   12424:	e5933000 	ldr	r3, [r3]
   12428:	e51b2008 	ldr	r2, [fp, #-8]
   1242c:	e1520003 	cmp	r2, r3
   12430:	0a000029 	beq	124dc <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   12434:	ebfff841 	bl	10540 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12438:	e51b0008 	ldr	r0, [fp, #-8]
   1243c:	ebffffcf 	bl	12380 <xTaskIsTaskSuspended>
   12440:	e1a03000 	mov	r3, r0
   12444:	e3530001 	cmp	r3, #1
   12448:	1a000022 	bne	124d8 <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   1244c:	e51b3008 	ldr	r3, [fp, #-8]
   12450:	e2833004 	add	r3, r3, #4
   12454:	e1a00003 	mov	r0, r3
   12458:	ebfffabe 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   1245c:	e51b3008 	ldr	r3, [fp, #-8]
   12460:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12464:	e59f3080 	ldr	r3, [pc, #128]	; 124ec <vTaskResume+0xf0>
   12468:	e5933000 	ldr	r3, [r3]
   1246c:	e1520003 	cmp	r2, r3
   12470:	9a000003 	bls	12484 <vTaskResume+0x88>
   12474:	e51b3008 	ldr	r3, [fp, #-8]
   12478:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1247c:	e59f2068 	ldr	r2, [pc, #104]	; 124ec <vTaskResume+0xf0>
   12480:	e5823000 	str	r3, [r2]
   12484:	e51b3008 	ldr	r3, [fp, #-8]
   12488:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1248c:	e1a03002 	mov	r3, r2
   12490:	e1a03103 	lsl	r3, r3, #2
   12494:	e0833002 	add	r3, r3, r2
   12498:	e1a03103 	lsl	r3, r3, #2
   1249c:	e59f204c 	ldr	r2, [pc, #76]	; 124f0 <vTaskResume+0xf4>
   124a0:	e0832002 	add	r2, r3, r2
   124a4:	e51b3008 	ldr	r3, [fp, #-8]
   124a8:	e2833004 	add	r3, r3, #4
   124ac:	e1a01003 	mov	r1, r3
   124b0:	e1a00002 	mov	r0, r2
   124b4:	ebfffa4b 	bl	10de8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   124b8:	e51b3008 	ldr	r3, [fp, #-8]
   124bc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   124c0:	e59f3020 	ldr	r3, [pc, #32]	; 124e8 <vTaskResume+0xec>
   124c4:	e5933000 	ldr	r3, [r3]
   124c8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   124cc:	e1520003 	cmp	r2, r3
   124d0:	3a000000 	bcc	124d8 <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   124d4:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   124d8:	ebfff829 	bl	10584 <vPortExitCritical>
		}
	}
   124dc:	e320f000 	nop	{0}
   124e0:	e24bd004 	sub	sp, fp, #4
   124e4:	e8bd8800 	pop	{fp, pc}
   124e8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   124ec:	000148d8 	ldrdeq	r4, [r1], -r8
   124f0:	000147f8 	strdeq	r4, [r1], -r8

000124f4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   124f4:	e92d4800 	push	{fp, lr}
   124f8:	e28db004 	add	fp, sp, #4
   124fc:	e24dd018 	sub	sp, sp, #24
   12500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   12504:	e3a03000 	mov	r3, #0
   12508:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   1250c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12510:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   12514:	e3a03000 	mov	r3, #0
   12518:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   1251c:	e51b000c 	ldr	r0, [fp, #-12]
   12520:	ebffff96 	bl	12380 <xTaskIsTaskSuspended>
   12524:	e1a03000 	mov	r3, r0
   12528:	e3530001 	cmp	r3, #1
   1252c:	1a00002e 	bne	125ec <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12530:	e59f30c4 	ldr	r3, [pc, #196]	; 125fc <xTaskResumeFromISR+0x108>
   12534:	e5933000 	ldr	r3, [r3]
   12538:	e3530000 	cmp	r3, #0
   1253c:	1a000025 	bne	125d8 <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   12540:	e51b300c 	ldr	r3, [fp, #-12]
   12544:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12548:	e59f30b0 	ldr	r3, [pc, #176]	; 12600 <xTaskResumeFromISR+0x10c>
   1254c:	e5933000 	ldr	r3, [r3]
   12550:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12554:	e1520003 	cmp	r2, r3
   12558:	23a03001 	movcs	r3, #1
   1255c:	33a03000 	movcc	r3, #0
   12560:	e6ef3073 	uxtb	r3, r3
   12564:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12568:	e51b300c 	ldr	r3, [fp, #-12]
   1256c:	e2833004 	add	r3, r3, #4
   12570:	e1a00003 	mov	r0, r3
   12574:	ebfffa77 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12578:	e51b300c 	ldr	r3, [fp, #-12]
   1257c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12580:	e59f307c 	ldr	r3, [pc, #124]	; 12604 <xTaskResumeFromISR+0x110>
   12584:	e5933000 	ldr	r3, [r3]
   12588:	e1520003 	cmp	r2, r3
   1258c:	9a000003 	bls	125a0 <xTaskResumeFromISR+0xac>
   12590:	e51b300c 	ldr	r3, [fp, #-12]
   12594:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12598:	e59f2064 	ldr	r2, [pc, #100]	; 12604 <xTaskResumeFromISR+0x110>
   1259c:	e5823000 	str	r3, [r2]
   125a0:	e51b300c 	ldr	r3, [fp, #-12]
   125a4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   125a8:	e1a03002 	mov	r3, r2
   125ac:	e1a03103 	lsl	r3, r3, #2
   125b0:	e0833002 	add	r3, r3, r2
   125b4:	e1a03103 	lsl	r3, r3, #2
   125b8:	e59f2048 	ldr	r2, [pc, #72]	; 12608 <xTaskResumeFromISR+0x114>
   125bc:	e0832002 	add	r2, r3, r2
   125c0:	e51b300c 	ldr	r3, [fp, #-12]
   125c4:	e2833004 	add	r3, r3, #4
   125c8:	e1a01003 	mov	r1, r3
   125cc:	e1a00002 	mov	r0, r2
   125d0:	ebfffa04 	bl	10de8 <vListInsertEnd>
   125d4:	ea000004 	b	125ec <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   125d8:	e51b300c 	ldr	r3, [fp, #-12]
   125dc:	e2833018 	add	r3, r3, #24
   125e0:	e1a01003 	mov	r1, r3
   125e4:	e59f0020 	ldr	r0, [pc, #32]	; 1260c <xTaskResumeFromISR+0x118>
   125e8:	ebfff9fe 	bl	10de8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   125ec:	e51b3008 	ldr	r3, [fp, #-8]
	}
   125f0:	e1a00003 	mov	r0, r3
   125f4:	e24bd004 	sub	sp, fp, #4
   125f8:	e8bd8800 	pop	{fp, pc}
   125fc:	000148e0 	andeq	r4, r1, r0, ror #17
   12600:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12604:	000148d8 	ldrdeq	r4, [r1], -r8
   12608:	000147f8 	strdeq	r4, [r1], -r8
   1260c:	0001488c 	andeq	r4, r1, ip, lsl #17

00012610 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   12610:	e92d4800 	push	{fp, lr}
   12614:	e28db004 	add	fp, sp, #4
   12618:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   1261c:	e3a03000 	mov	r3, #0
   12620:	e58d300c 	str	r3, [sp, #12]
   12624:	e3a03000 	mov	r3, #0
   12628:	e58d3008 	str	r3, [sp, #8]
   1262c:	e3a03000 	mov	r3, #0
   12630:	e58d3004 	str	r3, [sp, #4]
   12634:	e3a03000 	mov	r3, #0
   12638:	e58d3000 	str	r3, [sp]
   1263c:	e3a03000 	mov	r3, #0
   12640:	e3a02080 	mov	r2, #128	; 0x80
   12644:	e59f1050 	ldr	r1, [pc, #80]	; 1269c <vTaskStartScheduler+0x8c>
   12648:	e59f0050 	ldr	r0, [pc, #80]	; 126a0 <vTaskStartScheduler+0x90>
   1264c:	ebfffd53 	bl	11ba0 <xTaskGenericCreate>
   12650:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12654:	e51b3008 	ldr	r3, [fp, #-8]
   12658:	e3530001 	cmp	r3, #1
   1265c:	1a00000b 	bne	12690 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12660:	e92d0001 	stmfd	sp!, {r0}
   12664:	e10f0000 	mrs	r0, CPSR
   12668:	e38000c0 	orr	r0, r0, #192	; 0xc0
   1266c:	e129f000 	msr	CPSR_fc, r0
   12670:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   12674:	e59f3028 	ldr	r3, [pc, #40]	; 126a4 <vTaskStartScheduler+0x94>
   12678:	e3a02001 	mov	r2, #1
   1267c:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   12680:	e59f3020 	ldr	r3, [pc, #32]	; 126a8 <vTaskStartScheduler+0x98>
   12684:	e3a02000 	mov	r2, #0
   12688:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1268c:	ebfff6eb 	bl	10240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12690:	e320f000 	nop	{0}
   12694:	e24bd004 	sub	sp, fp, #4
   12698:	e8bd8800 	pop	{fp, pc}
   1269c:	00014420 	andeq	r4, r1, r0, lsr #8
   126a0:	000130b8 	strheq	r3, [r1], -r8
   126a4:	000148dc 	ldrdeq	r4, [r1], -ip
   126a8:	000148d0 	ldrdeq	r4, [r1], -r0

000126ac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   126ac:	e92d4800 	push	{fp, lr}
   126b0:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   126b4:	e92d0001 	stmfd	sp!, {r0}
   126b8:	e10f0000 	mrs	r0, CPSR
   126bc:	e38000c0 	orr	r0, r0, #192	; 0xc0
   126c0:	e129f000 	msr	CPSR_fc, r0
   126c4:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   126c8:	e59f3010 	ldr	r3, [pc, #16]	; 126e0 <vTaskEndScheduler+0x34>
   126cc:	e3a02000 	mov	r2, #0
   126d0:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   126d4:	ebfff6e0 	bl	1025c <vPortEndScheduler>
}
   126d8:	e320f000 	nop	{0}
   126dc:	e8bd8800 	pop	{fp, pc}
   126e0:	000148dc 	ldrdeq	r4, [r1], -ip

000126e4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   126e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   126e8:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   126ec:	e59f301c 	ldr	r3, [pc, #28]	; 12710 <vTaskSuspendAll+0x2c>
   126f0:	e5933000 	ldr	r3, [r3]
   126f4:	e2833001 	add	r3, r3, #1
   126f8:	e59f2010 	ldr	r2, [pc, #16]	; 12710 <vTaskSuspendAll+0x2c>
   126fc:	e5823000 	str	r3, [r2]
}
   12700:	e320f000 	nop	{0}
   12704:	e28bd000 	add	sp, fp, #0
   12708:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1270c:	e12fff1e 	bx	lr
   12710:	000148e0 	andeq	r4, r1, r0, ror #17

00012714 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   12714:	e92d4810 	push	{r4, fp, lr}
   12718:	e28db008 	add	fp, sp, #8
   1271c:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   12720:	e3a03000 	mov	r3, #0
   12724:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   12728:	ebfff784 	bl	10540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   1272c:	e59f3164 	ldr	r3, [pc, #356]	; 12898 <xTaskResumeAll+0x184>
   12730:	e5933000 	ldr	r3, [r3]
   12734:	e2433001 	sub	r3, r3, #1
   12738:	e59f2158 	ldr	r2, [pc, #344]	; 12898 <xTaskResumeAll+0x184>
   1273c:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12740:	e59f3150 	ldr	r3, [pc, #336]	; 12898 <xTaskResumeAll+0x184>
   12744:	e5933000 	ldr	r3, [r3]
   12748:	e3530000 	cmp	r3, #0
   1274c:	1a00004c 	bne	12884 <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   12750:	e59f3144 	ldr	r3, [pc, #324]	; 1289c <xTaskResumeAll+0x188>
   12754:	e5933000 	ldr	r3, [r3]
   12758:	e3530000 	cmp	r3, #0
   1275c:	0a000048 	beq	12884 <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   12760:	e3a03000 	mov	r3, #0
   12764:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   12768:	ea000023 	b	127fc <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   1276c:	e59f312c 	ldr	r3, [pc, #300]	; 128a0 <xTaskResumeAll+0x18c>
   12770:	e593300c 	ldr	r3, [r3, #12]
   12774:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   12778:	e2843018 	add	r3, r4, #24
   1277c:	e1a00003 	mov	r0, r3
   12780:	ebfff9f4 	bl	10f58 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   12784:	e2843004 	add	r3, r4, #4
   12788:	e1a00003 	mov	r0, r3
   1278c:	ebfff9f1 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12790:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12794:	e59f3108 	ldr	r3, [pc, #264]	; 128a4 <xTaskResumeAll+0x190>
   12798:	e5933000 	ldr	r3, [r3]
   1279c:	e1520003 	cmp	r2, r3
   127a0:	9a000002 	bls	127b0 <xTaskResumeAll+0x9c>
   127a4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   127a8:	e59f20f4 	ldr	r2, [pc, #244]	; 128a4 <xTaskResumeAll+0x190>
   127ac:	e5823000 	str	r3, [r2]
   127b0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127b4:	e1a03002 	mov	r3, r2
   127b8:	e1a03103 	lsl	r3, r3, #2
   127bc:	e0833002 	add	r3, r3, r2
   127c0:	e1a03103 	lsl	r3, r3, #2
   127c4:	e59f20dc 	ldr	r2, [pc, #220]	; 128a8 <xTaskResumeAll+0x194>
   127c8:	e0833002 	add	r3, r3, r2
   127cc:	e2842004 	add	r2, r4, #4
   127d0:	e1a01002 	mov	r1, r2
   127d4:	e1a00003 	mov	r0, r3
   127d8:	ebfff982 	bl	10de8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   127dc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127e0:	e59f30c4 	ldr	r3, [pc, #196]	; 128ac <xTaskResumeAll+0x198>
   127e4:	e5933000 	ldr	r3, [r3]
   127e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   127ec:	e1520003 	cmp	r2, r3
   127f0:	3a000001 	bcc	127fc <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   127f4:	e3a03001 	mov	r3, #1
   127f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   127fc:	e59f309c 	ldr	r3, [pc, #156]	; 128a0 <xTaskResumeAll+0x18c>
   12800:	e5933000 	ldr	r3, [r3]
   12804:	e3530000 	cmp	r3, #0
   12808:	1affffd7 	bne	1276c <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1280c:	e59f309c 	ldr	r3, [pc, #156]	; 128b0 <xTaskResumeAll+0x19c>
   12810:	e5933000 	ldr	r3, [r3]
   12814:	e3530000 	cmp	r3, #0
   12818:	0a00000c 	beq	12850 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1281c:	ea000005 	b	12838 <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   12820:	eb000048 	bl	12948 <vTaskIncrementTick>
						--uxMissedTicks;
   12824:	e59f3084 	ldr	r3, [pc, #132]	; 128b0 <xTaskResumeAll+0x19c>
   12828:	e5933000 	ldr	r3, [r3]
   1282c:	e2433001 	sub	r3, r3, #1
   12830:	e59f2078 	ldr	r2, [pc, #120]	; 128b0 <xTaskResumeAll+0x19c>
   12834:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   12838:	e59f3070 	ldr	r3, [pc, #112]	; 128b0 <xTaskResumeAll+0x19c>
   1283c:	e5933000 	ldr	r3, [r3]
   12840:	e3530000 	cmp	r3, #0
   12844:	1afffff5 	bne	12820 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   12848:	e3a03001 	mov	r3, #1
   1284c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   12850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12854:	e3530001 	cmp	r3, #1
   12858:	0a000003 	beq	1286c <xTaskResumeAll+0x158>
   1285c:	e59f3050 	ldr	r3, [pc, #80]	; 128b4 <xTaskResumeAll+0x1a0>
   12860:	e5933000 	ldr	r3, [r3]
   12864:	e3530001 	cmp	r3, #1
   12868:	1a000005 	bne	12884 <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   1286c:	e3a03001 	mov	r3, #1
   12870:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   12874:	e59f3038 	ldr	r3, [pc, #56]	; 128b4 <xTaskResumeAll+0x1a0>
   12878:	e3a02000 	mov	r2, #0
   1287c:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   12880:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   12884:	ebfff73e 	bl	10584 <vPortExitCritical>

	return xAlreadyYielded;
   12888:	e51b3010 	ldr	r3, [fp, #-16]
}
   1288c:	e1a00003 	mov	r0, r3
   12890:	e24bd008 	sub	sp, fp, #8
   12894:	e8bd8810 	pop	{r4, fp, pc}
   12898:	000148e0 	andeq	r4, r1, r0, ror #17
   1289c:	000148cc 	andeq	r4, r1, ip, asr #17
   128a0:	0001488c 	andeq	r4, r1, ip, lsl #17
   128a4:	000148d8 	ldrdeq	r4, [r1], -r8
   128a8:	000147f8 	strdeq	r4, [r1], -r8
   128ac:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   128b0:	000148e4 	andeq	r4, r1, r4, ror #17
   128b4:	000148e8 	andeq	r4, r1, r8, ror #17

000128b8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   128b8:	e92d4800 	push	{fp, lr}
   128bc:	e28db004 	add	fp, sp, #4
   128c0:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   128c4:	ebfff71d 	bl	10540 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   128c8:	e59f3018 	ldr	r3, [pc, #24]	; 128e8 <xTaskGetTickCount+0x30>
   128cc:	e5933000 	ldr	r3, [r3]
   128d0:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   128d4:	ebfff72a 	bl	10584 <vPortExitCritical>

	return xTicks;
   128d8:	e51b3008 	ldr	r3, [fp, #-8]
}
   128dc:	e1a00003 	mov	r0, r3
   128e0:	e24bd004 	sub	sp, fp, #4
   128e4:	e8bd8800 	pop	{fp, pc}
   128e8:	000148d0 	ldrdeq	r4, [r1], -r0

000128ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   128ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   128f0:	e28db000 	add	fp, sp, #0
   128f4:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   128f8:	e3a03000 	mov	r3, #0
   128fc:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   12900:	e59f3018 	ldr	r3, [pc, #24]	; 12920 <xTaskGetTickCountFromISR+0x34>
   12904:	e5933000 	ldr	r3, [r3]
   12908:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1290c:	e51b300c 	ldr	r3, [fp, #-12]
}
   12910:	e1a00003 	mov	r0, r3
   12914:	e28bd000 	add	sp, fp, #0
   12918:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1291c:	e12fff1e 	bx	lr
   12920:	000148d0 	ldrdeq	r4, [r1], -r0

00012924 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   12924:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12928:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   1292c:	e59f3010 	ldr	r3, [pc, #16]	; 12944 <uxTaskGetNumberOfTasks+0x20>
   12930:	e5933000 	ldr	r3, [r3]
}
   12934:	e1a00003 	mov	r0, r3
   12938:	e28bd000 	add	sp, fp, #0
   1293c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12940:	e12fff1e 	bx	lr
   12944:	000148cc 	andeq	r4, r1, ip, asr #17

00012948 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   12948:	e92d4800 	push	{fp, lr}
   1294c:	e28db004 	add	fp, sp, #4
   12950:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12954:	e59f31e4 	ldr	r3, [pc, #484]	; 12b40 <vTaskIncrementTick+0x1f8>
   12958:	e5933000 	ldr	r3, [r3]
   1295c:	e3530000 	cmp	r3, #0
   12960:	1a00006d 	bne	12b1c <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   12964:	e59f31d8 	ldr	r3, [pc, #472]	; 12b44 <vTaskIncrementTick+0x1fc>
   12968:	e5933000 	ldr	r3, [r3]
   1296c:	e2833001 	add	r3, r3, #1
   12970:	e59f21cc 	ldr	r2, [pc, #460]	; 12b44 <vTaskIncrementTick+0x1fc>
   12974:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   12978:	e59f31c4 	ldr	r3, [pc, #452]	; 12b44 <vTaskIncrementTick+0x1fc>
   1297c:	e5933000 	ldr	r3, [r3]
   12980:	e3530000 	cmp	r3, #0
   12984:	1a000020 	bne	12a0c <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   12988:	e59f31b8 	ldr	r3, [pc, #440]	; 12b48 <vTaskIncrementTick+0x200>
   1298c:	e5933000 	ldr	r3, [r3]
   12990:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   12994:	e59f31b0 	ldr	r3, [pc, #432]	; 12b4c <vTaskIncrementTick+0x204>
   12998:	e5933000 	ldr	r3, [r3]
   1299c:	e59f21a4 	ldr	r2, [pc, #420]	; 12b48 <vTaskIncrementTick+0x200>
   129a0:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   129a4:	e59f21a0 	ldr	r2, [pc, #416]	; 12b4c <vTaskIncrementTick+0x204>
   129a8:	e51b3008 	ldr	r3, [fp, #-8]
   129ac:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   129b0:	e59f3198 	ldr	r3, [pc, #408]	; 12b50 <vTaskIncrementTick+0x208>
   129b4:	e5933000 	ldr	r3, [r3]
   129b8:	e2833001 	add	r3, r3, #1
   129bc:	e59f218c 	ldr	r2, [pc, #396]	; 12b50 <vTaskIncrementTick+0x208>
   129c0:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   129c4:	e59f317c 	ldr	r3, [pc, #380]	; 12b48 <vTaskIncrementTick+0x200>
   129c8:	e5933000 	ldr	r3, [r3]
   129cc:	e5933000 	ldr	r3, [r3]
   129d0:	e3530000 	cmp	r3, #0
   129d4:	1a000003 	bne	129e8 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   129d8:	e59f3174 	ldr	r3, [pc, #372]	; 12b54 <vTaskIncrementTick+0x20c>
   129dc:	e3e02000 	mvn	r2, #0
   129e0:	e5832000 	str	r2, [r3]
   129e4:	ea000008 	b	12a0c <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   129e8:	e59f3158 	ldr	r3, [pc, #344]	; 12b48 <vTaskIncrementTick+0x200>
   129ec:	e5933000 	ldr	r3, [r3]
   129f0:	e593300c 	ldr	r3, [r3, #12]
   129f4:	e593300c 	ldr	r3, [r3, #12]
   129f8:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   129fc:	e51b300c 	ldr	r3, [fp, #-12]
   12a00:	e5933004 	ldr	r3, [r3, #4]
   12a04:	e59f2148 	ldr	r2, [pc, #328]	; 12b54 <vTaskIncrementTick+0x20c>
   12a08:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   12a0c:	e59f3130 	ldr	r3, [pc, #304]	; 12b44 <vTaskIncrementTick+0x1fc>
   12a10:	e5932000 	ldr	r2, [r3]
   12a14:	e59f3138 	ldr	r3, [pc, #312]	; 12b54 <vTaskIncrementTick+0x20c>
   12a18:	e5933000 	ldr	r3, [r3]
   12a1c:	e1520003 	cmp	r2, r3
   12a20:	3a000043 	bcc	12b34 <vTaskIncrementTick+0x1ec>
   12a24:	e59f311c 	ldr	r3, [pc, #284]	; 12b48 <vTaskIncrementTick+0x200>
   12a28:	e5933000 	ldr	r3, [r3]
   12a2c:	e5933000 	ldr	r3, [r3]
   12a30:	e3530000 	cmp	r3, #0
   12a34:	1a000003 	bne	12a48 <vTaskIncrementTick+0x100>
   12a38:	e59f3114 	ldr	r3, [pc, #276]	; 12b54 <vTaskIncrementTick+0x20c>
   12a3c:	e3e02000 	mvn	r2, #0
   12a40:	e5832000 	str	r2, [r3]
   12a44:	ea00003a 	b	12b34 <vTaskIncrementTick+0x1ec>
   12a48:	e59f30f8 	ldr	r3, [pc, #248]	; 12b48 <vTaskIncrementTick+0x200>
   12a4c:	e5933000 	ldr	r3, [r3]
   12a50:	e593300c 	ldr	r3, [r3, #12]
   12a54:	e593300c 	ldr	r3, [r3, #12]
   12a58:	e50b300c 	str	r3, [fp, #-12]
   12a5c:	e51b300c 	ldr	r3, [fp, #-12]
   12a60:	e5933004 	ldr	r3, [r3, #4]
   12a64:	e50b3010 	str	r3, [fp, #-16]
   12a68:	e59f30d4 	ldr	r3, [pc, #212]	; 12b44 <vTaskIncrementTick+0x1fc>
   12a6c:	e5932000 	ldr	r2, [r3]
   12a70:	e51b3010 	ldr	r3, [fp, #-16]
   12a74:	e1520003 	cmp	r2, r3
   12a78:	2a000003 	bcs	12a8c <vTaskIncrementTick+0x144>
   12a7c:	e59f20d0 	ldr	r2, [pc, #208]	; 12b54 <vTaskIncrementTick+0x20c>
   12a80:	e51b3010 	ldr	r3, [fp, #-16]
   12a84:	e5823000 	str	r3, [r2]
   12a88:	ea000029 	b	12b34 <vTaskIncrementTick+0x1ec>
   12a8c:	e51b300c 	ldr	r3, [fp, #-12]
   12a90:	e2833004 	add	r3, r3, #4
   12a94:	e1a00003 	mov	r0, r3
   12a98:	ebfff92e 	bl	10f58 <vListRemove>
   12a9c:	e51b300c 	ldr	r3, [fp, #-12]
   12aa0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12aa4:	e3530000 	cmp	r3, #0
   12aa8:	0a000003 	beq	12abc <vTaskIncrementTick+0x174>
   12aac:	e51b300c 	ldr	r3, [fp, #-12]
   12ab0:	e2833018 	add	r3, r3, #24
   12ab4:	e1a00003 	mov	r0, r3
   12ab8:	ebfff926 	bl	10f58 <vListRemove>
   12abc:	e51b300c 	ldr	r3, [fp, #-12]
   12ac0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ac4:	e59f308c 	ldr	r3, [pc, #140]	; 12b58 <vTaskIncrementTick+0x210>
   12ac8:	e5933000 	ldr	r3, [r3]
   12acc:	e1520003 	cmp	r2, r3
   12ad0:	9a000003 	bls	12ae4 <vTaskIncrementTick+0x19c>
   12ad4:	e51b300c 	ldr	r3, [fp, #-12]
   12ad8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12adc:	e59f2074 	ldr	r2, [pc, #116]	; 12b58 <vTaskIncrementTick+0x210>
   12ae0:	e5823000 	str	r3, [r2]
   12ae4:	e51b300c 	ldr	r3, [fp, #-12]
   12ae8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12aec:	e1a03002 	mov	r3, r2
   12af0:	e1a03103 	lsl	r3, r3, #2
   12af4:	e0833002 	add	r3, r3, r2
   12af8:	e1a03103 	lsl	r3, r3, #2
   12afc:	e59f2058 	ldr	r2, [pc, #88]	; 12b5c <vTaskIncrementTick+0x214>
   12b00:	e0832002 	add	r2, r3, r2
   12b04:	e51b300c 	ldr	r3, [fp, #-12]
   12b08:	e2833004 	add	r3, r3, #4
   12b0c:	e1a01003 	mov	r1, r3
   12b10:	e1a00002 	mov	r0, r2
   12b14:	ebfff8b3 	bl	10de8 <vListInsertEnd>
   12b18:	eaffffc1 	b	12a24 <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   12b1c:	e59f303c 	ldr	r3, [pc, #60]	; 12b60 <vTaskIncrementTick+0x218>
   12b20:	e5933000 	ldr	r3, [r3]
   12b24:	e2833001 	add	r3, r3, #1
   12b28:	e59f2030 	ldr	r2, [pc, #48]	; 12b60 <vTaskIncrementTick+0x218>
   12b2c:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   12b30:	eaffffff 	b	12b34 <vTaskIncrementTick+0x1ec>
   12b34:	e320f000 	nop	{0}
   12b38:	e24bd004 	sub	sp, fp, #4
   12b3c:	e8bd8800 	pop	{fp, pc}
   12b40:	000148e0 	andeq	r4, r1, r0, ror #17
   12b44:	000148d0 	ldrdeq	r4, [r1], -r0
   12b48:	00014884 	andeq	r4, r1, r4, lsl #17
   12b4c:	00014888 	andeq	r4, r1, r8, lsl #17
   12b50:	000148ec 	andeq	r4, r1, ip, ror #17
   12b54:	00014760 	andeq	r4, r1, r0, ror #14
   12b58:	000148d8 	ldrdeq	r4, [r1], -r8
   12b5c:	000147f8 	strdeq	r4, [r1], -r8
   12b60:	000148e4 	andeq	r4, r1, r4, ror #17

00012b64 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   12b64:	e92d4800 	push	{fp, lr}
   12b68:	e28db004 	add	fp, sp, #4
   12b6c:	e24dd010 	sub	sp, sp, #16
   12b70:	e50b0010 	str	r0, [fp, #-16]
   12b74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b78:	e51b3010 	ldr	r3, [fp, #-16]
   12b7c:	e3530000 	cmp	r3, #0
   12b80:	1a000003 	bne	12b94 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12b84:	e59f3030 	ldr	r3, [pc, #48]	; 12bbc <vTaskSetApplicationTaskTag+0x58>
   12b88:	e5933000 	ldr	r3, [r3]
   12b8c:	e50b3008 	str	r3, [fp, #-8]
   12b90:	ea000001 	b	12b9c <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12b94:	e51b3010 	ldr	r3, [fp, #-16]
   12b98:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12b9c:	ebfff667 	bl	10540 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   12ba0:	e51b3008 	ldr	r3, [fp, #-8]
   12ba4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12ba8:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   12bac:	ebfff674 	bl	10584 <vPortExitCritical>
	}
   12bb0:	e320f000 	nop	{0}
   12bb4:	e24bd004 	sub	sp, fp, #4
   12bb8:	e8bd8800 	pop	{fp, pc}
   12bbc:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012bc0 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   12bc0:	e92d4800 	push	{fp, lr}
   12bc4:	e28db004 	add	fp, sp, #4
   12bc8:	e24dd010 	sub	sp, sp, #16
   12bcc:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12bd0:	e51b3010 	ldr	r3, [fp, #-16]
   12bd4:	e3530000 	cmp	r3, #0
   12bd8:	1a000003 	bne	12bec <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12bdc:	e59f3034 	ldr	r3, [pc, #52]	; 12c18 <xTaskGetApplicationTaskTag+0x58>
   12be0:	e5933000 	ldr	r3, [r3]
   12be4:	e50b3008 	str	r3, [fp, #-8]
   12be8:	ea000001 	b	12bf4 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12bec:	e51b3010 	ldr	r3, [fp, #-16]
   12bf0:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12bf4:	ebfff651 	bl	10540 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   12bf8:	e51b3008 	ldr	r3, [fp, #-8]
   12bfc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c00:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   12c04:	ebfff65e 	bl	10584 <vPortExitCritical>

		return xReturn;
   12c08:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c0c:	e1a00003 	mov	r0, r3
   12c10:	e24bd004 	sub	sp, fp, #4
   12c14:	e8bd8800 	pop	{fp, pc}
   12c18:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012c1c <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   12c1c:	e92d4800 	push	{fp, lr}
   12c20:	e28db004 	add	fp, sp, #4
   12c24:	e24dd010 	sub	sp, sp, #16
   12c28:	e50b0010 	str	r0, [fp, #-16]
   12c2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   12c30:	e51b3010 	ldr	r3, [fp, #-16]
   12c34:	e3530000 	cmp	r3, #0
   12c38:	1a000003 	bne	12c4c <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12c3c:	e59f3050 	ldr	r3, [pc, #80]	; 12c94 <xTaskCallApplicationTaskHook+0x78>
   12c40:	e5933000 	ldr	r3, [r3]
   12c44:	e50b3008 	str	r3, [fp, #-8]
   12c48:	ea000001 	b	12c54 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12c4c:	e51b3010 	ldr	r3, [fp, #-16]
   12c50:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   12c54:	e51b3008 	ldr	r3, [fp, #-8]
   12c58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c5c:	e3530000 	cmp	r3, #0
   12c60:	0a000005 	beq	12c7c <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   12c64:	e51b3008 	ldr	r3, [fp, #-8]
   12c68:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c6c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   12c70:	e12fff33 	blx	r3
   12c74:	e50b000c 	str	r0, [fp, #-12]
   12c78:	ea000001 	b	12c84 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   12c7c:	e3a03000 	mov	r3, #0
   12c80:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   12c84:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c88:	e1a00003 	mov	r0, r3
   12c8c:	e24bd004 	sub	sp, fp, #4
   12c90:	e8bd8800 	pop	{fp, pc}
   12c94:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012c98 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12c98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12c9c:	e28db000 	add	fp, sp, #0
   12ca0:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   12ca4:	e59f30e0 	ldr	r3, [pc, #224]	; 12d8c <vTaskSwitchContext+0xf4>
   12ca8:	e5933000 	ldr	r3, [r3]
   12cac:	e3530000 	cmp	r3, #0
   12cb0:	0a000008 	beq	12cd8 <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   12cb4:	e59f30d4 	ldr	r3, [pc, #212]	; 12d90 <vTaskSwitchContext+0xf8>
   12cb8:	e3a02001 	mov	r2, #1
   12cbc:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   12cc0:	ea00002d 	b	12d7c <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   12cc4:	e59f30c8 	ldr	r3, [pc, #200]	; 12d94 <vTaskSwitchContext+0xfc>
   12cc8:	e5933000 	ldr	r3, [r3]
   12ccc:	e2433001 	sub	r3, r3, #1
   12cd0:	e59f20bc 	ldr	r2, [pc, #188]	; 12d94 <vTaskSwitchContext+0xfc>
   12cd4:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   12cd8:	e59f30b4 	ldr	r3, [pc, #180]	; 12d94 <vTaskSwitchContext+0xfc>
   12cdc:	e5932000 	ldr	r2, [r3]
   12ce0:	e59f10b0 	ldr	r1, [pc, #176]	; 12d98 <vTaskSwitchContext+0x100>
   12ce4:	e1a03002 	mov	r3, r2
   12ce8:	e1a03103 	lsl	r3, r3, #2
   12cec:	e0833002 	add	r3, r3, r2
   12cf0:	e1a03103 	lsl	r3, r3, #2
   12cf4:	e0813003 	add	r3, r1, r3
   12cf8:	e5933000 	ldr	r3, [r3]
   12cfc:	e3530000 	cmp	r3, #0
   12d00:	0affffef 	beq	12cc4 <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   12d04:	e59f3088 	ldr	r3, [pc, #136]	; 12d94 <vTaskSwitchContext+0xfc>
   12d08:	e5932000 	ldr	r2, [r3]
   12d0c:	e1a03002 	mov	r3, r2
   12d10:	e1a03103 	lsl	r3, r3, #2
   12d14:	e0833002 	add	r3, r3, r2
   12d18:	e1a03103 	lsl	r3, r3, #2
   12d1c:	e59f2074 	ldr	r2, [pc, #116]	; 12d98 <vTaskSwitchContext+0x100>
   12d20:	e0833002 	add	r3, r3, r2
   12d24:	e50b3008 	str	r3, [fp, #-8]
   12d28:	e51b3008 	ldr	r3, [fp, #-8]
   12d2c:	e5933004 	ldr	r3, [r3, #4]
   12d30:	e5932004 	ldr	r2, [r3, #4]
   12d34:	e51b3008 	ldr	r3, [fp, #-8]
   12d38:	e5832004 	str	r2, [r3, #4]
   12d3c:	e51b3008 	ldr	r3, [fp, #-8]
   12d40:	e5932004 	ldr	r2, [r3, #4]
   12d44:	e51b3008 	ldr	r3, [fp, #-8]
   12d48:	e2833008 	add	r3, r3, #8
   12d4c:	e1520003 	cmp	r2, r3
   12d50:	1a000004 	bne	12d68 <vTaskSwitchContext+0xd0>
   12d54:	e51b3008 	ldr	r3, [fp, #-8]
   12d58:	e5933004 	ldr	r3, [r3, #4]
   12d5c:	e5932004 	ldr	r2, [r3, #4]
   12d60:	e51b3008 	ldr	r3, [fp, #-8]
   12d64:	e5832004 	str	r2, [r3, #4]
   12d68:	e51b3008 	ldr	r3, [fp, #-8]
   12d6c:	e5933004 	ldr	r3, [r3, #4]
   12d70:	e593300c 	ldr	r3, [r3, #12]
   12d74:	e59f2020 	ldr	r2, [pc, #32]	; 12d9c <vTaskSwitchContext+0x104>
   12d78:	e5823000 	str	r3, [r2]
}
   12d7c:	e320f000 	nop	{0}
   12d80:	e28bd000 	add	sp, fp, #0
   12d84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12d88:	e12fff1e 	bx	lr
   12d8c:	000148e0 	andeq	r4, r1, r0, ror #17
   12d90:	000148e8 	andeq	r4, r1, r8, ror #17
   12d94:	000148d8 	ldrdeq	r4, [r1], -r8
   12d98:	000147f8 	strdeq	r4, [r1], -r8
   12d9c:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   12da0:	e92d4800 	push	{fp, lr}
   12da4:	e28db004 	add	fp, sp, #4
   12da8:	e24dd010 	sub	sp, sp, #16
   12dac:	e50b0010 	str	r0, [fp, #-16]
   12db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   12db4:	e59f3074 	ldr	r3, [pc, #116]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12db8:	e5933000 	ldr	r3, [r3]
   12dbc:	e2833018 	add	r3, r3, #24
   12dc0:	e1a01003 	mov	r1, r3
   12dc4:	e51b0010 	ldr	r0, [fp, #-16]
   12dc8:	ebfff82c 	bl	10e80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12dcc:	e59f305c 	ldr	r3, [pc, #92]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12dd0:	e5933000 	ldr	r3, [r3]
   12dd4:	e2833004 	add	r3, r3, #4
   12dd8:	e1a00003 	mov	r0, r3
   12ddc:	ebfff85d 	bl	10f58 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   12de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12de4:	e3730001 	cmn	r3, #1
   12de8:	1a000006 	bne	12e08 <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12dec:	e59f303c 	ldr	r3, [pc, #60]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12df0:	e5933000 	ldr	r3, [r3]
   12df4:	e2833004 	add	r3, r3, #4
   12df8:	e1a01003 	mov	r1, r3
   12dfc:	e59f0030 	ldr	r0, [pc, #48]	; 12e34 <vTaskPlaceOnEventList+0x94>
   12e00:	ebfff7f8 	bl	10de8 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   12e04:	ea000006 	b	12e24 <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   12e08:	e59f3028 	ldr	r3, [pc, #40]	; 12e38 <vTaskPlaceOnEventList+0x98>
   12e0c:	e5932000 	ldr	r2, [r3]
   12e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12e14:	e0823003 	add	r3, r2, r3
   12e18:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   12e1c:	e51b0008 	ldr	r0, [fp, #-8]
   12e20:	eb00013f 	bl	13324 <prvAddCurrentTaskToDelayedList>
}
   12e24:	e320f000 	nop	{0}
   12e28:	e24bd004 	sub	sp, fp, #4
   12e2c:	e8bd8800 	pop	{fp, pc}
   12e30:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12e34:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   12e38:	000148d0 	ldrdeq	r4, [r1], -r0

00012e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   12e3c:	e92d4800 	push	{fp, lr}
   12e40:	e28db004 	add	fp, sp, #4
   12e44:	e24dd010 	sub	sp, sp, #16
   12e48:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   12e4c:	e51b3010 	ldr	r3, [fp, #-16]
   12e50:	e593300c 	ldr	r3, [r3, #12]
   12e54:	e593300c 	ldr	r3, [r3, #12]
   12e58:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   12e5c:	e51b300c 	ldr	r3, [fp, #-12]
   12e60:	e2833018 	add	r3, r3, #24
   12e64:	e1a00003 	mov	r0, r3
   12e68:	ebfff83a 	bl	10f58 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12e6c:	e59f30cc 	ldr	r3, [pc, #204]	; 12f40 <xTaskRemoveFromEventList+0x104>
   12e70:	e5933000 	ldr	r3, [r3]
   12e74:	e3530000 	cmp	r3, #0
   12e78:	1a00001b 	bne	12eec <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   12e7c:	e51b300c 	ldr	r3, [fp, #-12]
   12e80:	e2833004 	add	r3, r3, #4
   12e84:	e1a00003 	mov	r0, r3
   12e88:	ebfff832 	bl	10f58 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   12e8c:	e51b300c 	ldr	r3, [fp, #-12]
   12e90:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e94:	e59f30a8 	ldr	r3, [pc, #168]	; 12f44 <xTaskRemoveFromEventList+0x108>
   12e98:	e5933000 	ldr	r3, [r3]
   12e9c:	e1520003 	cmp	r2, r3
   12ea0:	9a000003 	bls	12eb4 <xTaskRemoveFromEventList+0x78>
   12ea4:	e51b300c 	ldr	r3, [fp, #-12]
   12ea8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12eac:	e59f2090 	ldr	r2, [pc, #144]	; 12f44 <xTaskRemoveFromEventList+0x108>
   12eb0:	e5823000 	str	r3, [r2]
   12eb4:	e51b300c 	ldr	r3, [fp, #-12]
   12eb8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ebc:	e1a03002 	mov	r3, r2
   12ec0:	e1a03103 	lsl	r3, r3, #2
   12ec4:	e0833002 	add	r3, r3, r2
   12ec8:	e1a03103 	lsl	r3, r3, #2
   12ecc:	e59f2074 	ldr	r2, [pc, #116]	; 12f48 <xTaskRemoveFromEventList+0x10c>
   12ed0:	e0832002 	add	r2, r3, r2
   12ed4:	e51b300c 	ldr	r3, [fp, #-12]
   12ed8:	e2833004 	add	r3, r3, #4
   12edc:	e1a01003 	mov	r1, r3
   12ee0:	e1a00002 	mov	r0, r2
   12ee4:	ebfff7bf 	bl	10de8 <vListInsertEnd>
   12ee8:	ea000004 	b	12f00 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   12eec:	e51b300c 	ldr	r3, [fp, #-12]
   12ef0:	e2833018 	add	r3, r3, #24
   12ef4:	e1a01003 	mov	r1, r3
   12ef8:	e59f004c 	ldr	r0, [pc, #76]	; 12f4c <xTaskRemoveFromEventList+0x110>
   12efc:	ebfff7b9 	bl	10de8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12f00:	e51b300c 	ldr	r3, [fp, #-12]
   12f04:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12f08:	e59f3040 	ldr	r3, [pc, #64]	; 12f50 <xTaskRemoveFromEventList+0x114>
   12f0c:	e5933000 	ldr	r3, [r3]
   12f10:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12f14:	e1520003 	cmp	r2, r3
   12f18:	3a000002 	bcc	12f28 <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   12f1c:	e3a03001 	mov	r3, #1
   12f20:	e50b3008 	str	r3, [fp, #-8]
   12f24:	ea000001 	b	12f30 <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   12f28:	e3a03000 	mov	r3, #0
   12f2c:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   12f30:	e51b3008 	ldr	r3, [fp, #-8]
}
   12f34:	e1a00003 	mov	r0, r3
   12f38:	e24bd004 	sub	sp, fp, #4
   12f3c:	e8bd8800 	pop	{fp, pc}
   12f40:	000148e0 	andeq	r4, r1, r0, ror #17
   12f44:	000148d8 	ldrdeq	r4, [r1], -r8
   12f48:	000147f8 	strdeq	r4, [r1], -r8
   12f4c:	0001488c 	andeq	r4, r1, ip, lsl #17
   12f50:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012f54 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   12f54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12f58:	e28db000 	add	fp, sp, #0
   12f5c:	e24dd00c 	sub	sp, sp, #12
   12f60:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   12f64:	e59f3028 	ldr	r3, [pc, #40]	; 12f94 <vTaskSetTimeOutState+0x40>
   12f68:	e5932000 	ldr	r2, [r3]
   12f6c:	e51b3008 	ldr	r3, [fp, #-8]
   12f70:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   12f74:	e59f301c 	ldr	r3, [pc, #28]	; 12f98 <vTaskSetTimeOutState+0x44>
   12f78:	e5932000 	ldr	r2, [r3]
   12f7c:	e51b3008 	ldr	r3, [fp, #-8]
   12f80:	e5832004 	str	r2, [r3, #4]
}
   12f84:	e320f000 	nop	{0}
   12f88:	e28bd000 	add	sp, fp, #0
   12f8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12f90:	e12fff1e 	bx	lr
   12f94:	000148ec 	andeq	r4, r1, ip, ror #17
   12f98:	000148d0 	ldrdeq	r4, [r1], -r0

00012f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   12f9c:	e92d4800 	push	{fp, lr}
   12fa0:	e28db004 	add	fp, sp, #4
   12fa4:	e24dd010 	sub	sp, sp, #16
   12fa8:	e50b0010 	str	r0, [fp, #-16]
   12fac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   12fb0:	ebfff562 	bl	10540 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   12fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12fb8:	e5933000 	ldr	r3, [r3]
   12fbc:	e3730001 	cmn	r3, #1
   12fc0:	1a000002 	bne	12fd0 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   12fc4:	e3a03000 	mov	r3, #0
   12fc8:	e50b3008 	str	r3, [fp, #-8]
   12fcc:	ea000028 	b	13074 <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   12fd0:	e51b3010 	ldr	r3, [fp, #-16]
   12fd4:	e5932000 	ldr	r2, [r3]
   12fd8:	e59f30a8 	ldr	r3, [pc, #168]	; 13088 <xTaskCheckForTimeOut+0xec>
   12fdc:	e5933000 	ldr	r3, [r3]
   12fe0:	e1520003 	cmp	r2, r3
   12fe4:	0a000008 	beq	1300c <xTaskCheckForTimeOut+0x70>
   12fe8:	e51b3010 	ldr	r3, [fp, #-16]
   12fec:	e5932004 	ldr	r2, [r3, #4]
   12ff0:	e59f3094 	ldr	r3, [pc, #148]	; 1308c <xTaskCheckForTimeOut+0xf0>
   12ff4:	e5933000 	ldr	r3, [r3]
   12ff8:	e1520003 	cmp	r2, r3
   12ffc:	8a000002 	bhi	1300c <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   13000:	e3a03001 	mov	r3, #1
   13004:	e50b3008 	str	r3, [fp, #-8]
   13008:	ea000019 	b	13074 <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   1300c:	e59f3078 	ldr	r3, [pc, #120]	; 1308c <xTaskCheckForTimeOut+0xf0>
   13010:	e5932000 	ldr	r2, [r3]
   13014:	e51b3010 	ldr	r3, [fp, #-16]
   13018:	e5933004 	ldr	r3, [r3, #4]
   1301c:	e0422003 	sub	r2, r2, r3
   13020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13024:	e5933000 	ldr	r3, [r3]
   13028:	e1520003 	cmp	r2, r3
   1302c:	2a00000e 	bcs	1306c <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   13030:	e59f3054 	ldr	r3, [pc, #84]	; 1308c <xTaskCheckForTimeOut+0xf0>
   13034:	e5932000 	ldr	r2, [r3]
   13038:	e51b3010 	ldr	r3, [fp, #-16]
   1303c:	e5933004 	ldr	r3, [r3, #4]
   13040:	e0423003 	sub	r3, r2, r3
   13044:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   13048:	e5922000 	ldr	r2, [r2]
   1304c:	e0422003 	sub	r2, r2, r3
   13050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13054:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   13058:	e51b0010 	ldr	r0, [fp, #-16]
   1305c:	ebffffbc 	bl	12f54 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   13060:	e3a03000 	mov	r3, #0
   13064:	e50b3008 	str	r3, [fp, #-8]
   13068:	ea000001 	b	13074 <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   1306c:	e3a03001 	mov	r3, #1
   13070:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   13074:	ebfff542 	bl	10584 <vPortExitCritical>

	return xReturn;
   13078:	e51b3008 	ldr	r3, [fp, #-8]
}
   1307c:	e1a00003 	mov	r0, r3
   13080:	e24bd004 	sub	sp, fp, #4
   13084:	e8bd8800 	pop	{fp, pc}
   13088:	000148ec 	andeq	r4, r1, ip, ror #17
   1308c:	000148d0 	ldrdeq	r4, [r1], -r0

00013090 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13090:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13094:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   13098:	e59f3014 	ldr	r3, [pc, #20]	; 130b4 <vTaskMissedYield+0x24>
   1309c:	e3a02001 	mov	r2, #1
   130a0:	e5832000 	str	r2, [r3]
}
   130a4:	e320f000 	nop	{0}
   130a8:	e28bd000 	add	sp, fp, #0
   130ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   130b0:	e12fff1e 	bx	lr
   130b4:	000148e8 	andeq	r4, r1, r8, ror #17

000130b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   130b8:	e92d4800 	push	{fp, lr}
   130bc:	e28db004 	add	fp, sp, #4
   130c0:	e24dd008 	sub	sp, sp, #8
   130c4:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   130c8:	eb000066 	bl	13268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   130cc:	e59f3010 	ldr	r3, [pc, #16]	; 130e4 <prvIdleTask+0x2c>
   130d0:	e5933000 	ldr	r3, [r3]
   130d4:	e3530001 	cmp	r3, #1
   130d8:	9afffffa 	bls	130c8 <prvIdleTask+0x10>
			{
				taskYIELD();
   130dc:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   130e0:	eafffff8 	b	130c8 <prvIdleTask+0x10>
   130e4:	000147f8 	strdeq	r4, [r1], -r8

000130e8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   130e8:	e92d4800 	push	{fp, lr}
   130ec:	e28db004 	add	fp, sp, #4
   130f0:	e24dd010 	sub	sp, sp, #16
   130f4:	e50b0008 	str	r0, [fp, #-8]
   130f8:	e50b100c 	str	r1, [fp, #-12]
   130fc:	e50b2010 	str	r2, [fp, #-16]
   13100:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   13104:	e51b3008 	ldr	r3, [fp, #-8]
   13108:	e2833034 	add	r3, r3, #52	; 0x34
   1310c:	e3a02010 	mov	r2, #16
   13110:	e51b100c 	ldr	r1, [fp, #-12]
   13114:	e1a00003 	mov	r0, r3
   13118:	eb000558 	bl	14680 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   1311c:	e51b3008 	ldr	r3, [fp, #-8]
   13120:	e3a02000 	mov	r2, #0
   13124:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   13128:	e51b3010 	ldr	r3, [fp, #-16]
   1312c:	e3530004 	cmp	r3, #4
   13130:	9a000001 	bls	1313c <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   13134:	e3a03004 	mov	r3, #4
   13138:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   1313c:	e51b3008 	ldr	r3, [fp, #-8]
   13140:	e51b2010 	ldr	r2, [fp, #-16]
   13144:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   13148:	e51b3008 	ldr	r3, [fp, #-8]
   1314c:	e2833004 	add	r3, r3, #4
   13150:	e1a00003 	mov	r0, r3
   13154:	ebfff718 	bl	10dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   13158:	e51b3008 	ldr	r3, [fp, #-8]
   1315c:	e2833018 	add	r3, r3, #24
   13160:	e1a00003 	mov	r0, r3
   13164:	ebfff714 	bl	10dbc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   13168:	e51b3008 	ldr	r3, [fp, #-8]
   1316c:	e51b2008 	ldr	r2, [fp, #-8]
   13170:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   13174:	e51b3010 	ldr	r3, [fp, #-16]
   13178:	e2632005 	rsb	r2, r3, #5
   1317c:	e51b3008 	ldr	r3, [fp, #-8]
   13180:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   13184:	e51b3008 	ldr	r3, [fp, #-8]
   13188:	e51b2008 	ldr	r2, [fp, #-8]
   1318c:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   13190:	e51b3008 	ldr	r3, [fp, #-8]
   13194:	e3a02000 	mov	r2, #0
   13198:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   1319c:	e320f000 	nop	{0}
   131a0:	e24bd004 	sub	sp, fp, #4
   131a4:	e8bd8800 	pop	{fp, pc}

000131a8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   131a8:	e92d4800 	push	{fp, lr}
   131ac:	e28db004 	add	fp, sp, #4
   131b0:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131b4:	e3a03000 	mov	r3, #0
   131b8:	e50b3008 	str	r3, [fp, #-8]
   131bc:	ea00000b 	b	131f0 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   131c0:	e51b2008 	ldr	r2, [fp, #-8]
   131c4:	e1a03002 	mov	r3, r2
   131c8:	e1a03103 	lsl	r3, r3, #2
   131cc:	e0833002 	add	r3, r3, r2
   131d0:	e1a03103 	lsl	r3, r3, #2
   131d4:	e59f206c 	ldr	r2, [pc, #108]	; 13248 <prvInitialiseTaskLists+0xa0>
   131d8:	e0833002 	add	r3, r3, r2
   131dc:	e1a00003 	mov	r0, r3
   131e0:	ebfff6db 	bl	10d54 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131e4:	e51b3008 	ldr	r3, [fp, #-8]
   131e8:	e2833001 	add	r3, r3, #1
   131ec:	e50b3008 	str	r3, [fp, #-8]
   131f0:	e51b3008 	ldr	r3, [fp, #-8]
   131f4:	e3530004 	cmp	r3, #4
   131f8:	9afffff0 	bls	131c0 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   131fc:	e59f0048 	ldr	r0, [pc, #72]	; 1324c <prvInitialiseTaskLists+0xa4>
   13200:	ebfff6d3 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   13204:	e59f0044 	ldr	r0, [pc, #68]	; 13250 <prvInitialiseTaskLists+0xa8>
   13208:	ebfff6d1 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   1320c:	e59f0040 	ldr	r0, [pc, #64]	; 13254 <prvInitialiseTaskLists+0xac>
   13210:	ebfff6cf 	bl	10d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   13214:	e59f003c 	ldr	r0, [pc, #60]	; 13258 <prvInitialiseTaskLists+0xb0>
   13218:	ebfff6cd 	bl	10d54 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   1321c:	e59f0038 	ldr	r0, [pc, #56]	; 1325c <prvInitialiseTaskLists+0xb4>
   13220:	ebfff6cb 	bl	10d54 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   13224:	e59f3034 	ldr	r3, [pc, #52]	; 13260 <prvInitialiseTaskLists+0xb8>
   13228:	e59f201c 	ldr	r2, [pc, #28]	; 1324c <prvInitialiseTaskLists+0xa4>
   1322c:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   13230:	e59f302c 	ldr	r3, [pc, #44]	; 13264 <prvInitialiseTaskLists+0xbc>
   13234:	e59f2014 	ldr	r2, [pc, #20]	; 13250 <prvInitialiseTaskLists+0xa8>
   13238:	e5832000 	str	r2, [r3]
}
   1323c:	e320f000 	nop	{0}
   13240:	e24bd004 	sub	sp, fp, #4
   13244:	e8bd8800 	pop	{fp, pc}
   13248:	000147f8 	strdeq	r4, [r1], -r8
   1324c:	0001485c 	andeq	r4, r1, ip, asr r8
   13250:	00014870 	andeq	r4, r1, r0, ror r8
   13254:	0001488c 	andeq	r4, r1, ip, lsl #17
   13258:	000148a0 	andeq	r4, r1, r0, lsr #17
   1325c:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   13260:	00014884 	andeq	r4, r1, r4, lsl #17
   13264:	00014888 	andeq	r4, r1, r8, lsl #17

00013268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   13268:	e92d4800 	push	{fp, lr}
   1326c:	e28db004 	add	fp, sp, #4
   13270:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13274:	e59f309c 	ldr	r3, [pc, #156]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   13278:	e5933000 	ldr	r3, [r3]
   1327c:	e3530000 	cmp	r3, #0
   13280:	0a000021 	beq	1330c <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   13284:	ebfffd16 	bl	126e4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   13288:	e59f308c 	ldr	r3, [pc, #140]	; 1331c <prvCheckTasksWaitingTermination+0xb4>
   1328c:	e5933000 	ldr	r3, [r3]
   13290:	e3530000 	cmp	r3, #0
   13294:	03a03001 	moveq	r3, #1
   13298:	13a03000 	movne	r3, #0
   1329c:	e6ef3073 	uxtb	r3, r3
   132a0:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   132a4:	ebfffd1a 	bl	12714 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   132a8:	e51b3008 	ldr	r3, [fp, #-8]
   132ac:	e3530000 	cmp	r3, #0
   132b0:	1a000015 	bne	1330c <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   132b4:	ebfff4a1 	bl	10540 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   132b8:	e59f305c 	ldr	r3, [pc, #92]	; 1331c <prvCheckTasksWaitingTermination+0xb4>
   132bc:	e593300c 	ldr	r3, [r3, #12]
   132c0:	e593300c 	ldr	r3, [r3, #12]
   132c4:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   132c8:	e51b300c 	ldr	r3, [fp, #-12]
   132cc:	e2833004 	add	r3, r3, #4
   132d0:	e1a00003 	mov	r0, r3
   132d4:	ebfff71f 	bl	10f58 <vListRemove>
					--uxCurrentNumberOfTasks;
   132d8:	e59f3040 	ldr	r3, [pc, #64]	; 13320 <prvCheckTasksWaitingTermination+0xb8>
   132dc:	e5933000 	ldr	r3, [r3]
   132e0:	e2433001 	sub	r3, r3, #1
   132e4:	e59f2034 	ldr	r2, [pc, #52]	; 13320 <prvCheckTasksWaitingTermination+0xb8>
   132e8:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   132ec:	e59f3024 	ldr	r3, [pc, #36]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   132f0:	e5933000 	ldr	r3, [r3]
   132f4:	e2433001 	sub	r3, r3, #1
   132f8:	e59f2018 	ldr	r2, [pc, #24]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   132fc:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   13300:	ebfff49f 	bl	10584 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   13304:	e51b000c 	ldr	r0, [fp, #-12]
   13308:	eb00005f 	bl	1348c <prvDeleteTCB>
			}
		}
	}
	#endif
}
   1330c:	e320f000 	nop	{0}
   13310:	e24bd004 	sub	sp, fp, #4
   13314:	e8bd8800 	pop	{fp, pc}
   13318:	000148b4 			; <UNDEFINED> instruction: 0x000148b4
   1331c:	000148a0 	andeq	r4, r1, r0, lsr #17
   13320:	000148cc 	andeq	r4, r1, ip, asr #17

00013324 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   13324:	e92d4800 	push	{fp, lr}
   13328:	e28db004 	add	fp, sp, #4
   1332c:	e24dd008 	sub	sp, sp, #8
   13330:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   13334:	e59f308c 	ldr	r3, [pc, #140]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13338:	e5933000 	ldr	r3, [r3]
   1333c:	e51b2008 	ldr	r2, [fp, #-8]
   13340:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   13344:	e59f3080 	ldr	r3, [pc, #128]	; 133cc <prvAddCurrentTaskToDelayedList+0xa8>
   13348:	e5933000 	ldr	r3, [r3]
   1334c:	e51b2008 	ldr	r2, [fp, #-8]
   13350:	e1520003 	cmp	r2, r3
   13354:	2a000008 	bcs	1337c <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13358:	e59f3070 	ldr	r3, [pc, #112]	; 133d0 <prvAddCurrentTaskToDelayedList+0xac>
   1335c:	e5932000 	ldr	r2, [r3]
   13360:	e59f3060 	ldr	r3, [pc, #96]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13364:	e5933000 	ldr	r3, [r3]
   13368:	e2833004 	add	r3, r3, #4
   1336c:	e1a01003 	mov	r1, r3
   13370:	e1a00002 	mov	r0, r2
   13374:	ebfff6c1 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   13378:	ea00000f 	b	133bc <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   1337c:	e59f3050 	ldr	r3, [pc, #80]	; 133d4 <prvAddCurrentTaskToDelayedList+0xb0>
   13380:	e5932000 	ldr	r2, [r3]
   13384:	e59f303c 	ldr	r3, [pc, #60]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13388:	e5933000 	ldr	r3, [r3]
   1338c:	e2833004 	add	r3, r3, #4
   13390:	e1a01003 	mov	r1, r3
   13394:	e1a00002 	mov	r0, r2
   13398:	ebfff6b8 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   1339c:	e59f3034 	ldr	r3, [pc, #52]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb4>
   133a0:	e5933000 	ldr	r3, [r3]
   133a4:	e51b2008 	ldr	r2, [fp, #-8]
   133a8:	e1520003 	cmp	r2, r3
   133ac:	2a000002 	bcs	133bc <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   133b0:	e59f2020 	ldr	r2, [pc, #32]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb4>
   133b4:	e51b3008 	ldr	r3, [fp, #-8]
   133b8:	e5823000 	str	r3, [r2]
}
   133bc:	e320f000 	nop	{0}
   133c0:	e24bd004 	sub	sp, fp, #4
   133c4:	e8bd8800 	pop	{fp, pc}
   133c8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   133cc:	000148d0 	ldrdeq	r4, [r1], -r0
   133d0:	00014888 	andeq	r4, r1, r8, lsl #17
   133d4:	00014884 	andeq	r4, r1, r4, lsl #17
   133d8:	00014760 	andeq	r4, r1, r0, ror #14

000133dc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   133dc:	e92d4800 	push	{fp, lr}
   133e0:	e28db004 	add	fp, sp, #4
   133e4:	e24dd010 	sub	sp, sp, #16
   133e8:	e1a03000 	mov	r3, r0
   133ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   133f0:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   133f4:	e3a00048 	mov	r0, #72	; 0x48
   133f8:	eb00028e 	bl	13e38 <pvPortMalloc>
   133fc:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   13400:	e51b3008 	ldr	r3, [fp, #-8]
   13404:	e3530000 	cmp	r3, #0
   13408:	0a00001b 	beq	1347c <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   1340c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13410:	e3530000 	cmp	r3, #0
   13414:	1a000005 	bne	13430 <prvAllocateTCBAndStack+0x54>
   13418:	e15b30be 	ldrh	r3, [fp, #-14]
   1341c:	e1a03103 	lsl	r3, r3, #2
   13420:	e1a00003 	mov	r0, r3
   13424:	eb000283 	bl	13e38 <pvPortMalloc>
   13428:	e1a03000 	mov	r3, r0
   1342c:	ea000000 	b	13434 <prvAllocateTCBAndStack+0x58>
   13430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13434:	e51b2008 	ldr	r2, [fp, #-8]
   13438:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   1343c:	e51b3008 	ldr	r3, [fp, #-8]
   13440:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13444:	e3530000 	cmp	r3, #0
   13448:	1a000004 	bne	13460 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   1344c:	e51b0008 	ldr	r0, [fp, #-8]
   13450:	eb0002ea 	bl	14000 <vPortFree>
			pxNewTCB = NULL;
   13454:	e3a03000 	mov	r3, #0
   13458:	e50b3008 	str	r3, [fp, #-8]
   1345c:	ea000006 	b	1347c <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   13460:	e51b3008 	ldr	r3, [fp, #-8]
   13464:	e5930030 	ldr	r0, [r3, #48]	; 0x30
   13468:	e15b30be 	ldrh	r3, [fp, #-14]
   1346c:	e1a03103 	lsl	r3, r3, #2
   13470:	e1a02003 	mov	r2, r3
   13474:	e3a010a5 	mov	r1, #165	; 0xa5
   13478:	eb00043b 	bl	1456c <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   1347c:	e51b3008 	ldr	r3, [fp, #-8]
}
   13480:	e1a00003 	mov	r0, r3
   13484:	e24bd004 	sub	sp, fp, #4
   13488:	e8bd8800 	pop	{fp, pc}

0001348c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   1348c:	e92d4800 	push	{fp, lr}
   13490:	e28db004 	add	fp, sp, #4
   13494:	e24dd008 	sub	sp, sp, #8
   13498:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   1349c:	e51b3008 	ldr	r3, [fp, #-8]
   134a0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   134a4:	e1a00003 	mov	r0, r3
   134a8:	eb0002d4 	bl	14000 <vPortFree>
		vPortFree( pxTCB );
   134ac:	e51b0008 	ldr	r0, [fp, #-8]
   134b0:	eb0002d2 	bl	14000 <vPortFree>
	}
   134b4:	e320f000 	nop	{0}
   134b8:	e24bd004 	sub	sp, fp, #4
   134bc:	e8bd8800 	pop	{fp, pc}

000134c0 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   134c0:	e92d4800 	push	{fp, lr}
   134c4:	e28db004 	add	fp, sp, #4
   134c8:	e24dd010 	sub	sp, sp, #16
   134cc:	e50b0010 	str	r0, [fp, #-16]
   134d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while (pending)
   134d4:	ea00001e 	b	13554 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   134d8:	e51b3010 	ldr	r3, [fp, #-16]
   134dc:	e16f3f13 	clz	r3, r3
   134e0:	e263301f 	rsb	r3, r3, #31
   134e4:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   134e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   134ec:	e51b3008 	ldr	r3, [fp, #-8]
   134f0:	e0823003 	add	r3, r2, r3
   134f4:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   134f8:	e59f206c 	ldr	r2, [pc, #108]	; 1356c <handleRange+0xac>
   134fc:	e51b300c 	ldr	r3, [fp, #-12]
   13500:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   13504:	e3530000 	cmp	r3, #0
   13508:	0a00000a 	beq	13538 <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   1350c:	e59f2058 	ldr	r2, [pc, #88]	; 1356c <handleRange+0xac>
   13510:	e51b300c 	ldr	r3, [fp, #-12]
   13514:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   13518:	e59f104c 	ldr	r1, [pc, #76]	; 1356c <handleRange+0xac>
   1351c:	e51b300c 	ldr	r3, [fp, #-12]
   13520:	e1a03183 	lsl	r3, r3, #3
   13524:	e0813003 	add	r3, r1, r3
   13528:	e5933004 	ldr	r3, [r3, #4]
   1352c:	e1a01003 	mov	r1, r3
   13530:	e51b000c 	ldr	r0, [fp, #-12]
   13534:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   13538:	e3a02001 	mov	r2, #1
   1353c:	e51b3008 	ldr	r3, [fp, #-8]
   13540:	e1a03312 	lsl	r3, r2, r3
   13544:	e1e03003 	mvn	r3, r3
   13548:	e51b2010 	ldr	r2, [fp, #-16]
   1354c:	e0033002 	and	r3, r3, r2
   13550:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   13554:	e51b3010 	ldr	r3, [fp, #-16]
   13558:	e3530000 	cmp	r3, #0
   1355c:	1affffdd 	bne	134d8 <handleRange+0x18>
	}
}
   13560:	e320f000 	nop	{0}
   13564:	e24bd004 	sub	sp, fp, #4
   13568:	e8bd8800 	pop	{fp, pc}
   1356c:	000148f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00013570 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   13570:	e92d4830 	push	{r4, r5, fp, lr}
   13574:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   13578:	e59f3088 	ldr	r3, [pc, #136]	; 13608 <irqHandler+0x98>
   1357c:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   13580:	e2043c01 	and	r3, r4, #256	; 0x100
   13584:	e3530000 	cmp	r3, #0
   13588:	0a000007 	beq	135ac <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   1358c:	e59f3074 	ldr	r3, [pc, #116]	; 13608 <irqHandler+0x98>
   13590:	e5932004 	ldr	r2, [r3, #4]
   13594:	e59f3070 	ldr	r3, [pc, #112]	; 1360c <irqHandler+0x9c>
   13598:	e5933000 	ldr	r3, [r3]
   1359c:	e0033002 	and	r3, r3, r2
   135a0:	e3a01000 	mov	r1, #0
   135a4:	e1a00003 	mov	r0, r3
   135a8:	ebffffc4 	bl	134c0 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   135ac:	e2043c02 	and	r3, r4, #512	; 0x200
   135b0:	e3530000 	cmp	r3, #0
   135b4:	0a000007 	beq	135d8 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   135b8:	e59f3048 	ldr	r3, [pc, #72]	; 13608 <irqHandler+0x98>
   135bc:	e5932008 	ldr	r2, [r3, #8]
   135c0:	e59f3044 	ldr	r3, [pc, #68]	; 1360c <irqHandler+0x9c>
   135c4:	e5933004 	ldr	r3, [r3, #4]
   135c8:	e0033002 	and	r3, r3, r2
   135cc:	e3a01020 	mov	r1, #32
   135d0:	e1a00003 	mov	r0, r3
   135d4:	ebffffb9 	bl	134c0 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   135d8:	e6ef3074 	uxtb	r3, r4
   135dc:	e3530000 	cmp	r3, #0
   135e0:	0a000006 	beq	13600 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   135e4:	e59f3020 	ldr	r3, [pc, #32]	; 1360c <irqHandler+0x9c>
   135e8:	e5933008 	ldr	r3, [r3, #8]
   135ec:	e0033004 	and	r3, r3, r4
   135f0:	e6ef3073 	uxtb	r3, r3
   135f4:	e3a01040 	mov	r1, #64	; 0x40
   135f8:	e1a00003 	mov	r0, r3
   135fc:	ebffffaf 	bl	134c0 <handleRange>
}
   13600:	e320f000 	nop	{0}
   13604:	e8bd8830 	pop	{r4, r5, fp, pc}
   13608:	2000b200 	andcs	fp, r0, r0, lsl #4
   1360c:	00014b34 	andeq	r4, r1, r4, lsr fp

00013610 <irqUnblock>:

void irqUnblock (void)
{
   13610:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13614:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   13618:	f1080080 	cpsie	i
}
   1361c:	e320f000 	nop	{0}
   13620:	e28bd000 	add	sp, fp, #0
   13624:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13628:	e12fff1e 	bx	lr

0001362c <irqBlock>:

void irqBlock (void)
{
   1362c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13630:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   13634:	f10c0080 	cpsid	i
}
   13638:	e320f000 	nop	{0}
   1363c:	e28bd000 	add	sp, fp, #0
   13640:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13644:	e12fff1e 	bx	lr

00013648 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   13648:	e92d4800 	push	{fp, lr}
   1364c:	e28db004 	add	fp, sp, #4
   13650:	e24dd010 	sub	sp, sp, #16
   13654:	e50b0008 	str	r0, [fp, #-8]
   13658:	e50b100c 	str	r1, [fp, #-12]
   1365c:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13660:	e51b3008 	ldr	r3, [fp, #-8]
   13664:	e3530047 	cmp	r3, #71	; 0x47
   13668:	8a00000b 	bhi	1369c <irqRegister+0x54>
		irqBlock();
   1366c:	ebffffee 	bl	1362c <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   13670:	e59f1030 	ldr	r1, [pc, #48]	; 136a8 <irqRegister+0x60>
   13674:	e51b3008 	ldr	r3, [fp, #-8]
   13678:	e51b200c 	ldr	r2, [fp, #-12]
   1367c:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   13680:	e59f2020 	ldr	r2, [pc, #32]	; 136a8 <irqRegister+0x60>
   13684:	e51b3008 	ldr	r3, [fp, #-8]
   13688:	e1a03183 	lsl	r3, r3, #3
   1368c:	e0823003 	add	r3, r2, r3
   13690:	e51b2010 	ldr	r2, [fp, #-16]
   13694:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   13698:	ebffffdc 	bl	13610 <irqUnblock>
	}
}
   1369c:	e320f000 	nop	{0}
   136a0:	e24bd004 	sub	sp, fp, #4
   136a4:	e8bd8800 	pop	{fp, pc}
   136a8:	000148f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000136ac <irqEnable>:

void irqEnable (const unsigned int irq)
{
   136ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   136b0:	e28db000 	add	fp, sp, #0
   136b4:	e24dd014 	sub	sp, sp, #20
   136b8:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   136bc:	e51b3010 	ldr	r3, [fp, #-16]
   136c0:	e203301f 	and	r3, r3, #31
   136c4:	e3a02001 	mov	r2, #1
   136c8:	e1a03312 	lsl	r3, r2, r3
   136cc:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   136d0:	e51b3010 	ldr	r3, [fp, #-16]
   136d4:	e353001f 	cmp	r3, #31
   136d8:	8a000009 	bhi	13704 <irqEnable+0x58>
		pRegs->Enable1 = mask;
   136dc:	e59f2094 	ldr	r2, [pc, #148]	; 13778 <irqEnable+0xcc>
   136e0:	e51b3008 	ldr	r3, [fp, #-8]
   136e4:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   136e8:	e59f308c 	ldr	r3, [pc, #140]	; 1377c <irqEnable+0xd0>
   136ec:	e5932000 	ldr	r2, [r3]
   136f0:	e51b3008 	ldr	r3, [fp, #-8]
   136f4:	e1823003 	orr	r3, r2, r3
   136f8:	e59f207c 	ldr	r2, [pc, #124]	; 1377c <irqEnable+0xd0>
   136fc:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   13700:	ea000018 	b	13768 <irqEnable+0xbc>
	else if (irq <= 63) {
   13704:	e51b3010 	ldr	r3, [fp, #-16]
   13708:	e353003f 	cmp	r3, #63	; 0x3f
   1370c:	8a000009 	bhi	13738 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   13710:	e59f2060 	ldr	r2, [pc, #96]	; 13778 <irqEnable+0xcc>
   13714:	e51b3008 	ldr	r3, [fp, #-8]
   13718:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   1371c:	e59f3058 	ldr	r3, [pc, #88]	; 1377c <irqEnable+0xd0>
   13720:	e5932004 	ldr	r2, [r3, #4]
   13724:	e51b3008 	ldr	r3, [fp, #-8]
   13728:	e1823003 	orr	r3, r2, r3
   1372c:	e59f2048 	ldr	r2, [pc, #72]	; 1377c <irqEnable+0xd0>
   13730:	e5823004 	str	r3, [r2, #4]
}
   13734:	ea00000b 	b	13768 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13738:	e51b3010 	ldr	r3, [fp, #-16]
   1373c:	e3530047 	cmp	r3, #71	; 0x47
   13740:	8a000008 	bhi	13768 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   13744:	e59f202c 	ldr	r2, [pc, #44]	; 13778 <irqEnable+0xcc>
   13748:	e51b3008 	ldr	r3, [fp, #-8]
   1374c:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   13750:	e59f3024 	ldr	r3, [pc, #36]	; 1377c <irqEnable+0xd0>
   13754:	e5932008 	ldr	r2, [r3, #8]
   13758:	e51b3008 	ldr	r3, [fp, #-8]
   1375c:	e1823003 	orr	r3, r2, r3
   13760:	e59f2014 	ldr	r2, [pc, #20]	; 1377c <irqEnable+0xd0>
   13764:	e5823008 	str	r3, [r2, #8]
}
   13768:	e320f000 	nop	{0}
   1376c:	e28bd000 	add	sp, fp, #0
   13770:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13774:	e12fff1e 	bx	lr
   13778:	2000b200 	andcs	fp, r0, r0, lsl #4
   1377c:	00014b34 	andeq	r4, r1, r4, lsr fp

00013780 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   13780:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13784:	e28db000 	add	fp, sp, #0
   13788:	e24dd014 	sub	sp, sp, #20
   1378c:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   13790:	e51b3010 	ldr	r3, [fp, #-16]
   13794:	e203301f 	and	r3, r3, #31
   13798:	e3a02001 	mov	r2, #1
   1379c:	e1a03312 	lsl	r3, r2, r3
   137a0:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   137a4:	e51b3010 	ldr	r3, [fp, #-16]
   137a8:	e353001f 	cmp	r3, #31
   137ac:	8a00000a 	bhi	137dc <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   137b0:	e59f20a0 	ldr	r2, [pc, #160]	; 13858 <irqDisable+0xd8>
   137b4:	e51b3008 	ldr	r3, [fp, #-8]
   137b8:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   137bc:	e59f3098 	ldr	r3, [pc, #152]	; 1385c <irqDisable+0xdc>
   137c0:	e5932000 	ldr	r2, [r3]
   137c4:	e51b3008 	ldr	r3, [fp, #-8]
   137c8:	e1e03003 	mvn	r3, r3
   137cc:	e0033002 	and	r3, r3, r2
   137d0:	e59f2084 	ldr	r2, [pc, #132]	; 1385c <irqDisable+0xdc>
   137d4:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   137d8:	ea00001a 	b	13848 <irqDisable+0xc8>
	else if (irq <= 63) {
   137dc:	e51b3010 	ldr	r3, [fp, #-16]
   137e0:	e353003f 	cmp	r3, #63	; 0x3f
   137e4:	8a00000a 	bhi	13814 <irqDisable+0x94>
		pRegs->Disable2 = mask;
   137e8:	e59f2068 	ldr	r2, [pc, #104]	; 13858 <irqDisable+0xd8>
   137ec:	e51b3008 	ldr	r3, [fp, #-8]
   137f0:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   137f4:	e59f3060 	ldr	r3, [pc, #96]	; 1385c <irqDisable+0xdc>
   137f8:	e5932004 	ldr	r2, [r3, #4]
   137fc:	e51b3008 	ldr	r3, [fp, #-8]
   13800:	e1e03003 	mvn	r3, r3
   13804:	e0033002 	and	r3, r3, r2
   13808:	e59f204c 	ldr	r2, [pc, #76]	; 1385c <irqDisable+0xdc>
   1380c:	e5823004 	str	r3, [r2, #4]
}
   13810:	ea00000c 	b	13848 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13814:	e51b3010 	ldr	r3, [fp, #-16]
   13818:	e3530047 	cmp	r3, #71	; 0x47
   1381c:	8a000009 	bhi	13848 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   13820:	e59f2030 	ldr	r2, [pc, #48]	; 13858 <irqDisable+0xd8>
   13824:	e51b3008 	ldr	r3, [fp, #-8]
   13828:	e5823024 	str	r3, [r2, #36]	; 0x24
		enabled[2] &= ~mask;
   1382c:	e59f3028 	ldr	r3, [pc, #40]	; 1385c <irqDisable+0xdc>
   13830:	e5932008 	ldr	r2, [r3, #8]
   13834:	e51b3008 	ldr	r3, [fp, #-8]
   13838:	e1e03003 	mvn	r3, r3
   1383c:	e0033002 	and	r3, r3, r2
   13840:	e59f2014 	ldr	r2, [pc, #20]	; 1385c <irqDisable+0xdc>
   13844:	e5823008 	str	r3, [r2, #8]
}
   13848:	e320f000 	nop	{0}
   1384c:	e28bd000 	add	sp, fp, #0
   13850:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13854:	e12fff1e 	bx	lr
   13858:	2000b200 	andcs	fp, r0, r0, lsl #4
   1385c:	00014b34 	andeq	r4, r1, r4, lsr fp

00013860 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   13860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13864:	e28db000 	add	fp, sp, #0
   13868:	e24dd01c 	sub	sp, sp, #28
   1386c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13870:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4

	int offset = pinNum / 10;
   13874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13878:	e59f20b4 	ldr	r2, [pc, #180]	; 13934 <SetGpioFunction+0xd4>
   1387c:	e0832392 	umull	r2, r3, r2, r3
   13880:	e1a031a3 	lsr	r3, r3, #3
   13884:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   13888:	e59f20a8 	ldr	r2, [pc, #168]	; 13938 <SetGpioFunction+0xd8>
   1388c:	e51b3008 	ldr	r3, [fp, #-8]
   13890:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   13894:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   13898:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1389c:	e59f3090 	ldr	r3, [pc, #144]	; 13934 <SetGpioFunction+0xd4>
   138a0:	e0832193 	umull	r2, r3, r3, r1
   138a4:	e1a021a3 	lsr	r2, r3, #3
   138a8:	e1a03002 	mov	r3, r2
   138ac:	e1a03103 	lsl	r3, r3, #2
   138b0:	e0833002 	add	r3, r3, r2
   138b4:	e1a03083 	lsl	r3, r3, #1
   138b8:	e0412003 	sub	r2, r1, r3
   138bc:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   138c0:	e51b2010 	ldr	r2, [fp, #-16]
   138c4:	e1a03002 	mov	r3, r2
   138c8:	e1a03083 	lsl	r3, r3, #1
   138cc:	e0833002 	add	r3, r3, r2
   138d0:	e3a02007 	mov	r2, #7
   138d4:	e1a03312 	lsl	r3, r2, r3
   138d8:	e1e03003 	mvn	r3, r3
   138dc:	e1a02003 	mov	r2, r3
   138e0:	e51b300c 	ldr	r3, [fp, #-12]
   138e4:	e0033002 	and	r3, r3, r2
   138e8:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   138ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   138f0:	e2031007 	and	r1, r3, #7
   138f4:	e51b2010 	ldr	r2, [fp, #-16]
   138f8:	e1a03002 	mov	r3, r2
   138fc:	e1a03083 	lsl	r3, r3, #1
   13900:	e0833002 	add	r3, r3, r2
   13904:	e1a03311 	lsl	r3, r1, r3
   13908:	e51b200c 	ldr	r2, [fp, #-12]
   1390c:	e1823003 	orr	r3, r2, r3
   13910:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   13914:	e59f101c 	ldr	r1, [pc, #28]	; 13938 <SetGpioFunction+0xd8>
   13918:	e51b3008 	ldr	r3, [fp, #-8]
   1391c:	e51b200c 	ldr	r2, [fp, #-12]
   13920:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13924:	e320f000 	nop	{0}
   13928:	e28bd000 	add	sp, fp, #0
   1392c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13930:	e12fff1e 	bx	lr
   13934:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   13938:	20200000 	eorcs	r0, r0, r0

0001393c <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   1393c:	e92d4800 	push	{fp, lr}
   13940:	e28db004 	add	fp, sp, #4
   13944:	e24dd008 	sub	sp, sp, #8
   13948:	e50b0008 	str	r0, [fp, #-8]
   1394c:	e1a03001 	mov	r3, r1
   13950:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   13954:	e55b3009 	ldrb	r3, [fp, #-9]
   13958:	e1a01003 	mov	r1, r3
   1395c:	e51b0008 	ldr	r0, [fp, #-8]
   13960:	ebffffbe 	bl	13860 <SetGpioFunction>
}
   13964:	e320f000 	nop	{0}
   13968:	e24bd004 	sub	sp, fp, #4
   1396c:	e8bd8800 	pop	{fp, pc}

00013970 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   13970:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13974:	e28db000 	add	fp, sp, #0
   13978:	e24dd014 	sub	sp, sp, #20
   1397c:	e50b0010 	str	r0, [fp, #-16]
   13980:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	unsigned long offset=pinNum/32;
   13984:	e51b3010 	ldr	r3, [fp, #-16]
   13988:	e1a032a3 	lsr	r3, r3, #5
   1398c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   13990:	e51b3010 	ldr	r3, [fp, #-16]
   13994:	e203301f 	and	r3, r3, #31
   13998:	e3a02001 	mov	r2, #1
   1399c:	e1a03312 	lsl	r3, r2, r3
   139a0:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   139a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139a8:	e3530000 	cmp	r3, #0
   139ac:	0a00000e 	beq	139ec <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   139b0:	e59f106c 	ldr	r1, [pc, #108]	; 13a24 <SetGpio+0xb4>
   139b4:	e59f2068 	ldr	r2, [pc, #104]	; 13a24 <SetGpio+0xb4>
   139b8:	e51b3008 	ldr	r3, [fp, #-8]
   139bc:	e2833006 	add	r3, r3, #6
   139c0:	e1a03103 	lsl	r3, r3, #2
   139c4:	e0823003 	add	r3, r2, r3
   139c8:	e5932004 	ldr	r2, [r3, #4]
   139cc:	e51b300c 	ldr	r3, [fp, #-12]
   139d0:	e1822003 	orr	r2, r2, r3
   139d4:	e51b3008 	ldr	r3, [fp, #-8]
   139d8:	e2833006 	add	r3, r3, #6
   139dc:	e1a03103 	lsl	r3, r3, #2
   139e0:	e0813003 	add	r3, r1, r3
   139e4:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   139e8:	ea000009 	b	13a14 <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   139ec:	e59f1030 	ldr	r1, [pc, #48]	; 13a24 <SetGpio+0xb4>
   139f0:	e59f202c 	ldr	r2, [pc, #44]	; 13a24 <SetGpio+0xb4>
   139f4:	e51b3008 	ldr	r3, [fp, #-8]
   139f8:	e283300a 	add	r3, r3, #10
   139fc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13a00:	e51b300c 	ldr	r3, [fp, #-12]
   13a04:	e1822003 	orr	r2, r2, r3
   13a08:	e51b3008 	ldr	r3, [fp, #-8]
   13a0c:	e283300a 	add	r3, r3, #10
   13a10:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13a14:	e320f000 	nop	{0}
   13a18:	e28bd000 	add	sp, fp, #0
   13a1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a20:	e12fff1e 	bx	lr
   13a24:	20200000 	eorcs	r0, r0, r0

00013a28 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   13a28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a2c:	e28db000 	add	fp, sp, #0
   13a30:	e24dd00c 	sub	sp, sp, #12
   13a34:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   13a38:	e59f2034 	ldr	r2, [pc, #52]	; 13a74 <ReadGpio+0x4c>
   13a3c:	e51b3008 	ldr	r3, [fp, #-8]
   13a40:	e1a032a3 	lsr	r3, r3, #5
   13a44:	e283300c 	add	r3, r3, #12
   13a48:	e1a03103 	lsl	r3, r3, #2
   13a4c:	e0823003 	add	r3, r2, r3
   13a50:	e5932004 	ldr	r2, [r3, #4]
   13a54:	e51b3008 	ldr	r3, [fp, #-8]
   13a58:	e203301f 	and	r3, r3, #31
   13a5c:	e1a03332 	lsr	r3, r2, r3
   13a60:	e2033001 	and	r3, r3, #1
}
   13a64:	e1a00003 	mov	r0, r3
   13a68:	e28bd000 	add	sp, fp, #0
   13a6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a70:	e12fff1e 	bx	lr
   13a74:	20200000 	eorcs	r0, r0, r0

00013a78 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13a78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a7c:	e28db000 	add	fp, sp, #0
   13a80:	e24dd014 	sub	sp, sp, #20
   13a84:	e50b0010 	str	r0, [fp, #-16]
   13a88:	e1a03001 	mov	r3, r1
   13a8c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=(1<<pinNum);
   13a90:	e3a02001 	mov	r2, #1
   13a94:	e51b3010 	ldr	r3, [fp, #-16]
   13a98:	e1a03312 	lsl	r3, r2, r3
   13a9c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13aa0:	e51b3010 	ldr	r3, [fp, #-16]
   13aa4:	e1a032a3 	lsr	r3, r3, #5
   13aa8:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13aac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13ab0:	e3530006 	cmp	r3, #6
   13ab4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13ab8:	ea000055 	b	13c14 <EnableGpioDetect+0x19c>
   13abc:	00013c10 	andeq	r3, r1, r0, lsl ip
   13ac0:	00013ad8 	ldrdeq	r3, [r1], -r8
   13ac4:	00013b14 	andeq	r3, r1, r4, lsl fp
   13ac8:	00013b40 	andeq	r3, r1, r0, asr #22
   13acc:	00013b7c 	andeq	r3, r1, ip, ror fp
   13ad0:	00013ba8 	andeq	r3, r1, r8, lsr #23
   13ad4:	00013be4 	andeq	r3, r1, r4, ror #23
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   13ad8:	e59f1144 	ldr	r1, [pc, #324]	; 13c24 <EnableGpioDetect+0x1ac>
   13adc:	e59f2140 	ldr	r2, [pc, #320]	; 13c24 <EnableGpioDetect+0x1ac>
   13ae0:	e51b300c 	ldr	r3, [fp, #-12]
   13ae4:	e2833012 	add	r3, r3, #18
   13ae8:	e1a03103 	lsl	r3, r3, #2
   13aec:	e0823003 	add	r3, r2, r3
   13af0:	e5932004 	ldr	r2, [r3, #4]
   13af4:	e51b3008 	ldr	r3, [fp, #-8]
   13af8:	e1822003 	orr	r2, r2, r3
   13afc:	e51b300c 	ldr	r3, [fp, #-12]
   13b00:	e2833012 	add	r3, r3, #18
   13b04:	e1a03103 	lsl	r3, r3, #2
   13b08:	e0813003 	add	r3, r1, r3
   13b0c:	e5832004 	str	r2, [r3, #4]
		break;
   13b10:	ea00003f 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   13b14:	e59f1108 	ldr	r1, [pc, #264]	; 13c24 <EnableGpioDetect+0x1ac>
   13b18:	e59f2104 	ldr	r2, [pc, #260]	; 13c24 <EnableGpioDetect+0x1ac>
   13b1c:	e51b300c 	ldr	r3, [fp, #-12]
   13b20:	e2833016 	add	r3, r3, #22
   13b24:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b28:	e51b3008 	ldr	r3, [fp, #-8]
   13b2c:	e1822003 	orr	r2, r2, r3
   13b30:	e51b300c 	ldr	r3, [fp, #-12]
   13b34:	e2833016 	add	r3, r3, #22
   13b38:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13b3c:	ea000034 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   13b40:	e59f10dc 	ldr	r1, [pc, #220]	; 13c24 <EnableGpioDetect+0x1ac>
   13b44:	e59f20d8 	ldr	r2, [pc, #216]	; 13c24 <EnableGpioDetect+0x1ac>
   13b48:	e51b300c 	ldr	r3, [fp, #-12]
   13b4c:	e2833018 	add	r3, r3, #24
   13b50:	e1a03103 	lsl	r3, r3, #2
   13b54:	e0823003 	add	r3, r2, r3
   13b58:	e5932004 	ldr	r2, [r3, #4]
   13b5c:	e51b3008 	ldr	r3, [fp, #-8]
   13b60:	e1822003 	orr	r2, r2, r3
   13b64:	e51b300c 	ldr	r3, [fp, #-12]
   13b68:	e2833018 	add	r3, r3, #24
   13b6c:	e1a03103 	lsl	r3, r3, #2
   13b70:	e0813003 	add	r3, r1, r3
   13b74:	e5832004 	str	r2, [r3, #4]
		break;
   13b78:	ea000025 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   13b7c:	e59f10a0 	ldr	r1, [pc, #160]	; 13c24 <EnableGpioDetect+0x1ac>
   13b80:	e59f209c 	ldr	r2, [pc, #156]	; 13c24 <EnableGpioDetect+0x1ac>
   13b84:	e51b300c 	ldr	r3, [fp, #-12]
   13b88:	e283301c 	add	r3, r3, #28
   13b8c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b90:	e51b3008 	ldr	r3, [fp, #-8]
   13b94:	e1822003 	orr	r2, r2, r3
   13b98:	e51b300c 	ldr	r3, [fp, #-12]
   13b9c:	e283301c 	add	r3, r3, #28
   13ba0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13ba4:	ea00001a 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   13ba8:	e59f1074 	ldr	r1, [pc, #116]	; 13c24 <EnableGpioDetect+0x1ac>
   13bac:	e59f2070 	ldr	r2, [pc, #112]	; 13c24 <EnableGpioDetect+0x1ac>
   13bb0:	e51b300c 	ldr	r3, [fp, #-12]
   13bb4:	e283301e 	add	r3, r3, #30
   13bb8:	e1a03103 	lsl	r3, r3, #2
   13bbc:	e0823003 	add	r3, r2, r3
   13bc0:	e5932004 	ldr	r2, [r3, #4]
   13bc4:	e51b3008 	ldr	r3, [fp, #-8]
   13bc8:	e1822003 	orr	r2, r2, r3
   13bcc:	e51b300c 	ldr	r3, [fp, #-12]
   13bd0:	e283301e 	add	r3, r3, #30
   13bd4:	e1a03103 	lsl	r3, r3, #2
   13bd8:	e0813003 	add	r3, r1, r3
   13bdc:	e5832004 	str	r2, [r3, #4]
		break;
   13be0:	ea00000b 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   13be4:	e59f1038 	ldr	r1, [pc, #56]	; 13c24 <EnableGpioDetect+0x1ac>
   13be8:	e59f2034 	ldr	r2, [pc, #52]	; 13c24 <EnableGpioDetect+0x1ac>
   13bec:	e51b300c 	ldr	r3, [fp, #-12]
   13bf0:	e2833022 	add	r3, r3, #34	; 0x22
   13bf4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13bf8:	e51b3008 	ldr	r3, [fp, #-8]
   13bfc:	e1822003 	orr	r2, r2, r3
   13c00:	e51b300c 	ldr	r3, [fp, #-12]
   13c04:	e2833022 	add	r3, r3, #34	; 0x22
   13c08:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13c0c:	ea000000 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   13c10:	e320f000 	nop	{0}
	}
}
   13c14:	e320f000 	nop	{0}
   13c18:	e28bd000 	add	sp, fp, #0
   13c1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13c20:	e12fff1e 	bx	lr
   13c24:	20200000 	eorcs	r0, r0, r0

00013c28 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13c2c:	e28db000 	add	fp, sp, #0
   13c30:	e24dd014 	sub	sp, sp, #20
   13c34:	e50b0010 	str	r0, [fp, #-16]
   13c38:	e1a03001 	mov	r3, r1
   13c3c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   13c40:	e51b3010 	ldr	r3, [fp, #-16]
   13c44:	e203301f 	and	r3, r3, #31
   13c48:	e3a02001 	mov	r2, #1
   13c4c:	e1a03312 	lsl	r3, r2, r3
   13c50:	e1e03003 	mvn	r3, r3
   13c54:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13c58:	e51b3010 	ldr	r3, [fp, #-16]
   13c5c:	e1a032a3 	lsr	r3, r3, #5
   13c60:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13c64:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13c68:	e3530006 	cmp	r3, #6
   13c6c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13c70:	ea000055 	b	13dcc <DisableGpioDetect+0x1a4>
   13c74:	00013dc8 	andeq	r3, r1, r8, asr #27
   13c78:	00013c90 	muleq	r1, r0, ip
   13c7c:	00013ccc 	andeq	r3, r1, ip, asr #25
   13c80:	00013cf8 	strdeq	r3, [r1], -r8
   13c84:	00013d34 	andeq	r3, r1, r4, lsr sp
   13c88:	00013d60 	andeq	r3, r1, r0, ror #26
   13c8c:	00013d9c 	muleq	r1, ip, sp
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   13c90:	e59f1144 	ldr	r1, [pc, #324]	; 13ddc <DisableGpioDetect+0x1b4>
   13c94:	e59f2140 	ldr	r2, [pc, #320]	; 13ddc <DisableGpioDetect+0x1b4>
   13c98:	e51b300c 	ldr	r3, [fp, #-12]
   13c9c:	e2833012 	add	r3, r3, #18
   13ca0:	e1a03103 	lsl	r3, r3, #2
   13ca4:	e0823003 	add	r3, r2, r3
   13ca8:	e5932004 	ldr	r2, [r3, #4]
   13cac:	e51b3008 	ldr	r3, [fp, #-8]
   13cb0:	e0022003 	and	r2, r2, r3
   13cb4:	e51b300c 	ldr	r3, [fp, #-12]
   13cb8:	e2833012 	add	r3, r3, #18
   13cbc:	e1a03103 	lsl	r3, r3, #2
   13cc0:	e0813003 	add	r3, r1, r3
   13cc4:	e5832004 	str	r2, [r3, #4]
		break;
   13cc8:	ea00003f 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   13ccc:	e59f1108 	ldr	r1, [pc, #264]	; 13ddc <DisableGpioDetect+0x1b4>
   13cd0:	e59f2104 	ldr	r2, [pc, #260]	; 13ddc <DisableGpioDetect+0x1b4>
   13cd4:	e51b300c 	ldr	r3, [fp, #-12]
   13cd8:	e2833016 	add	r3, r3, #22
   13cdc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13ce0:	e51b3008 	ldr	r3, [fp, #-8]
   13ce4:	e0022003 	and	r2, r2, r3
   13ce8:	e51b300c 	ldr	r3, [fp, #-12]
   13cec:	e2833016 	add	r3, r3, #22
   13cf0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13cf4:	ea000034 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   13cf8:	e59f10dc 	ldr	r1, [pc, #220]	; 13ddc <DisableGpioDetect+0x1b4>
   13cfc:	e59f20d8 	ldr	r2, [pc, #216]	; 13ddc <DisableGpioDetect+0x1b4>
   13d00:	e51b300c 	ldr	r3, [fp, #-12]
   13d04:	e2833018 	add	r3, r3, #24
   13d08:	e1a03103 	lsl	r3, r3, #2
   13d0c:	e0823003 	add	r3, r2, r3
   13d10:	e5932004 	ldr	r2, [r3, #4]
   13d14:	e51b3008 	ldr	r3, [fp, #-8]
   13d18:	e0022003 	and	r2, r2, r3
   13d1c:	e51b300c 	ldr	r3, [fp, #-12]
   13d20:	e2833018 	add	r3, r3, #24
   13d24:	e1a03103 	lsl	r3, r3, #2
   13d28:	e0813003 	add	r3, r1, r3
   13d2c:	e5832004 	str	r2, [r3, #4]
		break;
   13d30:	ea000025 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   13d34:	e59f10a0 	ldr	r1, [pc, #160]	; 13ddc <DisableGpioDetect+0x1b4>
   13d38:	e59f209c 	ldr	r2, [pc, #156]	; 13ddc <DisableGpioDetect+0x1b4>
   13d3c:	e51b300c 	ldr	r3, [fp, #-12]
   13d40:	e283301c 	add	r3, r3, #28
   13d44:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13d48:	e51b3008 	ldr	r3, [fp, #-8]
   13d4c:	e0022003 	and	r2, r2, r3
   13d50:	e51b300c 	ldr	r3, [fp, #-12]
   13d54:	e283301c 	add	r3, r3, #28
   13d58:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13d5c:	ea00001a 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   13d60:	e59f1074 	ldr	r1, [pc, #116]	; 13ddc <DisableGpioDetect+0x1b4>
   13d64:	e59f2070 	ldr	r2, [pc, #112]	; 13ddc <DisableGpioDetect+0x1b4>
   13d68:	e51b300c 	ldr	r3, [fp, #-12]
   13d6c:	e283301e 	add	r3, r3, #30
   13d70:	e1a03103 	lsl	r3, r3, #2
   13d74:	e0823003 	add	r3, r2, r3
   13d78:	e5932004 	ldr	r2, [r3, #4]
   13d7c:	e51b3008 	ldr	r3, [fp, #-8]
   13d80:	e0022003 	and	r2, r2, r3
   13d84:	e51b300c 	ldr	r3, [fp, #-12]
   13d88:	e283301e 	add	r3, r3, #30
   13d8c:	e1a03103 	lsl	r3, r3, #2
   13d90:	e0813003 	add	r3, r1, r3
   13d94:	e5832004 	str	r2, [r3, #4]
		break;
   13d98:	ea00000b 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   13d9c:	e59f1038 	ldr	r1, [pc, #56]	; 13ddc <DisableGpioDetect+0x1b4>
   13da0:	e59f2034 	ldr	r2, [pc, #52]	; 13ddc <DisableGpioDetect+0x1b4>
   13da4:	e51b300c 	ldr	r3, [fp, #-12]
   13da8:	e2833022 	add	r3, r3, #34	; 0x22
   13dac:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13db0:	e51b3008 	ldr	r3, [fp, #-8]
   13db4:	e0022003 	and	r2, r2, r3
   13db8:	e51b300c 	ldr	r3, [fp, #-12]
   13dbc:	e2833022 	add	r3, r3, #34	; 0x22
   13dc0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13dc4:	ea000000 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   13dc8:	e320f000 	nop	{0}
	}
}
   13dcc:	e320f000 	nop	{0}
   13dd0:	e28bd000 	add	sp, fp, #0
   13dd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13dd8:	e12fff1e 	bx	lr
   13ddc:	20200000 	eorcs	r0, r0, r0

00013de0 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   13de0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13de4:	e28db000 	add	fp, sp, #0
   13de8:	e24dd014 	sub	sp, sp, #20
   13dec:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   13df0:	e51b3010 	ldr	r3, [fp, #-16]
   13df4:	e203301f 	and	r3, r3, #31
   13df8:	e3a02001 	mov	r2, #1
   13dfc:	e1a03312 	lsl	r3, r2, r3
   13e00:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13e04:	e51b3010 	ldr	r3, [fp, #-16]
   13e08:	e1a032a3 	lsr	r3, r3, #5
   13e0c:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   13e10:	e59f101c 	ldr	r1, [pc, #28]	; 13e34 <ClearGpioInterrupt+0x54>
   13e14:	e51b300c 	ldr	r3, [fp, #-12]
   13e18:	e2833010 	add	r3, r3, #16
   13e1c:	e51b2008 	ldr	r2, [fp, #-8]
   13e20:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13e24:	e320f000 	nop	{0}
   13e28:	e28bd000 	add	sp, fp, #0
   13e2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e30:	e12fff1e 	bx	lr
   13e34:	20200000 	eorcs	r0, r0, r0

00013e38 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   13e38:	e92d4800 	push	{fp, lr}
   13e3c:	e28db004 	add	fp, sp, #4
   13e40:	e24dd018 	sub	sp, sp, #24
   13e44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   13e48:	e3a03000 	mov	r3, #0
   13e4c:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   13e50:	ebfffa23 	bl	126e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   13e54:	e59f3194 	ldr	r3, [pc, #404]	; 13ff0 <pvPortMalloc+0x1b8>
   13e58:	e5933000 	ldr	r3, [r3]
   13e5c:	e3530000 	cmp	r3, #0
   13e60:	1a000000 	bne	13e68 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   13e64:	eb000093 	bl	140b8 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   13e68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e6c:	e3530000 	cmp	r3, #0
   13e70:	0a00000c 	beq	13ea8 <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   13e74:	e3a03010 	mov	r3, #16
   13e78:	e1a02003 	mov	r2, r3
   13e7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e80:	e0833002 	add	r3, r3, r2
   13e84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   13e88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e8c:	e2033007 	and	r3, r3, #7
   13e90:	e3530000 	cmp	r3, #0
   13e94:	0a000003 	beq	13ea8 <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   13e98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e9c:	e3c33007 	bic	r3, r3, #7
   13ea0:	e2833008 	add	r3, r3, #8
   13ea4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   13ea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13eac:	e3530000 	cmp	r3, #0
   13eb0:	0a000043 	beq	13fc4 <pvPortMalloc+0x18c>
   13eb4:	e3a02a01 	mov	r2, #4096	; 0x1000
   13eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ebc:	e1530002 	cmp	r3, r2
   13ec0:	2a00003f 	bcs	13fc4 <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   13ec4:	e59f3128 	ldr	r3, [pc, #296]	; 13ff4 <pvPortMalloc+0x1bc>
   13ec8:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   13ecc:	e59f3120 	ldr	r3, [pc, #288]	; 13ff4 <pvPortMalloc+0x1bc>
   13ed0:	e5933000 	ldr	r3, [r3]
   13ed4:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13ed8:	ea000004 	b	13ef0 <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   13edc:	e51b3008 	ldr	r3, [fp, #-8]
   13ee0:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   13ee4:	e51b3008 	ldr	r3, [fp, #-8]
   13ee8:	e5933000 	ldr	r3, [r3]
   13eec:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13ef0:	e51b3008 	ldr	r3, [fp, #-8]
   13ef4:	e5932004 	ldr	r2, [r3, #4]
   13ef8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13efc:	e1520003 	cmp	r2, r3
   13f00:	2a000003 	bcs	13f14 <pvPortMalloc+0xdc>
   13f04:	e51b3008 	ldr	r3, [fp, #-8]
   13f08:	e5933000 	ldr	r3, [r3]
   13f0c:	e3530000 	cmp	r3, #0
   13f10:	1afffff1 	bne	13edc <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   13f14:	e59f30d4 	ldr	r3, [pc, #212]	; 13ff0 <pvPortMalloc+0x1b8>
   13f18:	e5933000 	ldr	r3, [r3]
   13f1c:	e51b2008 	ldr	r2, [fp, #-8]
   13f20:	e1520003 	cmp	r2, r3
   13f24:	0a000026 	beq	13fc4 <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   13f28:	e51b300c 	ldr	r3, [fp, #-12]
   13f2c:	e5933000 	ldr	r3, [r3]
   13f30:	e3a02010 	mov	r2, #16
   13f34:	e0833002 	add	r3, r3, r2
   13f38:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   13f3c:	e51b3008 	ldr	r3, [fp, #-8]
   13f40:	e5932000 	ldr	r2, [r3]
   13f44:	e51b300c 	ldr	r3, [fp, #-12]
   13f48:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   13f4c:	e51b3008 	ldr	r3, [fp, #-8]
   13f50:	e5932004 	ldr	r2, [r3, #4]
   13f54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f58:	e0423003 	sub	r3, r2, r3
   13f5c:	e3a02010 	mov	r2, #16
   13f60:	e1a02082 	lsl	r2, r2, #1
   13f64:	e1530002 	cmp	r3, r2
   13f68:	9a00000e 	bls	13fa8 <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   13f6c:	e51b2008 	ldr	r2, [fp, #-8]
   13f70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f74:	e0823003 	add	r3, r2, r3
   13f78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   13f7c:	e51b3008 	ldr	r3, [fp, #-8]
   13f80:	e5932004 	ldr	r2, [r3, #4]
   13f84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f88:	e0422003 	sub	r2, r2, r3
   13f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13f90:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   13f94:	e51b3008 	ldr	r3, [fp, #-8]
   13f98:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f9c:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   13fa0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   13fa4:	eb000079 	bl	14190 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   13fa8:	e59f3048 	ldr	r3, [pc, #72]	; 13ff8 <pvPortMalloc+0x1c0>
   13fac:	e5932000 	ldr	r2, [r3]
   13fb0:	e51b3008 	ldr	r3, [fp, #-8]
   13fb4:	e5933004 	ldr	r3, [r3, #4]
   13fb8:	e0423003 	sub	r3, r2, r3
   13fbc:	e59f2034 	ldr	r2, [pc, #52]	; 13ff8 <pvPortMalloc+0x1c0>
   13fc0:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   13fc4:	ebfff9d2 	bl	12714 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   13fc8:	e59f302c 	ldr	r3, [pc, #44]	; 13ffc <pvPortMalloc+0x1c4>
   13fcc:	e5932000 	ldr	r2, [r3]
   13fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fd4:	e0823003 	add	r3, r2, r3
   13fd8:	e59f201c 	ldr	r2, [pc, #28]	; 13ffc <pvPortMalloc+0x1c4>
   13fdc:	e5823000 	str	r3, [r2]

	return pvReturn;
   13fe0:	e51b3010 	ldr	r3, [fp, #-16]
}
   13fe4:	e1a00003 	mov	r0, r3
   13fe8:	e24bd004 	sub	sp, fp, #4
   13fec:	e8bd8800 	pop	{fp, pc}
   13ff0:	00015b48 	andeq	r5, r1, r8, asr #22
   13ff4:	00015b40 	andeq	r5, r1, r0, asr #22
   13ff8:	00014764 	andeq	r4, r1, r4, ror #14
   13ffc:	00015b4c 	andeq	r5, r1, ip, asr #22

00014000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   14000:	e92d4800 	push	{fp, lr}
   14004:	e28db004 	add	fp, sp, #4
   14008:	e24dd010 	sub	sp, sp, #16
   1400c:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   14010:	e51b3010 	ldr	r3, [fp, #-16]
   14014:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   14018:	e51b3010 	ldr	r3, [fp, #-16]
   1401c:	e3530000 	cmp	r3, #0
   14020:	0a000011 	beq	1406c <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   14024:	e3a03010 	mov	r3, #16
   14028:	e2633000 	rsb	r3, r3, #0
   1402c:	e51b2008 	ldr	r2, [fp, #-8]
   14030:	e0823003 	add	r3, r2, r3
   14034:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   14038:	e51b3008 	ldr	r3, [fp, #-8]
   1403c:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   14040:	ebfff9a7 	bl	126e4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   14044:	e51b300c 	ldr	r3, [fp, #-12]
   14048:	e5932004 	ldr	r2, [r3, #4]
   1404c:	e59f3024 	ldr	r3, [pc, #36]	; 14078 <vPortFree+0x78>
   14050:	e5933000 	ldr	r3, [r3]
   14054:	e0823003 	add	r3, r2, r3
   14058:	e59f2018 	ldr	r2, [pc, #24]	; 14078 <vPortFree+0x78>
   1405c:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   14060:	e51b000c 	ldr	r0, [fp, #-12]
   14064:	eb000049 	bl	14190 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   14068:	ebfff9a9 	bl	12714 <xTaskResumeAll>
	}
}
   1406c:	e320f000 	nop	{0}
   14070:	e24bd004 	sub	sp, fp, #4
   14074:	e8bd8800 	pop	{fp, pc}
   14078:	00014764 	andeq	r4, r1, r4, ror #14

0001407c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1407c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14080:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   14084:	e59f3010 	ldr	r3, [pc, #16]	; 1409c <xPortGetFreeHeapSize+0x20>
   14088:	e5933000 	ldr	r3, [r3]
}
   1408c:	e1a00003 	mov	r0, r3
   14090:	e28bd000 	add	sp, fp, #0
   14094:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14098:	e12fff1e 	bx	lr
   1409c:	00014764 	andeq	r4, r1, r4, ror #14

000140a0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   140a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140a4:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   140a8:	e320f000 	nop	{0}
   140ac:	e28bd000 	add	sp, fp, #0
   140b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140b4:	e12fff1e 	bx	lr

000140b8 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   140b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140bc:	e28db000 	add	fp, sp, #0
   140c0:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   140c4:	e59f30b4 	ldr	r3, [pc, #180]	; 14180 <prvHeapInit+0xc8>
   140c8:	e59f20b4 	ldr	r2, [pc, #180]	; 14184 <prvHeapInit+0xcc>
   140cc:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   140d0:	e59f30a8 	ldr	r3, [pc, #168]	; 14180 <prvHeapInit+0xc8>
   140d4:	e3a02000 	mov	r2, #0
   140d8:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   140dc:	e3a02a01 	mov	r2, #4096	; 0x1000
   140e0:	e59f309c 	ldr	r3, [pc, #156]	; 14184 <prvHeapInit+0xcc>
   140e4:	e0823003 	add	r3, r2, r3
   140e8:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   140ec:	e3a03010 	mov	r3, #16
   140f0:	e2633000 	rsb	r3, r3, #0
   140f4:	e51b2008 	ldr	r2, [fp, #-8]
   140f8:	e0823003 	add	r3, r2, r3
   140fc:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   14100:	e59f2080 	ldr	r2, [pc, #128]	; 14188 <prvHeapInit+0xd0>
   14104:	e51b3008 	ldr	r3, [fp, #-8]
   14108:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   1410c:	e59f3074 	ldr	r3, [pc, #116]	; 14188 <prvHeapInit+0xd0>
   14110:	e5933000 	ldr	r3, [r3]
   14114:	e3a02000 	mov	r2, #0
   14118:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   1411c:	e59f3064 	ldr	r3, [pc, #100]	; 14188 <prvHeapInit+0xd0>
   14120:	e5933000 	ldr	r3, [r3]
   14124:	e3a02000 	mov	r2, #0
   14128:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   1412c:	e59f3050 	ldr	r3, [pc, #80]	; 14184 <prvHeapInit+0xcc>
   14130:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   14134:	e3a03a01 	mov	r3, #4096	; 0x1000
   14138:	e3a02010 	mov	r2, #16
   1413c:	e0432002 	sub	r2, r3, r2
   14140:	e51b300c 	ldr	r3, [fp, #-12]
   14144:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   14148:	e59f3038 	ldr	r3, [pc, #56]	; 14188 <prvHeapInit+0xd0>
   1414c:	e5932000 	ldr	r2, [r3]
   14150:	e51b300c 	ldr	r3, [fp, #-12]
   14154:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   14158:	e59f302c 	ldr	r3, [pc, #44]	; 1418c <prvHeapInit+0xd4>
   1415c:	e5933000 	ldr	r3, [r3]
   14160:	e3a02010 	mov	r2, #16
   14164:	e0433002 	sub	r3, r3, r2
   14168:	e59f201c 	ldr	r2, [pc, #28]	; 1418c <prvHeapInit+0xd4>
   1416c:	e5823000 	str	r3, [r2]
}
   14170:	e320f000 	nop	{0}
   14174:	e28bd000 	add	sp, fp, #0
   14178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1417c:	e12fff1e 	bx	lr
   14180:	00015b40 	andeq	r5, r1, r0, asr #22
   14184:	00014b40 	andeq	r4, r1, r0, asr #22
   14188:	00015b48 	andeq	r5, r1, r8, asr #22
   1418c:	00014764 	andeq	r4, r1, r4, ror #14

00014190 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   14190:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14194:	e28db000 	add	fp, sp, #0
   14198:	e24dd014 	sub	sp, sp, #20
   1419c:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   141a0:	e59f3134 	ldr	r3, [pc, #308]	; 142dc <prvInsertBlockIntoFreeList+0x14c>
   141a4:	e50b3008 	str	r3, [fp, #-8]
   141a8:	ea000002 	b	141b8 <prvInsertBlockIntoFreeList+0x28>
   141ac:	e51b3008 	ldr	r3, [fp, #-8]
   141b0:	e5933000 	ldr	r3, [r3]
   141b4:	e50b3008 	str	r3, [fp, #-8]
   141b8:	e51b3008 	ldr	r3, [fp, #-8]
   141bc:	e5932000 	ldr	r2, [r3]
   141c0:	e51b3010 	ldr	r3, [fp, #-16]
   141c4:	e1520003 	cmp	r2, r3
   141c8:	3afffff7 	bcc	141ac <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   141cc:	e51b3008 	ldr	r3, [fp, #-8]
   141d0:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   141d4:	e51b3008 	ldr	r3, [fp, #-8]
   141d8:	e5933004 	ldr	r3, [r3, #4]
   141dc:	e51b200c 	ldr	r2, [fp, #-12]
   141e0:	e0822003 	add	r2, r2, r3
   141e4:	e51b3010 	ldr	r3, [fp, #-16]
   141e8:	e1520003 	cmp	r2, r3
   141ec:	1a000008 	bne	14214 <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   141f0:	e51b3008 	ldr	r3, [fp, #-8]
   141f4:	e5932004 	ldr	r2, [r3, #4]
   141f8:	e51b3010 	ldr	r3, [fp, #-16]
   141fc:	e5933004 	ldr	r3, [r3, #4]
   14200:	e0822003 	add	r2, r2, r3
   14204:	e51b3008 	ldr	r3, [fp, #-8]
   14208:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   1420c:	e51b3008 	ldr	r3, [fp, #-8]
   14210:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   14214:	e51b3010 	ldr	r3, [fp, #-16]
   14218:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   1421c:	e51b3010 	ldr	r3, [fp, #-16]
   14220:	e5933004 	ldr	r3, [r3, #4]
   14224:	e51b200c 	ldr	r2, [fp, #-12]
   14228:	e0822003 	add	r2, r2, r3
   1422c:	e51b3008 	ldr	r3, [fp, #-8]
   14230:	e5933000 	ldr	r3, [r3]
   14234:	e1520003 	cmp	r2, r3
   14238:	1a000018 	bne	142a0 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   1423c:	e51b3008 	ldr	r3, [fp, #-8]
   14240:	e5932000 	ldr	r2, [r3]
   14244:	e59f3094 	ldr	r3, [pc, #148]	; 142e0 <prvInsertBlockIntoFreeList+0x150>
   14248:	e5933000 	ldr	r3, [r3]
   1424c:	e1520003 	cmp	r2, r3
   14250:	0a00000d 	beq	1428c <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   14254:	e51b3010 	ldr	r3, [fp, #-16]
   14258:	e5932004 	ldr	r2, [r3, #4]
   1425c:	e51b3008 	ldr	r3, [fp, #-8]
   14260:	e5933000 	ldr	r3, [r3]
   14264:	e5933004 	ldr	r3, [r3, #4]
   14268:	e0822003 	add	r2, r2, r3
   1426c:	e51b3010 	ldr	r3, [fp, #-16]
   14270:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   14274:	e51b3008 	ldr	r3, [fp, #-8]
   14278:	e5933000 	ldr	r3, [r3]
   1427c:	e5932000 	ldr	r2, [r3]
   14280:	e51b3010 	ldr	r3, [fp, #-16]
   14284:	e5832000 	str	r2, [r3]
   14288:	ea000008 	b	142b0 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   1428c:	e59f304c 	ldr	r3, [pc, #76]	; 142e0 <prvInsertBlockIntoFreeList+0x150>
   14290:	e5932000 	ldr	r2, [r3]
   14294:	e51b3010 	ldr	r3, [fp, #-16]
   14298:	e5832000 	str	r2, [r3]
   1429c:	ea000003 	b	142b0 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   142a0:	e51b3008 	ldr	r3, [fp, #-8]
   142a4:	e5932000 	ldr	r2, [r3]
   142a8:	e51b3010 	ldr	r3, [fp, #-16]
   142ac:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   142b0:	e51b2008 	ldr	r2, [fp, #-8]
   142b4:	e51b3010 	ldr	r3, [fp, #-16]
   142b8:	e1520003 	cmp	r2, r3
   142bc:	0a000002 	beq	142cc <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   142c0:	e51b3008 	ldr	r3, [fp, #-8]
   142c4:	e51b2010 	ldr	r2, [fp, #-16]
   142c8:	e5832000 	str	r2, [r3]
	}
}
   142cc:	e320f000 	nop	{0}
   142d0:	e28bd000 	add	sp, fp, #0
   142d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   142d8:	e12fff1e 	bx	lr
   142dc:	00015b40 	andeq	r5, r1, r0, asr #22
   142e0:	00015b48 	andeq	r5, r1, r8, asr #22

000142e4 <undefined_instruction>:
   142e4:	eafffffe 	b	142e4 <undefined_instruction>

000142e8 <prefetch_abort>:
   142e8:	eafffffe 	b	142e8 <prefetch_abort>

000142ec <data_abort>:
   142ec:	eafffffe 	b	142ec <data_abort>

000142f0 <unused>:
   142f0:	eafffffe 	b	142f0 <unused>

000142f4 <fiq>:
   142f4:	eafffffe 	b	142f4 <fiq>

000142f8 <hang>:
   142f8:	eafffffe 	b	142f8 <hang>

000142fc <task1>:
static const uint8_t ucGatewayAddress[ 4 ] = { 10, 10, 10, 1 };

/* The following is the address of an OpenDNS server. */
static const uint8_t ucDNSServerAddress[ 4 ] = { 208, 67, 222, 222 };

void task1(void *pParam) {
   142fc:	e92d4800 	push	{fp, lr}
   14300:	e28db004 	add	fp, sp, #4
   14304:	e24dd010 	sub	sp, sp, #16
   14308:	e50b0010 	str	r0, [fp, #-16]
int i = 0;
   1430c:	e3a03000 	mov	r3, #0
   14310:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14314:	e51b3008 	ldr	r3, [fp, #-8]
   14318:	e2833001 	add	r3, r3, #1
   1431c:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   14320:	e3a00064 	mov	r0, #100	; 0x64
   14324:	ebfff733 	bl	11ff8 <vTaskDelay>
		SetGpio(16, 1);
   14328:	e3a01001 	mov	r1, #1
   1432c:	e3a00010 	mov	r0, #16
   14330:	ebfffd8e 	bl	13970 <SetGpio>
		vTaskDelay(100);
   14334:	e3a00064 	mov	r0, #100	; 0x64
   14338:	ebfff72e 	bl	11ff8 <vTaskDelay>
		i++;
   1433c:	eafffff4 	b	14314 <task1+0x18>

00014340 <task2>:
	}

}

void task2(void *pParam) {
   14340:	e92d4800 	push	{fp, lr}
   14344:	e28db004 	add	fp, sp, #4
   14348:	e24dd010 	sub	sp, sp, #16
   1434c:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   14350:	e3a03000 	mov	r3, #0
   14354:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14358:	e51b3008 	ldr	r3, [fp, #-8]
   1435c:	e2833001 	add	r3, r3, #1
   14360:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   14364:	e3a00064 	mov	r0, #100	; 0x64
   14368:	ebfff722 	bl	11ff8 <vTaskDelay>
		SetGpio(16, 0);
   1436c:	e3a01000 	mov	r1, #0
   14370:	e3a00010 	mov	r0, #16
   14374:	ebfffd7d 	bl	13970 <SetGpio>
		vTaskDelay(100);
   14378:	e3a00064 	mov	r0, #100	; 0x64
   1437c:	ebfff71d 	bl	11ff8 <vTaskDelay>
		i++;
   14380:	eafffff4 	b	14358 <task2+0x18>

00014384 <main>:
 **/



void main (void)
{
   14384:	e92d4800 	push	{fp, lr}
   14388:	e28db004 	add	fp, sp, #4
   1438c:	e24dd010 	sub	sp, sp, #16
	 
	SetGpioFunction(16, 1);			// RDY led
   14390:	e3a01001 	mov	r1, #1
   14394:	e3a00010 	mov	r0, #16
   14398:	ebfffd30 	bl	13860 <SetGpioFunction>

	
	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   1439c:	e3a03000 	mov	r3, #0
   143a0:	e58d300c 	str	r3, [sp, #12]
   143a4:	e3a03000 	mov	r3, #0
   143a8:	e58d3008 	str	r3, [sp, #8]
   143ac:	e3a03000 	mov	r3, #0
   143b0:	e58d3004 	str	r3, [sp, #4]
   143b4:	e3a03000 	mov	r3, #0
   143b8:	e58d3000 	str	r3, [sp]
   143bc:	e3a03000 	mov	r3, #0
   143c0:	e3a02080 	mov	r2, #128	; 0x80
   143c4:	e59f1040 	ldr	r1, [pc, #64]	; 1440c <main+0x88>
   143c8:	e59f0040 	ldr	r0, [pc, #64]	; 14410 <main+0x8c>
   143cc:	ebfff5f3 	bl	11ba0 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   143d0:	e3a03000 	mov	r3, #0
   143d4:	e58d300c 	str	r3, [sp, #12]
   143d8:	e3a03000 	mov	r3, #0
   143dc:	e58d3008 	str	r3, [sp, #8]
   143e0:	e3a03000 	mov	r3, #0
   143e4:	e58d3004 	str	r3, [sp, #4]
   143e8:	e3a03000 	mov	r3, #0
   143ec:	e58d3000 	str	r3, [sp]
   143f0:	e3a03000 	mov	r3, #0
   143f4:	e3a02080 	mov	r2, #128	; 0x80
   143f8:	e59f1014 	ldr	r1, [pc, #20]	; 14414 <main+0x90>
   143fc:	e59f0014 	ldr	r0, [pc, #20]	; 14418 <main+0x94>
   14400:	ebfff5e6 	bl	11ba0 <xTaskGenericCreate>

	vTaskStartScheduler();
   14404:	ebfff881 	bl	12610 <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   14408:	eafffffe 	b	14408 <main+0x84>
   1440c:	00014448 	andeq	r4, r1, r8, asr #8
   14410:	000142fc 	strdeq	r4, [r1], -ip
   14414:	00014450 	andeq	r4, r1, r0, asr r4
   14418:	00014340 	andeq	r4, r1, r0, asr #6

Disassembly of section .rodata:

0001441c <pRegs>:
   1441c:	2000b400 	andcs	fp, r0, r0, lsl #8
   14420:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   14424:	00000000 	andeq	r0, r0, r0

00014428 <pRegs>:
   14428:	2000b200 	andcs	fp, r0, r0, lsl #4

0001442c <pRegs>:
   1442c:	20200000 	eorcs	r0, r0, r0

00014430 <heapSTRUCT_SIZE>:
   14430:	00000010 	andeq	r0, r0, r0, lsl r0

00014434 <xTotalHeapSize>:
   14434:	00001000 	andeq	r1, r0, r0

00014438 <ucIPAddress>:
   14438:	c80a0a0a 	stmdagt	sl, {r1, r3, r9, fp}

0001443c <ucNetMask>:
   1443c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00014440 <ucGatewayAddress>:
   14440:	010a0a0a 	tsteq	sl, sl, lsl #20

00014444 <ucDNSServerAddress>:
   14444:	dede43d0 	mrcle	3, 6, r4, cr14, cr0, {6}
   14448:	5f44454c 	svcpl	0x0044454c
   1444c:	00000030 	andeq	r0, r0, r0, lsr r0
   14450:	5f44454c 	svcpl	0x0044454c
   14454:	Address 0x0000000000014454 is out of bounds.


Disassembly of section .text.memcpy:

00014458 <memcpy>:
   14458:	e352000f 	cmp	r2, #15
   1445c:	8a000009 	bhi	14488 <memcpy+0x30>
   14460:	e3520000 	cmp	r2, #0
   14464:	e1a03000 	mov	r3, r0
   14468:	0a00003c 	beq	14560 <memcpy+0x108>
   1446c:	e2433001 	sub	r3, r3, #1
   14470:	e0812002 	add	r2, r1, r2
   14474:	e4d1c001 	ldrb	ip, [r1], #1
   14478:	e1510002 	cmp	r1, r2
   1447c:	e5e3c001 	strb	ip, [r3, #1]!
   14480:	1afffffb 	bne	14474 <memcpy+0x1c>
   14484:	e12fff1e 	bx	lr
   14488:	e1813000 	orr	r3, r1, r0
   1448c:	e3130003 	tst	r3, #3
   14490:	1a000030 	bne	14558 <memcpy+0x100>
   14494:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14498:	e1a0e002 	mov	lr, r2
   1449c:	e280c010 	add	ip, r0, #16
   144a0:	e2813010 	add	r3, r1, #16
   144a4:	e5137010 	ldr	r7, [r3, #-16]
   144a8:	e513600c 	ldr	r6, [r3, #-12]
   144ac:	e5135008 	ldr	r5, [r3, #-8]
   144b0:	e5134004 	ldr	r4, [r3, #-4]
   144b4:	e24ee010 	sub	lr, lr, #16
   144b8:	e35e000f 	cmp	lr, #15
   144bc:	e50c7010 	str	r7, [ip, #-16]
   144c0:	e50c600c 	str	r6, [ip, #-12]
   144c4:	e50c5008 	str	r5, [ip, #-8]
   144c8:	e50c4004 	str	r4, [ip, #-4]
   144cc:	e2833010 	add	r3, r3, #16
   144d0:	e28cc010 	add	ip, ip, #16
   144d4:	8afffff2 	bhi	144a4 <memcpy+0x4c>
   144d8:	e2423010 	sub	r3, r2, #16
   144dc:	e3c3300f 	bic	r3, r3, #15
   144e0:	e202600f 	and	r6, r2, #15
   144e4:	e2833010 	add	r3, r3, #16
   144e8:	e3560003 	cmp	r6, #3
   144ec:	e0811003 	add	r1, r1, r3
   144f0:	e0803003 	add	r3, r0, r3
   144f4:	9a00001a 	bls	14564 <memcpy+0x10c>
   144f8:	e1a04001 	mov	r4, r1
   144fc:	e1a0c006 	mov	ip, r6
   14500:	e243e004 	sub	lr, r3, #4
   14504:	e24cc004 	sub	ip, ip, #4
   14508:	e4945004 	ldr	r5, [r4], #4
   1450c:	e35c0003 	cmp	ip, #3
   14510:	e5ae5004 	str	r5, [lr, #4]!
   14514:	8afffffa 	bhi	14504 <memcpy+0xac>
   14518:	e246c004 	sub	ip, r6, #4
   1451c:	e3ccc003 	bic	ip, ip, #3
   14520:	e28cc004 	add	ip, ip, #4
   14524:	e081100c 	add	r1, r1, ip
   14528:	e083300c 	add	r3, r3, ip
   1452c:	e2022003 	and	r2, r2, #3
   14530:	e3520000 	cmp	r2, #0
   14534:	12433001 	subne	r3, r3, #1
   14538:	10812002 	addne	r2, r1, r2
   1453c:	0a000003 	beq	14550 <memcpy+0xf8>
   14540:	e4d1c001 	ldrb	ip, [r1], #1
   14544:	e1510002 	cmp	r1, r2
   14548:	e5e3c001 	strb	ip, [r3, #1]!
   1454c:	1afffffb 	bne	14540 <memcpy+0xe8>
   14550:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   14554:	e12fff1e 	bx	lr
   14558:	e1a03000 	mov	r3, r0
   1455c:	eaffffc2 	b	1446c <memcpy+0x14>
   14560:	e12fff1e 	bx	lr
   14564:	e1a02006 	mov	r2, r6
   14568:	eafffff0 	b	14530 <memcpy+0xd8>

Disassembly of section .text.memset:

0001456c <memset>:
   1456c:	e3100003 	tst	r0, #3
   14570:	0a000040 	beq	14678 <memset+0x10c>
   14574:	e3520000 	cmp	r2, #0
   14578:	e2422001 	sub	r2, r2, #1
   1457c:	012fff1e 	bxeq	lr
   14580:	e201c0ff 	and	ip, r1, #255	; 0xff
   14584:	e1a03000 	mov	r3, r0
   14588:	ea000002 	b	14598 <memset+0x2c>
   1458c:	e2422001 	sub	r2, r2, #1
   14590:	e3720001 	cmn	r2, #1
   14594:	012fff1e 	bxeq	lr
   14598:	e4c3c001 	strb	ip, [r3], #1
   1459c:	e3130003 	tst	r3, #3
   145a0:	1afffff9 	bne	1458c <memset+0x20>
   145a4:	e3520003 	cmp	r2, #3
   145a8:	9a00002a 	bls	14658 <memset+0xec>
   145ac:	e92d4010 	push	{r4, lr}
   145b0:	e201e0ff 	and	lr, r1, #255	; 0xff
   145b4:	e18ee40e 	orr	lr, lr, lr, lsl #8
   145b8:	e352000f 	cmp	r2, #15
   145bc:	e18ee80e 	orr	lr, lr, lr, lsl #16
   145c0:	9a000010 	bls	14608 <memset+0x9c>
   145c4:	e1a04002 	mov	r4, r2
   145c8:	e283c010 	add	ip, r3, #16
   145cc:	e2444010 	sub	r4, r4, #16
   145d0:	e354000f 	cmp	r4, #15
   145d4:	e50ce010 	str	lr, [ip, #-16]
   145d8:	e50ce00c 	str	lr, [ip, #-12]
   145dc:	e50ce008 	str	lr, [ip, #-8]
   145e0:	e50ce004 	str	lr, [ip, #-4]
   145e4:	e28cc010 	add	ip, ip, #16
   145e8:	8afffff7 	bhi	145cc <memset+0x60>
   145ec:	e242c010 	sub	ip, r2, #16
   145f0:	e3ccc00f 	bic	ip, ip, #15
   145f4:	e202200f 	and	r2, r2, #15
   145f8:	e28cc010 	add	ip, ip, #16
   145fc:	e3520003 	cmp	r2, #3
   14600:	e083300c 	add	r3, r3, ip
   14604:	9a00000a 	bls	14634 <memset+0xc8>
   14608:	e1a04003 	mov	r4, r3
   1460c:	e1a0c002 	mov	ip, r2
   14610:	e24cc004 	sub	ip, ip, #4
   14614:	e35c0003 	cmp	ip, #3
   14618:	e484e004 	str	lr, [r4], #4
   1461c:	8afffffb 	bhi	14610 <memset+0xa4>
   14620:	e242c004 	sub	ip, r2, #4
   14624:	e3ccc003 	bic	ip, ip, #3
   14628:	e28cc004 	add	ip, ip, #4
   1462c:	e083300c 	add	r3, r3, ip
   14630:	e2022003 	and	r2, r2, #3
   14634:	e3520000 	cmp	r2, #0
   14638:	0a000004 	beq	14650 <memset+0xe4>
   1463c:	e20110ff 	and	r1, r1, #255	; 0xff
   14640:	e0832002 	add	r2, r3, r2
   14644:	e4c31001 	strb	r1, [r3], #1
   14648:	e1520003 	cmp	r2, r3
   1464c:	1afffffc 	bne	14644 <memset+0xd8>
   14650:	e8bd4010 	pop	{r4, lr}
   14654:	e12fff1e 	bx	lr
   14658:	e3520000 	cmp	r2, #0
   1465c:	012fff1e 	bxeq	lr
   14660:	e20110ff 	and	r1, r1, #255	; 0xff
   14664:	e0832002 	add	r2, r3, r2
   14668:	e4c31001 	strb	r1, [r3], #1
   1466c:	e1520003 	cmp	r2, r3
   14670:	1afffffc 	bne	14668 <memset+0xfc>
   14674:	e12fff1e 	bx	lr
   14678:	e1a03000 	mov	r3, r0
   1467c:	eaffffc8 	b	145a4 <memset+0x38>

Disassembly of section .text.strncpy:

00014680 <strncpy>:
   14680:	e1803001 	orr	r3, r0, r1
   14684:	e3130003 	tst	r3, #3
   14688:	03a03001 	moveq	r3, #1
   1468c:	13a03000 	movne	r3, #0
   14690:	e3520003 	cmp	r2, #3
   14694:	93a03000 	movls	r3, #0
   14698:	82033001 	andhi	r3, r3, #1
   1469c:	e3530000 	cmp	r3, #0
   146a0:	e92d4070 	push	{r4, r5, r6, lr}
   146a4:	e1a03000 	mov	r3, r0
   146a8:	0a00000b 	beq	146dc <strncpy+0x5c>
   146ac:	e59f50a0 	ldr	r5, [pc, #160]	; 14754 <strncpy+0xd4>
   146b0:	e59f40a0 	ldr	r4, [pc, #160]	; 14758 <strncpy+0xd8>
   146b4:	e1a06001 	mov	r6, r1
   146b8:	e491e004 	ldr	lr, [r1], #4
   146bc:	e08ec005 	add	ip, lr, r5
   146c0:	e1ccc00e 	bic	ip, ip, lr
   146c4:	e11c0004 	tst	ip, r4
   146c8:	1a00001f 	bne	1474c <strncpy+0xcc>
   146cc:	e2422004 	sub	r2, r2, #4
   146d0:	e3520003 	cmp	r2, #3
   146d4:	e483e004 	str	lr, [r3], #4
   146d8:	8afffff5 	bhi	146b4 <strncpy+0x34>
   146dc:	e3520000 	cmp	r2, #0
   146e0:	0a00000e 	beq	14720 <strncpy+0xa0>
   146e4:	e5d1c000 	ldrb	ip, [r1]
   146e8:	e35c0000 	cmp	ip, #0
   146ec:	e5c3c000 	strb	ip, [r3]
   146f0:	e2422001 	sub	r2, r2, #1
   146f4:	e2833001 	add	r3, r3, #1
   146f8:	e2811001 	add	r1, r1, #1
   146fc:	1a000005 	bne	14718 <strncpy+0x98>
   14700:	ea000008 	b	14728 <strncpy+0xa8>
   14704:	e4d1c001 	ldrb	ip, [r1], #1
   14708:	e35c0000 	cmp	ip, #0
   1470c:	e2422001 	sub	r2, r2, #1
   14710:	e4c3c001 	strb	ip, [r3], #1
   14714:	0a000003 	beq	14728 <strncpy+0xa8>
   14718:	e3520000 	cmp	r2, #0
   1471c:	1afffff8 	bne	14704 <strncpy+0x84>
   14720:	e8bd4070 	pop	{r4, r5, r6, lr}
   14724:	e12fff1e 	bx	lr
   14728:	e3520000 	cmp	r2, #0
   1472c:	13a01000 	movne	r1, #0
   14730:	10832002 	addne	r2, r3, r2
   14734:	0afffff9 	beq	14720 <strncpy+0xa0>
   14738:	e4c31001 	strb	r1, [r3], #1
   1473c:	e1520003 	cmp	r2, r3
   14740:	1afffffc 	bne	14738 <strncpy+0xb8>
   14744:	e8bd4070 	pop	{r4, r5, r6, lr}
   14748:	e12fff1e 	bx	lr
   1474c:	e1a01006 	mov	r1, r6
   14750:	eaffffe3 	b	146e4 <strncpy+0x64>
   14754:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   14758:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .data:

0001475c <ulCriticalNesting>:
   1475c:	0000270f 	andeq	r2, r0, pc, lsl #14

00014760 <xNextTaskUnblockTime>:
   14760:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

00014764 <xFreeBytesRemaining>:
   14764:	00001000 	andeq	r1, r0, r0

00014768 <ucMACAddress>:
   14768:	33221100 			; <UNDEFINED> instruction: 0x33221100
   1476c:	Address 0x000000000001476c is out of bounds.


Disassembly of section .bss:

00014770 <g_bStarted>:
   14770:	00000000 	andeq	r0, r0, r0

00014774 <pxReadyCoRoutineLists>:
	...

0001479c <xDelayedCoRoutineList1>:
	...

000147b0 <xDelayedCoRoutineList2>:
	...

000147c4 <pxDelayedCoRoutineList>:
   147c4:	00000000 	andeq	r0, r0, r0

000147c8 <pxOverflowDelayedCoRoutineList>:
   147c8:	00000000 	andeq	r0, r0, r0

000147cc <xPendingReadyCoRoutineList>:
	...

000147e0 <pxCurrentCoRoutine>:
   147e0:	00000000 	andeq	r0, r0, r0

000147e4 <uxTopCoRoutineReadyPriority>:
   147e4:	00000000 	andeq	r0, r0, r0

000147e8 <xCoRoutineTickCount>:
   147e8:	00000000 	andeq	r0, r0, r0

000147ec <xLastTickCount>:
   147ec:	00000000 	andeq	r0, r0, r0

000147f0 <xPassedTicks>:
   147f0:	00000000 	andeq	r0, r0, r0

000147f4 <pxCurrentTCB>:
   147f4:	00000000 	andeq	r0, r0, r0

000147f8 <pxReadyTasksLists>:
	...

0001485c <xDelayedTaskList1>:
	...

00014870 <xDelayedTaskList2>:
	...

00014884 <pxDelayedTaskList>:
   14884:	00000000 	andeq	r0, r0, r0

00014888 <pxOverflowDelayedTaskList>:
   14888:	00000000 	andeq	r0, r0, r0

0001488c <xPendingReadyList>:
	...

000148a0 <xTasksWaitingTermination>:
	...

000148b4 <uxTasksDeleted>:
   148b4:	00000000 	andeq	r0, r0, r0

000148b8 <xSuspendedTaskList>:
	...

000148cc <uxCurrentNumberOfTasks>:
   148cc:	00000000 	andeq	r0, r0, r0

000148d0 <xTickCount>:
   148d0:	00000000 	andeq	r0, r0, r0

000148d4 <uxTopUsedPriority>:
   148d4:	00000000 	andeq	r0, r0, r0

000148d8 <uxTopReadyPriority>:
   148d8:	00000000 	andeq	r0, r0, r0

000148dc <xSchedulerRunning>:
   148dc:	00000000 	andeq	r0, r0, r0

000148e0 <uxSchedulerSuspended>:
   148e0:	00000000 	andeq	r0, r0, r0

000148e4 <uxMissedTicks>:
   148e4:	00000000 	andeq	r0, r0, r0

000148e8 <xMissedYield>:
   148e8:	00000000 	andeq	r0, r0, r0

000148ec <xNumOfOverflows>:
   148ec:	00000000 	andeq	r0, r0, r0

000148f0 <uxTaskNumber>:
   148f0:	00000000 	andeq	r0, r0, r0

000148f4 <g_VectorTable>:
	...

00014b34 <enabled>:
	...

00014b40 <xHeap>:
	...

00015b40 <xStart>:
	...

00015b48 <pxEnd>:
   15b48:	00000000 	andeq	r0, r0, r0

00015b4c <allocated>:
   15b4c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001fb 	strdeq	r0, [r0], -fp
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000d6 	ldrdeq	r0, [r0], -r6
      10:	0000300c 	andeq	r3, r0, ip
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	00034400 	andeq	r4, r3, r0, lsl #8
      1c:	00000000 	andeq	r0, r0, r0
      20:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      24:	00746e69 	rsbseq	r6, r4, r9, ror #28
      28:	d8070403 	stmdale	r7, {r0, r1, sl}
      2c:	03000006 	movweq	r0, #6
      30:	01760508 	cmneq	r6, r8, lsl #10
      34:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      38:	0001a404 	andeq	sl, r1, r4, lsl #8
      3c:	00ca0400 	sbceq	r0, sl, r0, lsl #8
      40:	47020000 	strmi	r0, [r2, -r0]
      44:	00000048 	andeq	r0, r0, r8, asr #32
      48:	004e0405 	subeq	r0, lr, r5, lsl #8
      4c:	59060000 	stmdbpl	r6, {}	; <UNPREDICTABLE>
      50:	07000000 	streq	r0, [r0, -r0]
      54:	00000059 	andeq	r0, r0, r9, asr r0
      58:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
      5c:	0000000c 	andeq	r0, r0, ip
      60:	00661f03 	rsbeq	r1, r6, r3, lsl #30
      64:	04030000 	streq	r0, [r3], #-0
      68:	0006d307 	andeq	sp, r6, r7, lsl #6
      6c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
      70:	0000017b 	andeq	r0, r0, fp, ror r1
      74:	05060103 	streq	r0, [r6, #-259]	; 0xfffffefd
      78:	03000009 	movweq	r0, #9
      7c:	00b70702 	adcseq	r0, r7, r2, lsl #14
      80:	04050000 	streq	r0, [r5], #-0
      84:	00000066 	andeq	r0, r0, r6, rrx
      88:	6d070403 	cfstrsvs	mvf0, [r7, #-12]
      8c:	09000001 	stmdbeq	r0, {r0}
      90:	000000a3 	andeq	r0, r0, r3, lsr #1
      94:	08150124 	ldmdaeq	r5, {r2, r5, r8}
      98:	0a000001 	beq	a4 <_start-0x7f5c>
      9c:	00444f4c 	subeq	r4, r4, ip, asr #30
      a0:	00661601 	rsbeq	r1, r6, r1, lsl #12
      a4:	0a000000 	beq	ac <_start-0x7f54>
      a8:	004c4156 	subeq	r4, ip, r6, asr r1
      ac:	00661701 	rsbeq	r1, r6, r1, lsl #14
      b0:	0a040000 	beq	1000b8 <__bss_end+0xea568>
      b4:	004c5443 	subeq	r5, ip, r3, asr #8
      b8:	00661801 	rsbeq	r1, r6, r1, lsl #16
      bc:	0a080000 	beq	2000c4 <__bss_end+0x1ea574>
      c0:	00494c43 	subeq	r4, r9, r3, asr #24
      c4:	00661901 	rsbeq	r1, r6, r1, lsl #18
      c8:	0a0c0000 	beq	3000d0 <__bss_end+0x2ea580>
      cc:	00534952 	subseq	r4, r3, r2, asr r9
      d0:	00661a01 	rsbeq	r1, r6, r1, lsl #20
      d4:	0a100000 	beq	4000dc <__bss_end+0x3ea58c>
      d8:	0053494d 	subseq	r4, r3, sp, asr #18
      dc:	00661b01 	rsbeq	r1, r6, r1, lsl #22
      e0:	0a140000 	beq	5000e8 <__bss_end+0x4ea598>
      e4:	00444c52 	subeq	r4, r4, r2, asr ip
      e8:	00661c01 	rsbeq	r1, r6, r1, lsl #24
      ec:	0a180000 	beq	6000f4 <__bss_end+0x5ea5a4>
      f0:	00564944 	subseq	r4, r6, r4, asr #18
      f4:	00661d01 	rsbeq	r1, r6, r1, lsl #26
      f8:	0a1c0000 	beq	700100 <__bss_end+0x6ea5b0>
      fc:	00544e43 	subseq	r4, r4, r3, asr #28
     100:	00661e01 	rsbeq	r1, r6, r1, lsl #28
     104:	00200000 	eoreq	r0, r0, r0
     108:	0000a404 	andeq	sl, r0, r4, lsl #8
     10c:	8f1f0100 	svchi	0x001f0100
     110:	0b000000 	bleq	118 <_start-0x7ee8>
     114:	00000108 	andeq	r0, r0, r8, lsl #2
     118:	0001910c 	andeq	r9, r1, ip, lsl #2
     11c:	2f210100 	svccs	0x00210100
     120:	05000001 	streq	r0, [r0, #-1]
     124:	01441c03 	cmpeq	r4, r3, lsl #24
     128:	13040500 	movwne	r0, #17664	; 0x4500
     12c:	0d000001 	stceq	0, cr0, [r0, #-4]
     130:	00000129 	andeq	r0, r0, r9, lsr #2
     134:	0000190e 	andeq	r1, r0, lr, lsl #18
     138:	acaa0100 	stfges	f0, [sl]
     13c:	98000102 	stmdals	r0, {r1, r8}
     140:	01000000 	mrseq	r0, (UNDEF: 0)
     144:	0001589c 	muleq	r1, ip, r8
     148:	01da0c00 	bicseq	r0, sl, r0, lsl #24
     14c:	ac010000 	stcge	0, cr0, [r1], {-0}
     150:	00000066 	andeq	r0, r0, r6, rrx
     154:	00749102 	rsbseq	r9, r4, r2, lsl #2
     158:	0001640f 	andeq	r6, r1, pc, lsl #8
     15c:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
     160:	38000102 	stmdacc	r0, {r1, r8}
     164:	01000000 	mrseq	r0, (UNDEF: 0)
     168:	00018a9c 	muleq	r1, ip, sl
     16c:	00001000 	andeq	r1, r0, r0
     170:	9c010000 	stcls	0, cr0, [r1], {-0}
     174:	00000028 	andeq	r0, r0, r8, lsr #32
     178:	10749102 	rsbsne	r9, r4, r2, lsl #2
     17c:	0000008e 	andeq	r0, r0, lr, lsl #1
     180:	00599c01 	subseq	r9, r9, r1, lsl #24
     184:	91020000 	mrsls	r0, (UNDEF: 2)
     188:	52110070 	andspl	r0, r1, #112	; 0x70
     18c:	01000001 	tsteq	r0, r1
     190:	01025c8f 	smlabbeq	r2, pc, ip, r5	; <UNPREDICTABLE>
     194:	00001800 	andeq	r1, r0, r0, lsl #16
     198:	129c0100 	addsne	r0, ip, #0, 2
     19c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     1a0:	006d8101 	rsbeq	r8, sp, r1, lsl #2
     1a4:	02400000 	subeq	r0, r0, #0
     1a8:	001c0001 	andseq	r0, ip, r1
     1ac:	9c010000 	stcls	0, cr0, [r1], {-0}
     1b0:	0001c413 	andeq	ip, r1, r3, lsl r4
     1b4:	82360100 	eorshi	r0, r6, #0, 2
     1b8:	00000000 	andeq	r0, r0, r0
     1bc:	40000100 	andmi	r0, r0, r0, lsl #2
     1c0:	01000002 	tsteq	r0, r2
     1c4:	0197109c 			; <UNDEFINED> instruction: 0x0197109c
     1c8:	36010000 	strcc	r0, [r1], -r0
     1cc:	00000082 	andeq	r0, r0, r2, lsl #1
     1d0:	106c9102 	rsbne	r9, ip, r2, lsl #2
     1d4:	00000005 	andeq	r0, r0, r5
     1d8:	003d3601 	eorseq	r3, sp, r1, lsl #12
     1dc:	91020000 	mrsls	r0, (UNDEF: 2)
     1e0:	01841068 	orreq	r1, r4, r8, rrx
     1e4:	36010000 	strcc	r0, [r1], -r0
     1e8:	00000059 	andeq	r0, r0, r9, asr r0
     1ec:	0c649102 	stfeqp	f1, [r4], #-8
     1f0:	00000095 	muleq	r0, r5, r0
     1f4:	00823801 	addeq	r3, r2, r1, lsl #16
     1f8:	91020000 	mrsls	r0, (UNDEF: 2)
     1fc:	83000074 	movwhi	r0, #116	; 0x74
     200:	04000001 	streq	r0, [r0], #-1
     204:	00011d00 	andeq	r1, r1, r0, lsl #26
     208:	d6010400 	strle	r0, [r1], -r0, lsl #8
     20c:	0c000000 	stceq	0, cr0, [r0], {-0}
     210:	0000020e 	andeq	r0, r0, lr, lsl #4
     214:	00010344 	andeq	r0, r1, r4, asr #6
     218:	000002a4 	andeq	r0, r0, r4, lsr #5
     21c:	00000138 	andeq	r0, r0, r8, lsr r1
     220:	69050402 	stmdbvs	r5, {r1, sl}
     224:	0300746e 	movweq	r7, #1134	; 0x46e
     228:	06d80704 	ldrbeq	r0, [r8], r4, lsl #14
     22c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     230:	00017605 	andeq	r7, r1, r5, lsl #12
     234:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
     238:	000001a4 	andeq	r0, r0, r4, lsr #3
     23c:	d3070403 	movwle	r0, #29699	; 0x7403
     240:	04000006 	streq	r0, [r0], #-6
     244:	0000003d 	andeq	r0, r0, sp, lsr r0
     248:	7b050403 	blvc	14125c <__bss_end+0x12b70c>
     24c:	05000001 	streq	r0, [r0, #-1]
     250:	000001fc 	strdeq	r0, [r0], -ip
     254:	00442301 	subeq	r2, r4, r1, lsl #6
     258:	03050000 	movweq	r0, #20480	; 0x5000
     25c:	0001475c 	andeq	r4, r1, ip, asr r7
     260:	0002ba05 	andeq	fp, r2, r5, lsl #20
     264:	21310100 	teqcs	r1, r0, lsl #2
     268:	05000000 	streq	r0, [r0, #-0]
     26c:	01477003 	cmpeq	r7, r3
     270:	026f0600 	rsbeq	r0, pc, #0, 12
     274:	bc010000 	stclt	0, cr0, [r1], {-0}
     278:	00010584 	andeq	r0, r1, r4, lsl #11
     27c:	00000064 	andeq	r0, r0, r4, rrx
     280:	e9069c01 	stmdb	r6, {r0, sl, fp, ip, pc}
     284:	01000001 	tsteq	r0, r1
     288:	010540ac 	smlatbeq	r5, ip, r0, r4
     28c:	00004400 	andeq	r4, r0, r0, lsl #8
     290:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     294:	000002ac 	andeq	r0, r0, ip, lsr #5
     298:	04907f01 	ldreq	r7, [r0], #3841	; 0xf01
     29c:	00b00001 	adcseq	r0, r0, r1
     2a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2a4:	000000ee 	andeq	r0, r0, lr, ror #1
     2a8:	01049008 	tsteq	r4, r8
     2ac:	00005800 	andeq	r5, r0, r0, lsl #16
     2b0:	0000cd00 	andeq	ip, r0, r0, lsl #26
     2b4:	02c50900 	sbceq	r0, r5, #0, 18
     2b8:	80010000 	andhi	r0, r1, r0
     2bc:	000000f4 	strdeq	r0, [r0], -r4
     2c0:	0001fc09 	andeq	pc, r1, r9, lsl #24
     2c4:	44800100 	strmi	r0, [r0], #256	; 0x100
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	0104ec0a 	tsteq	r4, sl, lsl #24
     2d0:	00004800 	andeq	r4, r0, r0, lsl #16
     2d4:	02c50900 	sbceq	r0, r5, #0, 18
     2d8:	82010000 	andhi	r0, r1, #0
     2dc:	000000f4 	strdeq	r0, [r0], -r4
     2e0:	0001fc09 	andeq	pc, r1, r9, lsl #24
     2e4:	44820100 	strmi	r0, [r2], #256	; 0x100
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	f9040b00 			; <UNDEFINED> instruction: 0xf9040b00
     2f0:	04000000 	streq	r0, [r0], #-0
     2f4:	000000ee 	andeq	r0, r0, lr, ror #1
     2f8:	02980d0c 	addseq	r0, r8, #12, 26	; 0x300
     2fc:	5a010000 	bpl	40304 <__bss_end+0x2a7b4>
     300:	000103dc 	ldrdeq	r0, [r1], -ip
     304:	000000b4 	strheq	r0, [r0], -r4
     308:	01549c01 	cmpeq	r4, r1, lsl #24
     30c:	e0080000 	and	r0, r8, r0
     310:	58000103 	stmdapl	r0, {r0, r1, r8}
     314:	33000000 	movwcc	r0, #0
     318:	09000001 	stmdbeq	r0, {r0}
     31c:	000002c5 	andeq	r0, r0, r5, asr #5
     320:	00f46201 	rscseq	r6, r4, r1, lsl #4
     324:	fc090000 	stc2	0, cr0, [r9], {-0}
     328:	01000001 	tsteq	r0, r1
     32c:	00004462 	andeq	r4, r0, r2, ror #8
     330:	3c0a0000 	stccc	0, cr0, [sl], {-0}
     334:	48000104 	stmdami	r0, {r2, r8}
     338:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     33c:	000002c5 	andeq	r0, r0, r5, asr #5
     340:	00f46801 	rscseq	r6, r4, r1, lsl #16
     344:	fc090000 	stc2	0, cr0, [r9], {-0}
     348:	01000001 	tsteq	r0, r1
     34c:	00004468 	andeq	r4, r0, r8, ror #8
     350:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     354:	00000281 	andeq	r0, r0, r1, lsl #5
     358:	03443301 	movteq	r3, #17153	; 0x4301
     35c:	00980001 	addseq	r0, r8, r1
     360:	9c010000 	stcls	0, cr0, [r1], {-0}
     364:	01036c0a 	tsteq	r3, sl, lsl #24
     368:	00004800 	andeq	r4, r0, r0, lsl #16
     36c:	02c50900 	sbceq	r0, r5, #0, 18
     370:	46010000 	strmi	r0, [r1], -r0
     374:	000000f4 	strdeq	r0, [r0], -r4
     378:	0001fc09 	andeq	pc, r1, r9, lsl #24
     37c:	44460100 	strbmi	r0, [r6], #-256	; 0xffffff00
     380:	00000000 	andeq	r0, r0, r0
     384:	04700000 	ldrbteq	r0, [r0], #-0
     388:	00040000 	andeq	r0, r4, r0
     38c:	000001f4 	strdeq	r0, [r0], -r4
     390:	00d60104 	sbcseq	r0, r6, r4, lsl #2
     394:	fc0c0000 	stc2	0, cr0, [ip], {-0}
     398:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     39c:	64000105 	strvs	r0, [r0], #-261	; 0xfffffefb
     3a0:	f6000007 			; <UNDEFINED> instruction: 0xf6000007
     3a4:	02000001 	andeq	r0, r0, #1
     3a8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3ac:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     3b0:	0006d807 	andeq	sp, r6, r7, lsl #16
     3b4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     3b8:	00000176 	andeq	r0, r0, r6, ror r1
     3bc:	a4040803 	strge	r0, [r4], #-2051	; 0xfffff7fd
     3c0:	04000001 	streq	r0, [r0], #-1
     3c4:	000c0504 	andeq	r0, ip, r4, lsl #10
     3c8:	1f030000 	svcne	0x00030000
     3cc:	0000004a 	andeq	r0, r0, sl, asr #32
     3d0:	d3070403 	movwle	r0, #29699	; 0x7403
     3d4:	06000006 	streq	r0, [r0], -r6
     3d8:	0000004a 	andeq	r0, r0, sl, asr #32
     3dc:	7b050403 	blvc	1413f0 <__bss_end+0x12b8a0>
     3e0:	07000001 	streq	r0, [r0, -r1]
     3e4:	00000386 	andeq	r0, r0, r6, lsl #7
     3e8:	a6690214 			; <UNDEFINED> instruction: 0xa6690214
     3ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3f0:	00000339 	andeq	r0, r0, r9, lsr r3
     3f4:	003f6b02 	eorseq	r6, pc, r2, lsl #22
     3f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3fc:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     400:	00ab6c02 	adceq	r6, fp, r2, lsl #24
     404:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     408:	000003f6 	strdeq	r0, [r0], -r6
     40c:	00ab6d02 	adceq	r6, fp, r2, lsl #26
     410:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     414:	0000035b 	andeq	r0, r0, fp, asr r3
     418:	003d6e02 	eorseq	r6, sp, r2, lsl #28
     41c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     420:	00000304 	andeq	r0, r0, r4, lsl #6
     424:	003d6f02 	eorseq	r6, sp, r2, lsl #30
     428:	00100000 	andseq	r0, r0, r0
     42c:	00005d06 	andeq	r5, r0, r6, lsl #26
     430:	a6040900 	strge	r0, [r4], -r0, lsl #18
     434:	05000000 	streq	r0, [r0, #-0]
     438:	000004f2 	strdeq	r0, [r0], -r2
     43c:	005d7102 	subseq	r7, sp, r2, lsl #2
     440:	b1060000 	mrslt	r0, (UNDEF: 6)
     444:	07000000 	streq	r0, [r0, -r0]
     448:	00000597 	muleq	r0, r7, r5
     44c:	f273020c 	vhsub.s<illegal width 64>	d16, d3, d12
     450:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     454:	00000339 	andeq	r0, r0, r9, lsr r3
     458:	003f7502 	eorseq	r7, pc, r2, lsl #10
     45c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     460:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     464:	00ab7602 	adceq	r7, fp, r2, lsl #12
     468:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     46c:	000003f6 	strdeq	r0, [r0], -r6
     470:	00ab7702 	adceq	r7, fp, r2, lsl #14
     474:	00080000 	andeq	r0, r8, r0
     478:	00046605 	andeq	r6, r4, r5, lsl #12
     47c:	c1790200 	cmngt	r9, r0, lsl #4
     480:	06000000 	streq	r0, [r0], -r0
     484:	000000f2 	strdeq	r0, [r0], -r2
     488:	0005a707 	andeq	sl, r5, r7, lsl #14
     48c:	7e021400 	cfcpysvc	mvf1, mvf2
     490:	00000133 	andeq	r0, r0, r3, lsr r1
     494:	00048508 	andeq	r8, r4, r8, lsl #10
     498:	51800200 	orrpl	r0, r0, r0, lsl #4
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	00033108 	andeq	r3, r3, r8, lsl #2
     4a4:	33810200 	orrcc	r0, r1, #0, 4
     4a8:	04000001 	streq	r0, [r0], #-1
     4ac:	00035208 	andeq	r5, r3, r8, lsl #4
     4b0:	fd820200 	stc2	2, cr0, [r2]
     4b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4b8:	bc040900 			; <UNDEFINED> instruction: 0xbc040900
     4bc:	05000000 	streq	r0, [r0, #-0]
     4c0:	000009f7 	strdeq	r0, [r0], -r7
     4c4:	01028302 	tsteq	r2, r2, lsl #6
     4c8:	390a0000 	stmdbcc	sl, {}	; <UNPREDICTABLE>
     4cc:	03000001 	movweq	r0, #1
     4d0:	09050601 	stmdbeq	r5, {r0, r9, sl}
     4d4:	02030000 	andeq	r0, r3, #0
     4d8:	0000b707 	andeq	fp, r0, r7, lsl #14
     4dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     4e0:	0000016d 	andeq	r0, r0, sp, ror #2
     4e4:	0004b305 	andeq	fp, r4, r5, lsl #6
     4e8:	3d530400 	cfldrdcc	mvd0, [r3, #-0]
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	0000062d 	andeq	r0, r0, sp, lsr #12
     4f4:	01745604 	cmneq	r4, r4, lsl #12
     4f8:	04090000 	streq	r0, [r9], #-0
     4fc:	0000017a 	andeq	r0, r0, sl, ror r1
     500:	00018a0b 	andeq	r8, r1, fp, lsl #20
     504:	015e0c00 	cmpeq	lr, r0, lsl #24
     508:	4a0c0000 	bmi	300510 <__bss_end+0x2ea9c0>
     50c:	00000000 	andeq	r0, r0, r0
     510:	00041107 	andeq	r1, r4, r7, lsl #2
     514:	58043800 	stmdapl	r4, {fp, ip, sp}
     518:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     51c:	00031008 	andeq	r1, r3, r8
     520:	695a0400 	ldmdbvs	sl, {sl}^
     524:	00000001 	andeq	r0, r0, r1
     528:	0005dd08 	andeq	sp, r5, r8, lsl #26
     52c:	b15b0400 	cmplt	fp, r0, lsl #8
     530:	04000000 	streq	r0, [r0], #-0
     534:	00060a08 	andeq	r0, r6, r8, lsl #20
     538:	b15c0400 	cmplt	ip, r0, lsl #8
     53c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     540:	0004a808 	andeq	sl, r4, r8, lsl #16
     544:	4a5d0400 	bmi	174154c <__bss_end+0x172b9fc>
     548:	2c000000 	stccs	0, cr0, [r0], {-0}
     54c:	00045e08 	andeq	r5, r4, r8, lsl #28
     550:	4a5e0400 	bmi	1781558 <__bss_end+0x176ba08>
     554:	30000000 	andcc	r0, r0, r0
     558:	00057008 	andeq	r7, r5, r8
     55c:	505f0400 	subspl	r0, pc, r0, lsl #8
     560:	34000001 	strcc	r0, [r0], #-1
     564:	03e70500 	mvneq	r0, #0, 10
     568:	60040000 	andvs	r0, r4, r0
     56c:	0000018a 	andeq	r0, r0, sl, lsl #3
     570:	0001390d 	andeq	r3, r1, sp, lsl #18
     574:	0001fa00 	andeq	pc, r1, r0, lsl #20
     578:	01570e00 	cmpeq	r7, r0, lsl #28
     57c:	00010000 	andeq	r0, r1, r0
     580:	0004480f 	andeq	r4, r4, pc, lsl #16
     584:	ea510100 	b	144098c <__bss_end+0x142ae3c>
     588:	05000001 	streq	r0, [r0, #-1]
     58c:	01477403 	cmpeq	r7, r3, lsl #8
     590:	03b90f00 			; <UNDEFINED> instruction: 0x03b90f00
     594:	52010000 	andpl	r0, r1, #0
     598:	00000139 	andeq	r0, r0, r9, lsr r1
     59c:	479c0305 	ldrmi	r0, [ip, r5, lsl #6]
     5a0:	d00f0001 	andle	r0, pc, r1
     5a4:	01000003 	tsteq	r0, r3
     5a8:	00013953 	andeq	r3, r1, r3, asr r9
     5ac:	b0030500 	andlt	r0, r3, r0, lsl #10
     5b0:	0f000147 	svceq	0x00000147
     5b4:	000005ad 	andeq	r0, r0, sp, lsr #11
     5b8:	023e5401 	eorseq	r5, lr, #16777216	; 0x1000000
     5bc:	03050000 	movweq	r0, #20480	; 0x5000
     5c0:	000147c4 	andeq	r4, r1, r4, asr #15
     5c4:	01390409 	teqeq	r9, r9, lsl #8
     5c8:	3e0a0000 	cdpcc	0, 0, cr0, cr10, cr0, {0}
     5cc:	0f000002 	svceq	0x00000002
     5d0:	00000578 	andeq	r0, r0, r8, ror r5
     5d4:	023e5501 	eorseq	r5, lr, #4194304	; 0x400000
     5d8:	03050000 	movweq	r0, #20480	; 0x5000
     5dc:	000147c8 	andeq	r4, r1, r8, asr #15
     5e0:	0004c40f 	andeq	ip, r4, pc, lsl #8
     5e4:	39560100 	ldmdbcc	r6, {r8}^
     5e8:	05000001 	streq	r0, [r0, #-1]
     5ec:	0147cc03 	cmpeq	r7, r3, lsl #24
     5f0:	04951000 	ldreq	r1, [r5], #0
     5f4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     5f8:	0000027c 	andeq	r0, r0, ip, ror r2
     5fc:	47e00305 	strbmi	r0, [r0, r5, lsl #6]!
     600:	04090001 	streq	r0, [r9], #-1
     604:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     608:	00039d0f 	andeq	r9, r3, pc, lsl #26
     60c:	4a5a0100 	bmi	1680a14 <__bss_end+0x166aec4>
     610:	05000000 	streq	r0, [r0, #-0]
     614:	0147e403 	cmpeq	r7, r3, lsl #8
     618:	03720f00 	cmneq	r2, #0, 30
     61c:	5b010000 	blpl	40624 <__bss_end+0x2aad4>
     620:	0000003f 	andeq	r0, r0, pc, lsr r0
     624:	47e80305 	strbmi	r0, [r8, r5, lsl #6]!
     628:	630f0001 	movwvs	r0, #61441	; 0xf001
     62c:	01000003 	tsteq	r0, r3
     630:	00003f5b 	andeq	r3, r0, fp, asr pc
     634:	ec030500 	cfstr32	mvfx0, [r3], {-0}
     638:	0f000147 	svceq	0x00000147
     63c:	00000324 	andeq	r0, r0, r4, lsr #6
     640:	003f5b01 	eorseq	r5, pc, r1, lsl #22
     644:	03050000 	movweq	r0, #20480	; 0x5000
     648:	000147f0 	strdeq	r4, [r1], -r0
     64c:	00042a11 	andeq	r2, r4, r1, lsl sl
     650:	016c0100 	cmneq	ip, r0, lsl #2
     654:	00000056 	andeq	r0, r0, r6, asr r0
     658:	00010cc8 	andeq	r0, r1, r8, asr #25
     65c:	0000008c 	andeq	r0, r0, ip, lsl #1
     660:	030e9c01 	movweq	r9, #60417	; 0xec01
     664:	e6120000 	ldr	r0, [r2], -r0
     668:	01000004 	tsteq	r0, r4
     66c:	030e016c 	movweq	r0, #57708	; 0xe16c
     670:	91020000 	mrsls	r0, (UNDEF: 2)
     674:	02d2136c 	sbcseq	r1, r2, #108, 6	; 0xb0000001
     678:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     67c:	00027c01 	andeq	r7, r2, r1, lsl #24
     680:	70910200 	addsvc	r0, r1, r0, lsl #4
     684:	000c4d13 	andeq	r4, ip, r3, lsl sp
     688:	016f0100 	cmneq	pc, r0, lsl #2
     68c:	00000056 	andeq	r0, r0, r6, asr r0
     690:	00749102 	rsbseq	r9, r4, r2, lsl #2
     694:	01440409 	cmpeq	r4, r9, lsl #8
     698:	ee140000 	cdp	0, 1, cr0, cr4, cr0, {0}
     69c:	01000005 	tsteq	r0, r5
     6a0:	0c200158 	stfeqs	f0, [r0], #-352	; 0xfffffea0
     6a4:	00a80001 	adceq	r0, r8, r1
     6a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6ac:	0000033a 	andeq	r0, r0, sl, lsr r3
     6b0:	0004a813 	andeq	sl, r4, r3, lsl r8
     6b4:	015a0100 	cmpeq	sl, r0, lsl #2
     6b8:	0000004a 	andeq	r0, r0, sl, asr #32
     6bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6c0:	00054515 	andeq	r4, r5, r5, lsl r5
     6c4:	013a0100 	teqeq	sl, r0, lsl #2
     6c8:	00010af8 	strdeq	r0, [r1], -r8
     6cc:	00000128 	andeq	r0, r0, r8, lsr #2
     6d0:	036a9c01 	cmneq	sl, #256	; 0x100
     6d4:	60160000 	andsvs	r0, r6, r0
     6d8:	7800010b 	stmdavc	r0, {r0, r1, r3, r8}
     6dc:	13000000 	movwne	r0, #0
     6e0:	00000391 	muleq	r0, r1, r3
     6e4:	44014f01 	strmi	r4, [r1], #-3841	; 0xfffff0ff
     6e8:	02000002 	andeq	r0, r0, #2
     6ec:	00007491 	muleq	r0, r1, r4
     6f0:	00061914 	andeq	r1, r6, r4, lsl r9
     6f4:	01000100 	mrseq	r0, (UNDEF: 16)
     6f8:	00010928 	andeq	r0, r1, r8, lsr #18
     6fc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     700:	03a99c01 			; <UNDEFINED> instruction: 0x03a99c01
     704:	ef130000 	svc	0x00130000
     708:	01000003 	tsteq	r0, r3
     70c:	027c0102 	rsbseq	r0, ip, #-2147483648	; 0x80000000
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	098c1670 	stmibeq	ip, {r4, r5, r6, r9, sl, ip}
     718:	00280001 	eoreq	r0, r8, r1
     71c:	e2130000 	ands	r0, r3, #0
     720:	01000002 	tsteq	r0, r2
     724:	023e010d 	eorseq	r0, lr, #1073741827	; 0x40000003
     728:	91020000 	mrsls	r0, (UNDEF: 2)
     72c:	17000074 	smlsdxne	r0, r4, r0, r0
     730:	000005c4 	andeq	r0, r0, r4, asr #11
     734:	083ce901 	ldmdaeq	ip!, {r0, r8, fp, sp, lr, pc}
     738:	00ec0001 	rsceq	r0, ip, r1
     73c:	9c010000 	stcls	0, cr0, [r1], {-0}
     740:	000003d7 	ldrdeq	r0, [r0], -r7
     744:	01084c16 	tsteq	r8, r6, lsl ip
     748:	0000b400 	andeq	fp, r0, r0, lsl #8
     74c:	02d20f00 	sbcseq	r0, r2, #0, 30
     750:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     754:	0000027c 	andeq	r0, r0, ip, ror r2
     758:	00749102 	rsbseq	r9, r4, r2, lsl #2
     75c:	02e91800 	rsceq	r1, r9, #0, 16
     760:	c3010000 	movwgt	r0, #4096	; 0x1000
     764:	00010758 	andeq	r0, r1, r8, asr r7
     768:	000000e4 	andeq	r0, r0, r4, ror #1
     76c:	04179c01 	ldreq	r9, [r7], #-3073	; 0xfffff3ff
     770:	44190000 	ldrmi	r0, [r9], #-0
     774:	01000003 	tsteq	r0, r3
     778:	00003fc3 	andeq	r3, r0, r3, asr #31
     77c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     780:	0004e619 	andeq	lr, r4, r9, lsl r6
     784:	3ec30100 	polccs	f0, f3, f0
     788:	02000002 	andeq	r0, r0, #2
     78c:	580f6891 	stmdapl	pc, {r0, r4, r7, fp, sp, lr}	; <UNPREDICTABLE>
     790:	01000005 	tsteq	r0, r5
     794:	00003fc5 	andeq	r3, r0, r5, asr #31
     798:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     79c:	04741a00 	ldrbteq	r1, [r4], #-2560	; 0xfffff600
     7a0:	8a010000 	bhi	407a8 <__bss_end+0x2ac58>
     7a4:	00000056 	andeq	r0, r0, r6, asr r0
     7a8:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     7ac:	00000168 	andeq	r0, r0, r8, ror #2
     7b0:	01199c01 	tsteq	r9, r1, lsl #24
     7b4:	01000004 	tsteq	r0, r4
     7b8:	0001698a 	andeq	r6, r1, sl, lsl #19
     7bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7c0:	0004a819 	andeq	sl, r4, r9, lsl r8
     7c4:	4a8a0100 	bmi	fe280bcc <_estack+0xf6270bcc>
     7c8:	02000000 	andeq	r0, r0, #0
     7cc:	5e196891 	mrcpl	8, 0, r6, cr9, cr1, {4}
     7d0:	01000004 	tsteq	r0, r4
     7d4:	00004a8a 	andeq	r4, r0, sl, lsl #21
     7d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     7dc:	000c4d0f 	andeq	r4, ip, pc, lsl #26
     7e0:	568c0100 	strpl	r0, [ip], r0, lsl #2
     7e4:	02000000 	andeq	r0, r0, #0
     7e8:	640f7491 	strvs	r7, [pc], #-1169	; 7f0 <_start-0x7810>
     7ec:	01000005 	tsteq	r0, r5
     7f0:	00027c8d 	andeq	r7, r2, sp, lsl #25
     7f4:	70910200 	addsvc	r0, r1, r0, lsl #4
     7f8:	0aa60000 	beq	fe980800 <_estack+0xf6970800>
     7fc:	00040000 	andeq	r0, r4, r0
     800:	00000377 	andeq	r0, r0, r7, ror r3
     804:	00d60104 	sbcseq	r0, r6, r4, lsl #2
     808:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     80c:	54000006 	strpl	r0, [r0], #-6
     810:	9c00010d 	stflss	f0, [r0], {13}
     814:	fa000002 	blx	824 <_start-0x77dc>
     818:	02000003 	andeq	r0, r0, #3
     81c:	06d80704 	ldrbeq	r0, [r8], r4, lsl #14
     820:	04030000 	streq	r0, [r3], #-0
     824:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     828:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     82c:	00000176 	andeq	r0, r0, r6, ror r1
     830:	a4040802 	strge	r0, [r4], #-2050	; 0xfffff7fe
     834:	02000001 	andeq	r0, r0, #1
     838:	09050601 	stmdbeq	r5, {r0, r9, sl}
     83c:	01020000 	mrseq	r0, (UNDEF: 2)
     840:	00090308 	andeq	r0, r9, r8, lsl #6
     844:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     848:	0000091f 	andeq	r0, r0, pc, lsl r9
     84c:	b7070202 	strlt	r0, [r7, -r2, lsl #4]
     850:	02000000 	andeq	r0, r0, #0
     854:	017b0504 	cmneq	fp, r4, lsl #10
     858:	04020000 	streq	r0, [r2], #-0
     85c:	0006d307 	andeq	sp, r6, r7, lsl #6
     860:	00600400 	rsbeq	r0, r0, r0, lsl #8
     864:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     868:	0006ce07 	andeq	ip, r6, r7, lsl #28
     86c:	08740500 	ldmdaeq	r4!, {r8, sl}^
     870:	22020000 	andcs	r0, r2, #0
     874:	0000007e 	andeq	r0, r0, lr, ror r0
     878:	00840406 	addeq	r0, r4, r6, lsl #8
     87c:	cd070000 	stcgt	0, cr0, [r7, #-0]
     880:	05000009 	streq	r0, [r0, #-9]
     884:	000008e4 	andeq	r0, r0, r4, ror #17
     888:	00592c03 	subseq	r2, r9, r3, lsl #24
     88c:	ee050000 	cdp	0, 0, cr0, cr5, cr0, {0}
     890:	03000009 	movweq	r0, #9
     894:	00005972 	andeq	r5, r0, r2, ror r9
     898:	087c0800 	ldmdaeq	ip!, {fp}^
     89c:	65040000 	strvs	r0, [r4, #-0]
     8a0:	00002101 	andeq	r2, r0, r1, lsl #2
     8a4:	03040900 	movweq	r0, #18688	; 0x4900
     8a8:	0000caa6 	andeq	ip, r0, r6, lsr #21
     8ac:	086e0a00 	stmdaeq	lr!, {r9, fp}^
     8b0:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     8b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8b8:	0008200a 	andeq	r2, r8, sl
     8bc:	caa90300 	bgt	fea414c4 <_estack+0xf6a314c4>
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	0000440b 	andeq	r4, r0, fp, lsl #8
     8c8:	0000da00 	andeq	sp, r0, r0, lsl #20
     8cc:	00da0c00 	sbcseq	r0, sl, r0, lsl #24
     8d0:	00030000 	andeq	r0, r3, r0
     8d4:	6d070402 	cfstrsvs	mvf0, [r7, #-8]
     8d8:	0d000001 	stceq	0, cr0, [r0, #-4]
     8dc:	02a30308 	adceq	r0, r3, #8, 6	; 0x20000000
     8e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     8e4:	000009c5 	andeq	r0, r0, r5, asr #19
     8e8:	0028a503 	eoreq	sl, r8, r3, lsl #10
     8ec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     8f0:	000009d4 	ldrdeq	r0, [r0], -r4
     8f4:	00abaa03 	adceq	sl, fp, r3, lsl #20
     8f8:	00040000 	andeq	r0, r4, r0
     8fc:	00094705 	andeq	r4, r9, r5, lsl #14
     900:	e1ab0300 			; <UNDEFINED> instruction: 0xe1ab0300
     904:	05000000 	streq	r0, [r0, #-0]
     908:	000007e3 	andeq	r0, r0, r3, ror #15
     90c:	0073af03 	rsbseq	sl, r3, r3, lsl #30
     910:	040f0000 	streq	r0, [pc], #-0	; 918 <_start-0x76e8>
     914:	01200406 			; <UNDEFINED> instruction: 0x01200406
     918:	01020000 	mrseq	r0, (UNDEF: 2)
     91c:	00090c08 	andeq	r0, r9, r8, lsl #24
     920:	01201000 			; <UNDEFINED> instruction: 0x01201000
     924:	32050000 	andcc	r0, r5, #0
     928:	0500000a 	streq	r0, [r0, #-10]
     92c:	00006016 	andeq	r6, r0, r6, lsl r0
     930:	07f41100 	ldrbeq	r1, [r4, r0, lsl #2]!
     934:	05180000 	ldreq	r0, [r8, #-0]
     938:	00018a2f 	andeq	r8, r1, pc, lsr #20
     93c:	09680e00 	stmdbeq	r8!, {r9, sl, fp}^
     940:	31050000 	mrscc	r0, (UNDEF: 5)
     944:	0000018a 	andeq	r0, r0, sl, lsl #3
     948:	6b5f1200 	blvs	17c5150 <__bss_end+0x17af600>
     94c:	28320500 	ldmdacs	r2!, {r8, sl}
     950:	04000000 	streq	r0, [r0], #-0
     954:	0009b00e 	andeq	fp, r9, lr
     958:	28320500 	ldmdacs	r2!, {r8, sl}
     95c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     960:	0007dd0e 	andeq	sp, r7, lr, lsl #26
     964:	28320500 	ldmdacs	r2!, {r8, sl}
     968:	0c000000 	stceq	0, cr0, [r0], {-0}
     96c:	000a770e 	andeq	r7, sl, lr, lsl #14
     970:	28320500 	ldmdacs	r2!, {r8, sl}
     974:	10000000 	andne	r0, r0, r0
     978:	00785f12 	rsbseq	r5, r8, r2, lsl pc
     97c:	01903305 	orrseq	r3, r0, r5, lsl #6
     980:	00140000 	andseq	r0, r4, r0
     984:	01370406 	teqeq	r7, r6, lsl #8
     988:	2c0b0000 	stccs	0, cr0, [fp], {-0}
     98c:	a0000001 	andge	r0, r0, r1
     990:	0c000001 	stceq	0, cr0, [r0], {1}
     994:	000000da 	ldrdeq	r0, [r0], -sl
     998:	1b110000 	blne	4409a0 <__bss_end+0x42ae50>
     99c:	24000008 	strcs	r0, [r0], #-8
     9a0:	02193705 	andseq	r3, r9, #1310720	; 0x140000
     9a4:	160e0000 	strne	r0, [lr], -r0
     9a8:	05000007 	streq	r0, [r0, #-7]
     9ac:	00002839 	andeq	r2, r0, r9, lsr r8
     9b0:	fd0e0000 	stc2	0, cr0, [lr, #-0]
     9b4:	05000009 	streq	r0, [r0, #-9]
     9b8:	0000283a 	andeq	r2, r0, sl, lsr r8
     9bc:	2b0e0400 	blcs	3819c4 <__bss_end+0x36be74>
     9c0:	05000007 	streq	r0, [r0, #-7]
     9c4:	0000283b 	andeq	r2, r0, fp, lsr r8
     9c8:	020e0800 	andeq	r0, lr, #0, 16
     9cc:	0500000b 	streq	r0, [r0, #-11]
     9d0:	0000283c 	andeq	r2, r0, ip, lsr r8
     9d4:	be0e0c00 	cdplt	12, 0, cr0, cr14, cr0, {0}
     9d8:	05000008 	streq	r0, [r0, #-8]
     9dc:	0000283d 	andeq	r2, r0, sp, lsr r8
     9e0:	9e0e1000 	cdpls	0, 0, cr1, cr14, cr0, {0}
     9e4:	05000008 	streq	r0, [r0, #-8]
     9e8:	0000283e 	andeq	r2, r0, lr, lsr r8
     9ec:	7c0e1400 	cfstrsvc	mvf1, [lr], {-0}
     9f0:	0500000a 	streq	r0, [r0, #-10]
     9f4:	0000283f 	andeq	r2, r0, pc, lsr r8
     9f8:	290e1800 	stmdbcs	lr, {fp, ip}
     9fc:	05000009 	streq	r0, [r0, #-9]
     a00:	00002840 	andeq	r2, r0, r0, asr #16
     a04:	c90e1c00 	stmdbgt	lr, {sl, fp, ip}
     a08:	0500000a 	streq	r0, [r0, #-10]
     a0c:	00002841 	andeq	r2, r0, r1, asr #16
     a10:	13002000 	movwne	r2, #0
     a14:	0000073a 	andeq	r0, r0, sl, lsr r7
     a18:	4a050108 	bmi	140e40 <__bss_end+0x12b2f0>
     a1c:	00000259 	andeq	r0, r0, r9, asr r2
     a20:	0007bc0e 	andeq	fp, r7, lr, lsl #24
     a24:	594b0500 	stmdbpl	fp, {r8, sl}^
     a28:	00000002 	andeq	r0, r0, r2
     a2c:	00063e0e 	andeq	r3, r6, lr, lsl #28
     a30:	594c0500 	stmdbpl	ip, {r8, sl}^
     a34:	80000002 	andhi	r0, r0, r2
     a38:	000a1914 	andeq	r1, sl, r4, lsl r9
     a3c:	2c4e0500 	cfstr64cs	mvdx0, [lr], {-0}
     a40:	00000001 	andeq	r0, r0, r1
     a44:	075f1401 	ldrbeq	r1, [pc, -r1, lsl #8]
     a48:	51050000 	mrspl	r0, (UNDEF: 5)
     a4c:	0000012c 	andeq	r0, r0, ip, lsr #2
     a50:	0b000104 	bleq	e68 <_start-0x7198>
     a54:	00000118 	andeq	r0, r0, r8, lsl r1
     a58:	00000269 	andeq	r0, r0, r9, ror #4
     a5c:	0000da0c 	andeq	sp, r0, ip, lsl #20
     a60:	13001f00 	movwne	r1, #3840	; 0xf00
     a64:	000008c7 	andeq	r0, r0, r7, asr #17
     a68:	5d050190 	stfpls	f0, [r5, #-576]	; 0xfffffdc0
     a6c:	000002a7 	andeq	r0, r0, r7, lsr #5
     a70:	0009680e 	andeq	r6, r9, lr, lsl #16
     a74:	a75e0500 	ldrbge	r0, [lr, -r0, lsl #10]
     a78:	00000002 	andeq	r0, r0, r2
     a7c:	0009800e 	andeq	r8, r9, lr
     a80:	285f0500 	ldmdacs	pc, {r8, sl}^	; <UNPREDICTABLE>
     a84:	04000000 	streq	r0, [r0], #-0
     a88:	0007c40e 	andeq	ip, r7, lr, lsl #8
     a8c:	ad610500 	cfstr64ge	mvdx0, [r1, #-0]
     a90:	08000002 	stmdaeq	r0, {r1}
     a94:	00073a0e 	andeq	r3, r7, lr, lsl #20
     a98:	19620500 	stmdbne	r2!, {r8, sl}^
     a9c:	88000002 	stmdahi	r0, {r1}
     aa0:	69040600 	stmdbvs	r4, {r9, sl}
     aa4:	0b000002 	bleq	ab4 <_start-0x754c>
     aa8:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
     aac:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
     ab0:	0000da0c 	andeq	sp, r0, ip, lsl #20
     ab4:	06001f00 	streq	r1, [r0], -r0, lsl #30
     ab8:	0002c304 	andeq	ip, r2, r4, lsl #6
     abc:	33111500 	tstcc	r1, #0, 10
     ac0:	08000009 	stmdaeq	r0, {r0, r3}
     ac4:	02e97505 	rsceq	r7, r9, #20971520	; 0x1400000
     ac8:	250e0000 	strcs	r0, [lr, #-0]
     acc:	05000007 	streq	r0, [r0, #-7]
     ad0:	0002e976 	andeq	lr, r2, r6, ror r9
     ad4:	4a0e0000 	bmi	380adc <__bss_end+0x36af8c>
     ad8:	05000006 	streq	r0, [r0, #-6]
     adc:	00002877 	andeq	r2, r0, r7, ror r8
     ae0:	06000400 	streq	r0, [r0], -r0, lsl #8
     ae4:	00004404 	andeq	r4, r0, r4, lsl #8
     ae8:	09521100 	ldmdbeq	r2, {r8, ip}^
     aec:	05680000 	strbeq	r0, [r8, #-0]!
     af0:	000419b5 			; <UNDEFINED> instruction: 0x000419b5
     af4:	705f1200 	subsvc	r1, pc, r0, lsl #4
     af8:	e9b60500 	ldmib	r6!, {r8, sl}
     afc:	00000002 	andeq	r0, r0, r2
     b00:	00725f12 	rsbseq	r5, r2, r2, lsl pc
     b04:	0028b705 	eoreq	fp, r8, r5, lsl #14
     b08:	12040000 	andne	r0, r4, #0
     b0c:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
     b10:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
     b14:	580e0800 	stmdapl	lr, {fp}
     b18:	05000007 	streq	r0, [r0, #-7]
     b1c:	00004bb9 			; <UNDEFINED> instruction: 0x00004bb9
     b20:	370e0c00 	strcc	r0, [lr, -r0, lsl #24]
     b24:	05000008 	streq	r0, [r0, #-8]
     b28:	00004bba 			; <UNDEFINED> instruction: 0x00004bba
     b2c:	5f120e00 	svcpl	0x00120e00
     b30:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
     b34:	0002c4bb 			; <UNDEFINED> instruction: 0x0002c4bb
     b38:	e50e1000 	str	r1, [lr, #-0]
     b3c:	05000006 	streq	r0, [r0, #-6]
     b40:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
     b44:	480e1800 	stmdami	lr, {fp, ip}
     b48:	05000007 	streq	r0, [r0, #-7]
     b4c:	000118c3 	andeq	r1, r1, r3, asr #17
     b50:	0b0e1c00 	bleq	387b58 <__bss_end+0x372008>
     b54:	05000008 	streq	r0, [r0, #-8]
     b58:	000574c5 	andeq	r7, r5, r5, asr #9
     b5c:	970e2000 	strls	r2, [lr, -r0]
     b60:	05000008 	streq	r0, [r0, #-8]
     b64:	00059ec7 	andeq	r9, r5, r7, asr #29
     b68:	dc0e2400 	cfstrsle	mvf2, [lr], {-0}
     b6c:	05000009 	streq	r0, [r0, #-9]
     b70:	0005c2ca 	andeq	ip, r5, sl, asr #5
     b74:	e30e2800 	movw	r2, #59392	; 0xe800
     b78:	0500000a 	streq	r0, [r0, #-10]
     b7c:	0005dccb 	andeq	sp, r5, fp, asr #25
     b80:	5f122c00 	svcpl	0x00122c00
     b84:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
     b88:	0002c4ce 	andeq	ip, r2, lr, asr #9
     b8c:	5f123000 	svcpl	0x00123000
     b90:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
     b94:	0002e9cf 	andeq	lr, r2, pc, asr #19
     b98:	5f123800 	svcpl	0x00123800
     b9c:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
     ba0:	000028d0 	ldrdeq	r2, [r0], -r0
     ba4:	1f0e3c00 	svcne	0x000e3c00
     ba8:	05000007 	streq	r0, [r0, #-7]
     bac:	0005e2d3 	ldrdeq	lr, [r5], -r3
     bb0:	bb0e4000 	bllt	390bb8 <__bss_end+0x37b068>
     bb4:	0500000a 	streq	r0, [r0, #-10]
     bb8:	0005f2d4 	ldrdeq	pc, [r5], -r4
     bbc:	5f124300 	svcpl	0x00124300
     bc0:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
     bc4:	0002c4d7 	ldrdeq	ip, [r2], -r7
     bc8:	6e0e4400 	cfcpysvs	mvf4, mvf14
     bcc:	05000007 	streq	r0, [r0, #-7]
     bd0:	000028da 	ldrdeq	r2, [r0], -sl
     bd4:	7f0e4c00 	svcvc	0x000e4c00
     bd8:	05000007 	streq	r0, [r0, #-7]
     bdc:	000089db 	ldrdeq	r8, [r0], -fp
     be0:	630e5000 	movwvs	r5, #57344	; 0xe000
     be4:	05000006 	streq	r0, [r0, #-6]
     be8:	000437de 	ldrdeq	r3, [r4], -lr
     bec:	ce0e5400 	cfcpysgt	mvf5, mvf14
     bf0:	05000009 	streq	r0, [r0, #-9]
     bf4:	00010de2 	andeq	r0, r1, r2, ror #27
     bf8:	5a0e5800 	bpl	396c00 <__bss_end+0x3810b0>
     bfc:	05000009 	streq	r0, [r0, #-9]
     c00:	000102e4 	andeq	r0, r1, r4, ror #5
     c04:	8f0e5c00 	svchi	0x000e5c00
     c08:	05000008 	streq	r0, [r0, #-8]
     c0c:	000028e5 	andeq	r2, r0, r5, ror #17
     c10:	16006400 	strne	r6, [r0], -r0, lsl #8
     c14:	00000028 	andeq	r0, r0, r8, lsr #32
     c18:	00000437 	andeq	r0, r0, r7, lsr r4
     c1c:	00043717 	andeq	r3, r4, r7, lsl r7
     c20:	01181700 	tsteq	r8, r0, lsl #14
     c24:	1a170000 	bne	5c0c2c <__bss_end+0x5ab0dc>
     c28:	17000001 	strne	r0, [r0, -r1]
     c2c:	00000028 	andeq	r0, r0, r8, lsr #32
     c30:	42040600 	andmi	r0, r4, #0, 12
     c34:	10000004 	andne	r0, r0, r4
     c38:	00000437 	andeq	r0, r0, r7, lsr r4
     c3c:	0009b818 	andeq	fp, r9, r8, lsl r8
     c40:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
     c44:	05740239 	ldrbeq	r0, [r4, #-569]!	; 0xfffffdc7
     c48:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
     c4c:	05000009 	streq	r0, [r0, #-9]
     c50:	0028023b 	eoreq	r0, r8, fp, lsr r2
     c54:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     c58:	00000767 	andeq	r0, r0, r7, ror #14
     c5c:	49024005 	stmdbmi	r2, {r0, r2, lr}
     c60:	04000006 	streq	r0, [r0], #-6
     c64:	00082719 	andeq	r2, r8, r9, lsl r7
     c68:	02400500 	subeq	r0, r0, #0, 10
     c6c:	00000649 	andeq	r0, r0, r9, asr #12
     c70:	07ec1908 	strbeq	r1, [ip, r8, lsl #18]!
     c74:	40050000 	andmi	r0, r5, r0
     c78:	00064902 	andeq	r4, r6, r2, lsl #18
     c7c:	7b190c00 	blvc	643c84 <__bss_end+0x62e134>
     c80:	05000009 	streq	r0, [r0, #-9]
     c84:	00280242 	eoreq	r0, r8, r2, asr #4
     c88:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     c8c:	00000658 	andeq	r0, r0, r8, asr r6
     c90:	2b024305 	blcs	918ac <__bss_end+0x7bd5c>
     c94:	14000008 	strne	r0, [r0], #-8
     c98:	00099719 	andeq	r9, r9, r9, lsl r7
     c9c:	02460500 	subeq	r0, r6, #0, 10
     ca0:	00000028 	andeq	r0, r0, r8, lsr #32
     ca4:	09851930 	stmibeq	r5, {r4, r5, r8, fp, ip}
     ca8:	47050000 	strmi	r0, [r5, -r0]
     cac:	00084002 	andeq	r4, r8, r2
     cb0:	d9193400 	ldmdble	r9, {sl, ip, sp}
     cb4:	05000008 	streq	r0, [r0, #-8]
     cb8:	00280249 	eoreq	r0, r8, r9, asr #4
     cbc:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
     cc0:	0000098d 	andeq	r0, r0, sp, lsl #19
     cc4:	51024b05 	tstpl	r2, r5, lsl #22
     cc8:	3c000008 	stccc	0, cr0, [r0], {8}
     ccc:	00086619 	andeq	r6, r8, r9, lsl r6
     cd0:	024e0500 	subeq	r0, lr, #0, 10
     cd4:	0000018a 	andeq	r0, r0, sl, lsl #3
     cd8:	08111940 	ldmdaeq	r1, {r6, r8, fp, ip}
     cdc:	4f050000 	svcmi	0x00050000
     ce0:	00002802 	andeq	r2, r0, r2, lsl #16
     ce4:	fd194400 	ldc2	4, cr4, [r9, #-0]
     ce8:	0500000a 	streq	r0, [r0, #-10]
     cec:	018a0250 	orreq	r0, sl, r0, asr r2
     cf0:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     cf4:	000008eb 	andeq	r0, r0, fp, ror #17
     cf8:	57025105 	strpl	r5, [r2, -r5, lsl #2]
     cfc:	4c000008 	stcmi	0, cr0, [r0], {8}
     d00:	00082f19 	andeq	r2, r8, r9, lsl pc
     d04:	02540500 	subseq	r0, r4, #0, 10
     d08:	00000028 	andeq	r0, r0, r8, lsr #32
     d0c:	07771950 			; <UNDEFINED> instruction: 0x07771950
     d10:	55050000 	strpl	r0, [r5, #-0]
     d14:	00011a02 	andeq	r1, r1, r2, lsl #20
     d18:	11195400 	tstne	r9, r0, lsl #8
     d1c:	05000009 	streq	r0, [r0, #-9]
     d20:	08090278 	stmdaeq	r9, {r3, r4, r5, r6, r9}
     d24:	1a580000 	bne	1600d2c <__bss_end+0x15eb1dc>
     d28:	000008c7 	andeq	r0, r0, r7, asr #17
     d2c:	a7027c05 	strge	r7, [r2, -r5, lsl #24]
     d30:	48000002 	stmdami	r0, {r1}
     d34:	08441a01 	stmdaeq	r4, {r0, r9, fp, ip}^
     d38:	7d050000 	stcvc	0, cr0, [r5, #-0]
     d3c:	00026902 	andeq	r6, r2, r2, lsl #18
     d40:	1a014c00 	bne	53d48 <__bss_end+0x3e1f8>
     d44:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     d48:	68028105 	stmdavs	r2, {r0, r2, r8, pc}
     d4c:	dc000008 	stcle	0, cr0, [r0], {8}
     d50:	07501a02 	ldrbeq	r1, [r0, -r2, lsl #20]
     d54:	86050000 	strhi	r0, [r5], -r0
     d58:	00060e02 	andeq	r0, r6, r2, lsl #28
     d5c:	1a02e000 	bne	b8d64 <__bss_end+0xa3214>
     d60:	00000735 	andeq	r0, r0, r5, lsr r7
     d64:	74028705 	strvc	r8, [r2], #-1797	; 0xfffff8fb
     d68:	ec000008 	stc	0, cr0, [r0], {8}
     d6c:	04060002 	streq	r0, [r6], #-2
     d70:	00000419 	andeq	r0, r0, r9, lsl r4
     d74:	00002816 	andeq	r2, r0, r6, lsl r8
     d78:	00059800 	andeq	r9, r5, r0, lsl #16
     d7c:	04371700 	ldrteq	r1, [r7], #-1792	; 0xfffff900
     d80:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
     d84:	17000001 	strne	r0, [r0, -r1]
     d88:	00000598 	muleq	r0, r8, r5
     d8c:	00002817 	andeq	r2, r0, r7, lsl r8
     d90:	04060000 	streq	r0, [r6], #-0
     d94:	00000127 	andeq	r0, r0, r7, lsr #2
     d98:	057a0406 	ldrbeq	r0, [sl, #-1030]!	; 0xfffffbfa
     d9c:	94160000 	ldrls	r0, [r6], #-0
     da0:	c2000000 	andgt	r0, r0, #0
     da4:	17000005 	strne	r0, [r0, -r5]
     da8:	00000437 	andeq	r0, r0, r7, lsr r4
     dac:	00011817 	andeq	r1, r1, r7, lsl r8
     db0:	00941700 	addseq	r1, r4, r0, lsl #14
     db4:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	05a40406 	streq	r0, [r4, #1030]!	; 0x406
     dc0:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
     dc4:	dc000000 	stcle	0, cr0, [r0], {-0}
     dc8:	17000005 	strne	r0, [r0, -r5]
     dcc:	00000437 	andeq	r0, r0, r7, lsr r4
     dd0:	00011817 	andeq	r1, r1, r7, lsl r8
     dd4:	04060000 	streq	r0, [r6], #-0
     dd8:	000005c8 	andeq	r0, r0, r8, asr #11
     ddc:	0000440b 	andeq	r4, r0, fp, lsl #8
     de0:	0005f200 	andeq	pc, r5, r0, lsl #4
     de4:	00da0c00 	sbcseq	r0, sl, r0, lsl #24
     de8:	00020000 	andeq	r0, r2, r0
     dec:	0000440b 	andeq	r4, r0, fp, lsl #8
     df0:	00060200 	andeq	r0, r6, r0, lsl #4
     df4:	00da0c00 	sbcseq	r0, sl, r0, lsl #24
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	00094008 	andeq	r4, r9, r8
     e00:	011f0500 	tsteq	pc, r0, lsl #10
     e04:	000002ef 	andeq	r0, r0, pc, ror #5
     e08:	000a861b 	andeq	r8, sl, fp, lsl r6
     e0c:	23050c00 	movwcs	r0, #23552	; 0x5c00
     e10:	00064301 	andeq	r4, r6, r1, lsl #6
     e14:	09681900 	stmdbeq	r8!, {r8, fp, ip}^
     e18:	25050000 	strcs	r0, [r5, #-0]
     e1c:	00064301 	andeq	r4, r6, r1, lsl #6
     e20:	3d190000 	ldccc	0, cr0, [r9, #-0]
     e24:	05000008 	streq	r0, [r0, #-8]
     e28:	00280126 	eoreq	r0, r8, r6, lsr #2
     e2c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     e30:	0000093a 	andeq	r0, r0, sl, lsr r9
     e34:	49012705 	stmdbmi	r1, {r0, r2, r8, r9, sl, sp}
     e38:	08000006 	stmdaeq	r0, {r1, r2}
     e3c:	0e040600 	cfmadd32eq	mvax0, mvfx0, mvfx4, mvfx0
     e40:	06000006 	streq	r0, [r0], -r6
     e44:	00060204 	andeq	r0, r6, r4, lsl #4
     e48:	06501b00 	ldrbeq	r1, [r0], -r0, lsl #22
     e4c:	050e0000 	streq	r0, [lr, #-0]
     e50:	0684013f 			; <UNDEFINED> instruction: 0x0684013f
     e54:	bf190000 	svclt	0x00190000
     e58:	05000009 	streq	r0, [r0, #-9]
     e5c:	06840140 	streq	r0, [r4], r0, asr #2
     e60:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     e64:	00000a06 	andeq	r0, r0, r6, lsl #20
     e68:	84014105 	strhi	r4, [r1], #-261	; 0xfffffefb
     e6c:	06000006 	streq	r0, [r0], -r6
     e70:	000a2219 	andeq	r2, sl, r9, lsl r2
     e74:	01420500 	cmpeq	r2, r0, lsl #10
     e78:	00000052 	andeq	r0, r0, r2, asr r0
     e7c:	520b000c 	andpl	r0, fp, #12
     e80:	94000000 	strls	r0, [r0], #-0
     e84:	0c000006 	stceq	0, cr0, [r0], {6}
     e88:	000000da 	ldrdeq	r0, [r0], -sl
     e8c:	d01c0002 	andsle	r0, ip, r2
     e90:	95025905 	strls	r5, [r2, #-2309]	; 0xfffff6fb
     e94:	19000007 	stmdbne	r0, {r0, r1, r2}
     e98:	00000a5a 	andeq	r0, r0, sl, asr sl
     e9c:	21025b05 	tstcs	r2, r5, lsl #22
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	000a0c19 	andeq	r0, sl, r9, lsl ip
     ea8:	025c0500 	subseq	r0, ip, #0, 10
     eac:	0000011a 	andeq	r0, r0, sl, lsl r1
     eb0:	08591904 	ldmdaeq	r9, {r2, r8, fp, ip}^
     eb4:	5d050000 	stcpl	0, cr0, [r5, #-0]
     eb8:	00079502 	andeq	r9, r7, r2, lsl #10
     ebc:	d4190800 	ldrle	r0, [r9], #-2048	; 0xfffff800
     ec0:	0500000a 	streq	r0, [r0, #-10]
     ec4:	01a0025e 	asreq	r0, lr, r2
     ec8:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
     ecc:	000007fc 	strdeq	r0, [r0], -ip
     ed0:	28025f05 	stmdacs	r2, {r0, r2, r8, r9, sl, fp, ip, lr}
     ed4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     ed8:	00096319 	andeq	r6, r9, r9, lsl r3
     edc:	02600500 	rsbeq	r0, r0, #0, 10
     ee0:	0000006c 	andeq	r0, r0, ip, rrx
     ee4:	0aea1950 	beq	ffa8742c <_estack+0xf7a7742c>
     ee8:	61050000 	mrsvs	r0, (UNDEF: 5)
     eec:	00064f02 	andeq	r4, r6, r2, lsl #30
     ef0:	6e195800 	cdpvs	8, 1, cr5, cr9, cr0, {0}
     ef4:	05000009 	streq	r0, [r0, #-9]
     ef8:	01020262 	tsteq	r2, r2, ror #4
     efc:	19680000 	stmdbne	r8!, {}^	; <UNPREDICTABLE>
     f00:	00000aef 	andeq	r0, r0, pc, ror #21
     f04:	02026305 	andeq	r6, r2, #335544320	; 0x14000000
     f08:	70000001 	andvc	r0, r0, r1
     f0c:	0008f519 	andeq	pc, r8, r9, lsl r5	; <UNPREDICTABLE>
     f10:	02640500 	rsbeq	r0, r4, #0, 10
     f14:	00000102 	andeq	r0, r0, r2, lsl #2
     f18:	0a951978 	beq	fe547500 <_estack+0xf6537500>
     f1c:	65050000 	strvs	r0, [r5, #-0]
     f20:	0007a502 	andeq	sl, r7, r2, lsl #10
     f24:	4d198000 	ldcmi	0, cr8, [r9, #-0]
     f28:	05000008 	streq	r0, [r0, #-8]
     f2c:	07b50266 	ldreq	r0, [r5, r6, ror #4]!
     f30:	19880000 	stmibne	r8, {}	; <UNPREDICTABLE>
     f34:	00000a3a 	andeq	r0, r0, sl, lsr sl
     f38:	28026705 	stmdacs	r2, {r0, r2, r8, r9, sl, sp, lr}
     f3c:	a0000000 	andge	r0, r0, r0
     f40:	0007ae19 	andeq	sl, r7, r9, lsl lr
     f44:	02680500 	rsbeq	r0, r8, #0, 10
     f48:	00000102 	andeq	r0, r0, r2, lsl #2
     f4c:	070719a4 	streq	r1, [r7, -r4, lsr #19]
     f50:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     f54:	00010202 	andeq	r0, r1, r2, lsl #4
     f58:	9d19ac00 	ldcls	12, cr10, [r9, #-0]
     f5c:	05000007 	streq	r0, [r0, #-7]
     f60:	0102026a 	tsteq	r2, sl, ror #4
     f64:	19b40000 	ldmibne	r4!, {}	; <UNPREDICTABLE>
     f68:	00000669 	andeq	r0, r0, r9, ror #12
     f6c:	02026b05 	andeq	r6, r2, #5120	; 0x1400
     f70:	bc000001 	stclt	0, cr0, [r0], {1}
     f74:	00067819 	andeq	r7, r6, r9, lsl r8
     f78:	026c0500 	rsbeq	r0, ip, #0, 10
     f7c:	00000102 	andeq	r0, r0, r2, lsl #2
     f80:	091619c4 	ldmdbeq	r6, {r2, r6, r7, r8, fp, ip}
     f84:	6d050000 	stcvs	0, cr0, [r5, #-0]
     f88:	00002802 	andeq	r2, r0, r2, lsl #16
     f8c:	0b00cc00 	bleq	33f94 <__bss_end+0x1e444>
     f90:	00000120 	andeq	r0, r0, r0, lsr #2
     f94:	000007a5 	andeq	r0, r0, r5, lsr #15
     f98:	0000da0c 	andeq	sp, r0, ip, lsl #20
     f9c:	0b001900 	bleq	73a4 <_start-0xc5c>
     fa0:	00000120 	andeq	r0, r0, r0, lsr #2
     fa4:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
     fa8:	0000da0c 	andeq	sp, r0, ip, lsl #20
     fac:	0b000700 	bleq	2bb4 <_start-0x544c>
     fb0:	00000120 	andeq	r0, r0, r0, lsr #2
     fb4:	000007c5 	andeq	r0, r0, r5, asr #15
     fb8:	0000da0c 	andeq	sp, r0, ip, lsl #20
     fbc:	1c001700 	stcne	7, cr1, [r0], {-0}
     fc0:	027205f0 	rsbseq	r0, r2, #240, 10	; 0x3c000000
     fc4:	000007e9 	andeq	r0, r0, r9, ror #15
     fc8:	0008b719 	andeq	fp, r8, r9, lsl r7
     fcc:	02750500 	rsbseq	r0, r5, #0, 10
     fd0:	000007e9 	andeq	r0, r0, r9, ror #15
     fd4:	0a8c1900 	beq	fe3073dc <_estack+0xf62f73dc>
     fd8:	76050000 	strvc	r0, [r5], -r0
     fdc:	0007f902 	andeq	pc, r7, r2, lsl #18
     fe0:	0b007800 	bleq	1efe8 <__bss_end+0x9498>
     fe4:	000002e9 	andeq	r0, r0, r9, ror #5
     fe8:	000007f9 	strdeq	r0, [r0], -r9
     fec:	0000da0c 	andeq	sp, r0, ip, lsl #20
     ff0:	0b001d00 	bleq	83f8 <__module_entries_end+0x354>
     ff4:	00000021 	andeq	r0, r0, r1, lsr #32
     ff8:	00000809 	andeq	r0, r0, r9, lsl #16
     ffc:	0000da0c 	andeq	sp, r0, ip, lsl #20
    1000:	1d001d00 	stcne	13, cr1, [r0, #-0]
    1004:	025705f0 	subseq	r0, r7, #240, 10	; 0x3c000000
    1008:	0000082b 	andeq	r0, r0, fp, lsr #16
    100c:	0009b81e 	andeq	fp, r9, lr, lsl r8
    1010:	026e0500 	rsbeq	r0, lr, #0, 10
    1014:	00000694 	muleq	r0, r4, r6
    1018:	000ac11e 	andeq	ip, sl, lr, lsl r1
    101c:	02770500 	rsbseq	r0, r7, #0, 10
    1020:	000007c5 	andeq	r0, r0, r5, asr #15
    1024:	01200b00 			; <UNDEFINED> instruction: 0x01200b00
    1028:	083b0000 	ldmdaeq	fp!, {}	; <UNPREDICTABLE>
    102c:	da0c0000 	ble	301034 <__bss_end+0x2eb4e4>
    1030:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1034:	06ee0700 	strbteq	r0, [lr], r0, lsl #14
    1038:	04060000 	streq	r0, [r6], #-0
    103c:	0000083b 	andeq	r0, r0, fp, lsr r8
    1040:	0008511f 	andeq	r5, r8, pc, lsl r1
    1044:	04371700 	ldrteq	r1, [r7], #-1792	; 0xfffff900
    1048:	06000000 	streq	r0, [r0], -r0
    104c:	00084604 	andeq	r4, r8, r4, lsl #12
    1050:	8a040600 	bhi	102858 <__bss_end+0xecd08>
    1054:	1f000001 	svcne	0x00000001
    1058:	00000868 	andeq	r0, r0, r8, ror #16
    105c:	00002817 	andeq	r2, r0, r7, lsl r8
    1060:	04060000 	streq	r0, [r6], #-0
    1064:	0000086e 	andeq	r0, r0, lr, ror #16
    1068:	085d0406 	ldmdaeq	sp, {r1, r2, sl}^
    106c:	020b0000 	andeq	r0, fp, #0
    1070:	84000006 	strhi	r0, [r0], #-6
    1074:	0c000008 	stceq	0, cr0, [r0], {8}
    1078:	000000da 	ldrdeq	r0, [r0], -sl
    107c:	4e200002 	cdpmi	0, 2, cr0, cr0, cr2, {0}
    1080:	0500000a 	streq	r0, [r0, #-10]
    1084:	043702fe 	ldrteq	r0, [r7], #-766	; 0xfffffd02
    1088:	47200000 	strmi	r0, [r0, -r0]!
    108c:	0500000a 	streq	r0, [r0, #-10]
    1090:	043d02ff 	ldrteq	r0, [sp], #-767	; 0xfffffd01
    1094:	cf210000 	svcgt	0x00210000
    1098:	06000008 	streq	r0, [r0], -r8
    109c:	00011a63 	andeq	r1, r1, r3, ror #20
    10a0:	000c0500 	andeq	r0, ip, r0, lsl #10
    10a4:	1f070000 	svcne	0x00070000
    10a8:	00000060 	andeq	r0, r0, r0, rrx
    10ac:	00038611 	andeq	r8, r3, r1, lsl r6
    10b0:	69081400 	stmdbvs	r8, {sl, ip}
    10b4:	000008fb 	strdeq	r0, [r0], -fp
    10b8:	0003390e 	andeq	r3, r3, lr, lsl #18
    10bc:	a76b0800 	strbge	r0, [fp, -r0, lsl #16]!
    10c0:	00000008 	andeq	r0, r0, r8
    10c4:	0004df0e 	andeq	sp, r4, lr, lsl #30
    10c8:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    10cc:	04000009 	streq	r0, [r0], #-9
    10d0:	0003f60e 	andeq	pc, r3, lr, lsl #12
    10d4:	006d0800 	rsbeq	r0, sp, r0, lsl #16
    10d8:	08000009 	stmdaeq	r0, {r0, r3}
    10dc:	00035b0e 	andeq	r5, r3, lr, lsl #22
    10e0:	186e0800 	stmdane	lr!, {fp}^
    10e4:	0c000001 	stceq	0, cr0, [r0], {1}
    10e8:	0003040e 	andeq	r0, r3, lr, lsl #8
    10ec:	186f0800 	stmdane	pc!, {fp}^	; <UNPREDICTABLE>
    10f0:	10000001 	andne	r0, r0, r1
    10f4:	08b20400 	ldmeq	r2!, {sl}
    10f8:	04060000 	streq	r0, [r6], #-0
    10fc:	000008fb 	strdeq	r0, [r0], -fp
    1100:	0004f205 	andeq	pc, r4, r5, lsl #4
    1104:	b2710800 	rsbslt	r0, r1, #0, 16
    1108:	04000008 	streq	r0, [r0], #-8
    110c:	00000906 	andeq	r0, r0, r6, lsl #18
    1110:	00059711 	andeq	r9, r5, r1, lsl r7
    1114:	73080c00 	movwvc	r0, #35840	; 0x8c00
    1118:	00000947 	andeq	r0, r0, r7, asr #18
    111c:	0003390e 	andeq	r3, r3, lr, lsl #18
    1120:	a7750800 	ldrbge	r0, [r5, -r0, lsl #16]!
    1124:	00000008 	andeq	r0, r0, r8
    1128:	0004df0e 	andeq	sp, r4, lr, lsl #30
    112c:	00760800 	rsbseq	r0, r6, r0, lsl #16
    1130:	04000009 	streq	r0, [r0], #-9
    1134:	0003f60e 	andeq	pc, r3, lr, lsl #12
    1138:	00770800 	rsbseq	r0, r7, r0, lsl #16
    113c:	08000009 	stmdaeq	r0, {r0, r3}
    1140:	04660500 	strbteq	r0, [r6], #-1280	; 0xfffffb00
    1144:	79080000 	stmdbvc	r8, {}	; <UNPREDICTABLE>
    1148:	00000916 	andeq	r0, r0, r6, lsl r9
    114c:	00094704 	andeq	r4, r9, r4, lsl #14
    1150:	05a71100 	streq	r1, [r7, #256]!	; 0x100
    1154:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    1158:	0009887e 	andeq	r8, r9, lr, ror r8
    115c:	04850e00 	streq	r0, [r5], #3584	; 0xe00
    1160:	80080000 	andhi	r0, r8, r0
    1164:	00000067 	andeq	r0, r0, r7, rrx
    1168:	03310e00 	teqeq	r1, #0, 28
    116c:	81080000 	mrshi	r0, (UNDEF: 8)
    1170:	00000988 	andeq	r0, r0, r8, lsl #19
    1174:	03520e04 	cmpeq	r2, #4, 28	; 0x40
    1178:	82080000 	andhi	r0, r8, #0
    117c:	00000952 	andeq	r0, r0, r2, asr r9
    1180:	04060008 	streq	r0, [r6], #-8
    1184:	00000911 	andeq	r0, r0, r1, lsl r9
    1188:	0009f705 	andeq	pc, r9, r5, lsl #14
    118c:	57830800 	strpl	r0, [r3, r0, lsl #16]
    1190:	22000009 	andcs	r0, r0, #9
    1194:	00000883 	andeq	r0, r0, r3, lsl #17
    1198:	0f58b701 	svceq	0x0058b701
    119c:	00980001 	addseq	r0, r8, r1
    11a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    11a4:	000009cb 	andeq	r0, r0, fp, asr #19
    11a8:	0008a823 	andeq	sl, r8, r3, lsr #16
    11ac:	cbb70100 	blgt	fedc15b4 <_estack+0xf6db15b4>
    11b0:	02000009 	andeq	r0, r0, #9
    11b4:	f6246c91 			; <UNDEFINED> instruction: 0xf6246c91
    11b8:	01000009 	tsteq	r0, r9
    11bc:	0009d1b9 			; <UNDEFINED> instruction: 0x0009d1b9
    11c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c4:	06040600 	streq	r0, [r4], -r0, lsl #12
    11c8:	06000009 	streq	r0, [r0], -r9
    11cc:	00098e04 	andeq	r8, r9, r4, lsl #28
    11d0:	09e22200 	stmibeq	r2!, {r9, sp}^
    11d4:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    11d8:	00010e80 	andeq	r0, r1, r0, lsl #29
    11dc:	000000d8 	ldrdeq	r0, [r0], -r8
    11e0:	0a259c01 	beq	9681ec <__bss_end+0x95269c>
    11e4:	f6230000 			; <UNDEFINED> instruction: 0xf6230000
    11e8:	01000009 	tsteq	r0, r9
    11ec:	0009d17e 	andeq	sp, r9, lr, ror r1
    11f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11f4:	0006f923 	andeq	pc, r6, r3, lsr #18
    11f8:	cb7e0100 	blgt	1f81600 <__bss_end+0x1f6bab0>
    11fc:	02000009 	andeq	r0, r0, #9
    1200:	27246891 			; <UNDEFINED> instruction: 0x27246891
    1204:	0100000a 	tsteq	r0, sl
    1208:	00098880 	andeq	r8, r9, r0, lsl #17
    120c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1210:	000aa924 	andeq	sl, sl, r4, lsr #18
    1214:	a7810100 	strge	r0, [r1, r0, lsl #2]
    1218:	02000008 	andeq	r0, r0, #8
    121c:	22007091 	andcs	r7, r0, #145	; 0x91
    1220:	0000078e 	andeq	r0, r0, lr, lsl #15
    1224:	0de86701 	stcleq	7, cr6, [r8, #4]!
    1228:	00980001 	addseq	r0, r8, r1
    122c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1230:	00000a65 	andeq	r0, r0, r5, ror #20
    1234:	0009f623 	andeq	pc, r9, r3, lsr #12
    1238:	d1670100 	cmnle	r7, r0, lsl #2
    123c:	02000009 	andeq	r0, r0, #9
    1240:	f9236c91 			; <UNDEFINED> instruction: 0xf9236c91
    1244:	01000006 	tsteq	r0, r6
    1248:	0009cb67 	andeq	ip, r9, r7, ror #22
    124c:	68910200 	ldmvs	r1, {r9}
    1250:	00033124 	andeq	r3, r3, r4, lsr #2
    1254:	88690100 	stmdahi	r9!, {r8}^
    1258:	02000009 	andeq	r0, r0, #9
    125c:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
    1260:	000007c9 	andeq	r0, r0, r9, asr #15
    1264:	0dbc6001 	ldceq	0, cr6, [ip, #4]!
    1268:	002c0001 	eoreq	r0, ip, r1
    126c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1270:	00000a89 	andeq	r0, r0, r9, lsl #21
    1274:	00078723 	andeq	r8, r7, r3, lsr #14
    1278:	cb600100 	blgt	1801680 <__bss_end+0x17ebb30>
    127c:	02000009 	andeq	r0, r0, #9
    1280:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    1284:	00000a67 	andeq	r0, r0, r7, ror #20
    1288:	0d544c01 	ldcleq	12, cr4, [r4, #-4]
    128c:	00680001 	rsbeq	r0, r8, r1
    1290:	9c010000 	stcls	0, cr0, [r1], {-0}
    1294:	0009f623 	andeq	pc, r9, r3, lsr #12
    1298:	d14c0100 	mrsle	r0, (UNDEF: 92)
    129c:	02000009 	andeq	r0, r0, #9
    12a0:	00007491 	muleq	r0, r1, r4
    12a4:	00000f43 	andeq	r0, r0, r3, asr #30
    12a8:	055b0004 	ldrbeq	r0, [fp, #-4]
    12ac:	01040000 	mrseq	r0, (UNDEF: 4)
    12b0:	000000d6 	ldrdeq	r0, [r0], -r6
    12b4:	000c740c 	andeq	r7, ip, ip, lsl #8
    12b8:	010ff000 	mrseq	pc, CPSR	; <UNPREDICTABLE>
    12bc:	000bb000 	andeq	fp, fp, r0
    12c0:	00068c00 	andeq	r8, r6, r0, lsl #24
    12c4:	0b690200 	bleq	1a41acc <__bss_end+0x1a2bf7c>
    12c8:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    12cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    12d0:	d8070403 	stmdale	r7, {r0, r1, sl}
    12d4:	04000006 	streq	r0, [r0], #-6
    12d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    12dc:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    12e0:	00017605 	andeq	r7, r1, r5, lsl #12
    12e4:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    12e8:	000001a4 	andeq	r0, r0, r4, lsr #3
    12ec:	05060103 	streq	r0, [r6, #-259]	; 0xfffffefd
    12f0:	03000009 	movweq	r0, #9
    12f4:	09030801 	stmdbeq	r3, {r0, fp}
    12f8:	02030000 	andeq	r0, r3, #0
    12fc:	00091f05 	andeq	r1, r9, r5, lsl #30
    1300:	07020300 	streq	r0, [r2, -r0, lsl #6]
    1304:	000000b7 	strheq	r0, [r0], -r7
    1308:	7b050403 	blvc	14231c <__bss_end+0x12c7cc>
    130c:	05000001 	streq	r0, [r0, #-1]
    1310:	00000064 	andeq	r0, r0, r4, rrx
    1314:	d3070403 	movwle	r0, #29699	; 0x7403
    1318:	05000006 	streq	r0, [r0, #-6]
    131c:	00000070 	andeq	r0, r0, r0, ror r0
    1320:	ce070803 	cdpgt	8, 0, cr0, cr7, cr3, {0}
    1324:	02000006 	andeq	r0, r0, #6
    1328:	00000874 	andeq	r0, r0, r4, ror r8
    132c:	008e2203 	addeq	r2, lr, r3, lsl #4
    1330:	04060000 	streq	r0, [r6], #-0
    1334:	00000094 	muleq	r0, r4, r0
    1338:	0009cd07 	andeq	ip, r9, r7, lsl #26
    133c:	08e40200 	stmiaeq	r4!, {r9}^
    1340:	2c040000 	stccs	0, cr0, [r4], {-0}
    1344:	00000064 	andeq	r0, r0, r4, rrx
    1348:	0009ee02 	andeq	lr, r9, r2, lsl #28
    134c:	64720400 	ldrbtvs	r0, [r2], #-1024	; 0xfffffc00
    1350:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1354:	0000087c 	andeq	r0, r0, ip, ror r8
    1358:	2c016502 	cfstr32cs	mvfx6, [r1], {2}
    135c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1360:	daa60404 	ble	fe982378 <_estack+0xf6972378>
    1364:	0a000000 	beq	136c <_start-0x6c94>
    1368:	0000086e 	andeq	r0, r0, lr, ror #16
    136c:	00afa804 	adceq	sl, pc, r4, lsl #16
    1370:	200a0000 	andcs	r0, sl, r0
    1374:	04000008 	streq	r0, [r0], #-8
    1378:	0000daa9 	andeq	sp, r0, r9, lsr #21
    137c:	4f0b0000 	svcmi	0x000b0000
    1380:	ea000000 	b	1388 <_start-0x6c78>
    1384:	0c000000 	stceq	0, cr0, [r0], {-0}
    1388:	000000ea 	andeq	r0, r0, sl, ror #1
    138c:	04030003 	streq	r0, [r3], #-3
    1390:	00016d07 	andeq	r6, r1, r7, lsl #26
    1394:	04080d00 	streq	r0, [r8], #-3328	; 0xfffff300
    1398:	000112a3 	andeq	r1, r1, r3, lsr #5
    139c:	09c50e00 	stmibeq	r5, {r9, sl, fp}^
    13a0:	a5040000 	strge	r0, [r4, #-0]
    13a4:	00000033 	andeq	r0, r0, r3, lsr r0
    13a8:	09d40e00 	ldmibeq	r4, {r9, sl, fp}^
    13ac:	aa040000 	bge	1013b4 <__bss_end+0xeb864>
    13b0:	000000bb 	strheq	r0, [r0], -fp
    13b4:	47020004 	strmi	r0, [r2, -r4]
    13b8:	04000009 	streq	r0, [r0], #-9
    13bc:	0000f1ab 	andeq	pc, r0, fp, lsr #3
    13c0:	07e30200 	strbeq	r0, [r3, r0, lsl #4]!
    13c4:	af040000 	svcge	0x00040000
    13c8:	00000083 	andeq	r0, r0, r3, lsl #1
    13cc:	2810040f 	ldmdacs	r0, {r0, r1, r2, r3, sl}
    13d0:	06000001 	streq	r0, [r0], -r1
    13d4:	00013504 	andeq	r3, r1, r4, lsl #10
    13d8:	08010300 	stmdaeq	r1, {r8, r9}
    13dc:	0000090c 	andeq	r0, r0, ip, lsl #18
    13e0:	00013510 	andeq	r3, r1, r0, lsl r5
    13e4:	0a320200 	beq	c81bec <__bss_end+0xc6c09c>
    13e8:	16050000 	strne	r0, [r5], -r0
    13ec:	00000070 	andeq	r0, r0, r0, ror r0
    13f0:	0007f411 	andeq	pc, r7, r1, lsl r4	; <UNPREDICTABLE>
    13f4:	2f051800 	svccs	0x00051800
    13f8:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    13fc:	0009680e 	andeq	r6, r9, lr, lsl #16
    1400:	9f310500 	svcls	0x00310500
    1404:	00000001 	andeq	r0, r0, r1
    1408:	006b5f12 	rsbeq	r5, fp, r2, lsl pc
    140c:	00333205 	eorseq	r3, r3, r5, lsl #4
    1410:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1414:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    1418:	00333205 	eorseq	r3, r3, r5, lsl #4
    141c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    1420:	000007dd 	ldrdeq	r0, [r0], -sp
    1424:	00333205 	eorseq	r3, r3, r5, lsl #4
    1428:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    142c:	00000a77 	andeq	r0, r0, r7, ror sl
    1430:	00333205 	eorseq	r3, r3, r5, lsl #4
    1434:	12100000 	andsne	r0, r0, #0
    1438:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    143c:	0001a533 	andeq	sl, r1, r3, lsr r5
    1440:	06001400 	streq	r1, [r0], -r0, lsl #8
    1444:	00014c04 	andeq	r4, r1, r4, lsl #24
    1448:	01410b00 	cmpeq	r1, r0, lsl #22
    144c:	01b50000 			; <UNDEFINED> instruction: 0x01b50000
    1450:	ea0c0000 	b	301458 <__bss_end+0x2eb908>
    1454:	00000000 	andeq	r0, r0, r0
    1458:	081b1100 	ldmdaeq	fp, {r8, ip}
    145c:	05240000 	streq	r0, [r4, #-0]!
    1460:	00022e37 	andeq	r2, r2, r7, lsr lr
    1464:	07160e00 	ldreq	r0, [r6, -r0, lsl #28]
    1468:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
    146c:	00000033 	andeq	r0, r0, r3, lsr r0
    1470:	09fd0e00 	ldmibeq	sp!, {r9, sl, fp}^
    1474:	3a050000 	bcc	14147c <__bss_end+0x12b92c>
    1478:	00000033 	andeq	r0, r0, r3, lsr r0
    147c:	072b0e04 	streq	r0, [fp, -r4, lsl #28]!
    1480:	3b050000 	blcc	141488 <__bss_end+0x12b938>
    1484:	00000033 	andeq	r0, r0, r3, lsr r0
    1488:	0b020e08 	bleq	84cb0 <__bss_end+0x6f160>
    148c:	3c050000 	stccc	0, cr0, [r5], {-0}
    1490:	00000033 	andeq	r0, r0, r3, lsr r0
    1494:	08be0e0c 	ldmeq	lr!, {r2, r3, r9, sl, fp}
    1498:	3d050000 	stccc	0, cr0, [r5, #-0]
    149c:	00000033 	andeq	r0, r0, r3, lsr r0
    14a0:	089e0e10 	ldmeq	lr, {r4, r9, sl, fp}
    14a4:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    14a8:	00000033 	andeq	r0, r0, r3, lsr r0
    14ac:	0a7c0e14 	beq	1f04d04 <__bss_end+0x1eef1b4>
    14b0:	3f050000 	svccc	0x00050000
    14b4:	00000033 	andeq	r0, r0, r3, lsr r0
    14b8:	09290e18 	stmdbeq	r9!, {r3, r4, r9, sl, fp}
    14bc:	40050000 	andmi	r0, r5, r0
    14c0:	00000033 	andeq	r0, r0, r3, lsr r0
    14c4:	0ac90e1c 	beq	ff244d3c <_estack+0xf7234d3c>
    14c8:	41050000 	mrsmi	r0, (UNDEF: 5)
    14cc:	00000033 	andeq	r0, r0, r3, lsr r0
    14d0:	3a130020 	bcc	4c1558 <__bss_end+0x4aba08>
    14d4:	08000007 	stmdaeq	r0, {r0, r1, r2}
    14d8:	6e4a0501 	cdpvs	5, 4, cr0, cr10, cr1, {0}
    14dc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    14e0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    14e4:	026e4b05 	rsbeq	r4, lr, #5120	; 0x1400
    14e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    14ec:	0000063e 	andeq	r0, r0, lr, lsr r6
    14f0:	026e4c05 	rsbeq	r4, lr, #1280	; 0x500
    14f4:	14800000 	strne	r0, [r0], #0
    14f8:	00000a19 	andeq	r0, r0, r9, lsl sl
    14fc:	01414e05 	cmpeq	r1, r5, lsl #28
    1500:	01000000 	mrseq	r0, (UNDEF: 0)
    1504:	00075f14 	andeq	r5, r7, r4, lsl pc
    1508:	41510500 	cmpmi	r1, r0, lsl #10
    150c:	04000001 	streq	r0, [r0], #-1
    1510:	280b0001 	stmdacs	fp, {r0}
    1514:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
    1518:	0c000002 	stceq	0, cr0, [r0], {2}
    151c:	000000ea 	andeq	r0, r0, sl, ror #1
    1520:	c713001f 			; <UNDEFINED> instruction: 0xc713001f
    1524:	90000008 	andls	r0, r0, r8
    1528:	bc5d0501 	cfldr64lt	mvdx0, [sp], {1}
    152c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1530:	00000968 	andeq	r0, r0, r8, ror #18
    1534:	02bc5e05 	adcseq	r5, ip, #5, 28	; 0x50
    1538:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    153c:	00000980 	andeq	r0, r0, r0, lsl #19
    1540:	00335f05 	eorseq	r5, r3, r5, lsl #30
    1544:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1548:	000007c4 	andeq	r0, r0, r4, asr #15
    154c:	02c26105 	sbceq	r6, r2, #1073741825	; 0x40000001
    1550:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    1554:	0000073a 	andeq	r0, r0, sl, lsr r7
    1558:	022e6205 	eoreq	r6, lr, #1342177280	; 0x50000000
    155c:	00880000 	addeq	r0, r8, r0
    1560:	027e0406 	rsbseq	r0, lr, #100663296	; 0x6000000
    1564:	d20b0000 	andle	r0, fp, #0
    1568:	d2000002 	andle	r0, r0, #2
    156c:	0c000002 	stceq	0, cr0, [r0], {2}
    1570:	000000ea 	andeq	r0, r0, sl, ror #1
    1574:	0406001f 	streq	r0, [r6], #-31	; 0xffffffe1
    1578:	000002d8 	ldrdeq	r0, [r0], -r8
    157c:	09331115 	ldmdbeq	r3!, {r0, r2, r4, r8, ip}
    1580:	05080000 	streq	r0, [r8, #-0]
    1584:	0002fe75 	andeq	pc, r2, r5, ror lr	; <UNPREDICTABLE>
    1588:	07250e00 	streq	r0, [r5, -r0, lsl #28]!
    158c:	76050000 	strvc	r0, [r5], -r0
    1590:	000002fe 	strdeq	r0, [r0], -lr
    1594:	064a0e00 	strbeq	r0, [sl], -r0, lsl #28
    1598:	77050000 	strvc	r0, [r5, -r0]
    159c:	00000033 	andeq	r0, r0, r3, lsr r0
    15a0:	04060004 	streq	r0, [r6], #-4
    15a4:	0000004f 	andeq	r0, r0, pc, asr #32
    15a8:	00095211 	andeq	r5, r9, r1, lsl r2
    15ac:	b5056800 	strlt	r6, [r5, #-2048]	; 0xfffff800
    15b0:	0000042e 	andeq	r0, r0, lr, lsr #8
    15b4:	00705f12 	rsbseq	r5, r0, r2, lsl pc
    15b8:	02feb605 	rscseq	fp, lr, #5242880	; 0x500000
    15bc:	12000000 	andne	r0, r0, #0
    15c0:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    15c4:	000033b7 			; <UNDEFINED> instruction: 0x000033b7
    15c8:	5f120400 	svcpl	0x00120400
    15cc:	b8050077 	stmdalt	r5, {r0, r1, r2, r4, r5, r6}
    15d0:	00000033 	andeq	r0, r0, r3, lsr r0
    15d4:	07580e08 	ldrbeq	r0, [r8, -r8, lsl #28]
    15d8:	b9050000 	stmdblt	r5, {}	; <UNPREDICTABLE>
    15dc:	00000056 	andeq	r0, r0, r6, asr r0
    15e0:	08370e0c 	ldmdaeq	r7!, {r2, r3, r9, sl, fp}
    15e4:	ba050000 	blt	1415ec <__bss_end+0x12ba9c>
    15e8:	00000056 	andeq	r0, r0, r6, asr r0
    15ec:	625f120e 	subsvs	r1, pc, #-536870912	; 0xe0000000
    15f0:	bb050066 	bllt	141790 <__bss_end+0x12bc40>
    15f4:	000002d9 	ldrdeq	r0, [r0], -r9
    15f8:	06e50e10 	usateq	r0, #5, r0, lsl #28
    15fc:	bc050000 	stclt	0, cr0, [r5], {-0}
    1600:	00000033 	andeq	r0, r0, r3, lsr r0
    1604:	07480e18 	smlaldeq	r0, r8, r8, lr
    1608:	c3050000 	movwgt	r0, #20480	; 0x5000
    160c:	00000128 	andeq	r0, r0, r8, lsr #2
    1610:	080b0e1c 	stmdaeq	fp, {r2, r3, r4, r9, sl, fp}
    1614:	c5050000 	strgt	r0, [r5, #-0]
    1618:	00000589 	andeq	r0, r0, r9, lsl #11
    161c:	08970e20 	ldmeq	r7, {r5, r9, sl, fp}
    1620:	c7050000 	strgt	r0, [r5, -r0]
    1624:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    1628:	09dc0e24 	ldmibeq	ip, {r2, r5, r9, sl, fp}^
    162c:	ca050000 	bgt	141634 <__bss_end+0x12bae4>
    1630:	000005d7 	ldrdeq	r0, [r0], -r7
    1634:	0ae30e28 	beq	ff8c4edc <_estack+0xf78b4edc>
    1638:	cb050000 	blgt	141640 <__bss_end+0x12baf0>
    163c:	000005f1 	strdeq	r0, [r0], -r1
    1640:	755f122c 	ldrbvc	r1, [pc, #-556]	; 141c <_start-0x6be4>
    1644:	ce050062 	cdpgt	0, 0, cr0, cr5, cr2, {3}
    1648:	000002d9 	ldrdeq	r0, [r0], -r9
    164c:	755f1230 	ldrbvc	r1, [pc, #-560]	; 1424 <_start-0x6bdc>
    1650:	cf050070 	svcgt	0x00050070
    1654:	000002fe 	strdeq	r0, [r0], -lr
    1658:	755f1238 	ldrbvc	r1, [pc, #-568]	; 1428 <_start-0x6bd8>
    165c:	d0050072 	andle	r0, r5, r2, ror r0
    1660:	00000033 	andeq	r0, r0, r3, lsr r0
    1664:	071f0e3c 			; <UNDEFINED> instruction: 0x071f0e3c
    1668:	d3050000 	movwle	r0, #20480	; 0x5000
    166c:	000005f7 	strdeq	r0, [r0], -r7
    1670:	0abb0e40 	beq	feec4f78 <_estack+0xf6eb4f78>
    1674:	d4050000 	strle	r0, [r5], #-0
    1678:	00000607 	andeq	r0, r0, r7, lsl #12
    167c:	6c5f1243 	lfmvs	f1, 2, [pc], {67}	; 0x43
    1680:	d7050062 	strle	r0, [r5, -r2, rrx]
    1684:	000002d9 	ldrdeq	r0, [r0], -r9
    1688:	076e0e44 	strbeq	r0, [lr, -r4, asr #28]!
    168c:	da050000 	ble	141694 <__bss_end+0x12bb44>
    1690:	00000033 	andeq	r0, r0, r3, lsr r0
    1694:	077f0e4c 	ldrbeq	r0, [pc, -ip, asr #28]!
    1698:	db050000 	blle	1416a0 <__bss_end+0x12bb50>
    169c:	00000099 	muleq	r0, r9, r0
    16a0:	06630e50 			; <UNDEFINED> instruction: 0x06630e50
    16a4:	de050000 	cdple	0, 0, cr0, cr5, cr0, {0}
    16a8:	0000044c 	andeq	r0, r0, ip, asr #8
    16ac:	09ce0e54 	stmibeq	lr, {r2, r4, r6, r9, sl, fp}^
    16b0:	e2050000 	and	r0, r5, #0
    16b4:	0000011d 	andeq	r0, r0, sp, lsl r1
    16b8:	095a0e58 	ldmdbeq	sl, {r3, r4, r6, r9, sl, fp}^
    16bc:	e4050000 	str	r0, [r5], #-0
    16c0:	00000112 	andeq	r0, r0, r2, lsl r1
    16c4:	088f0e5c 	stmeq	pc, {r2, r3, r4, r6, r9, sl, fp}	; <UNPREDICTABLE>
    16c8:	e5050000 	str	r0, [r5, #-0]
    16cc:	00000033 	andeq	r0, r0, r3, lsr r0
    16d0:	33160064 	tstcc	r6, #100	; 0x64
    16d4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    16d8:	17000004 	strne	r0, [r0, -r4]
    16dc:	0000044c 	andeq	r0, r0, ip, asr #8
    16e0:	00012817 	andeq	r2, r1, r7, lsl r8
    16e4:	012f1700 			; <UNDEFINED> instruction: 0x012f1700
    16e8:	33170000 	tstcc	r7, #0
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	04570406 	ldrbeq	r0, [r7], #-1030	; 0xfffffbfa
    16f4:	4c100000 	ldcmi	0, cr0, [r0], {-0}
    16f8:	18000004 	stmdane	r0, {r2}
    16fc:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    1700:	39050428 	stmdbcc	r5, {r3, r5, sl}
    1704:	00058902 	andeq	r8, r5, r2, lsl #18
    1708:	09181900 	ldmdbeq	r8, {r8, fp, ip}
    170c:	3b050000 	blcc	141714 <__bss_end+0x12bbc4>
    1710:	00003302 	andeq	r3, r0, r2, lsl #6
    1714:	67190000 	ldrvs	r0, [r9, -r0]
    1718:	05000007 	streq	r0, [r0, #-7]
    171c:	065e0240 	ldrbeq	r0, [lr], -r0, asr #4
    1720:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    1724:	00000827 	andeq	r0, r0, r7, lsr #16
    1728:	5e024005 	cdppl	0, 0, cr4, cr2, cr5, {0}
    172c:	08000006 	stmdaeq	r0, {r1, r2}
    1730:	0007ec19 	andeq	lr, r7, r9, lsl ip
    1734:	02400500 	subeq	r0, r0, #0, 10
    1738:	0000065e 	andeq	r0, r0, lr, asr r6
    173c:	097b190c 	ldmdbeq	fp!, {r2, r3, r8, fp, ip}^
    1740:	42050000 	andmi	r0, r5, #0
    1744:	00003302 	andeq	r3, r0, r2, lsl #6
    1748:	58191000 	ldmdapl	r9, {ip}
    174c:	05000006 	streq	r0, [r0, #-6]
    1750:	08400243 	stmdaeq	r0, {r0, r1, r6, r9}^
    1754:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    1758:	00000997 	muleq	r0, r7, r9
    175c:	33024605 	movwcc	r4, #9733	; 0x2605
    1760:	30000000 	andcc	r0, r0, r0
    1764:	00098519 	andeq	r8, r9, r9, lsl r5
    1768:	02470500 	subeq	r0, r7, #0, 10
    176c:	00000855 	andeq	r0, r0, r5, asr r8
    1770:	08d91934 	ldmeq	r9, {r2, r4, r5, r8, fp, ip}^
    1774:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    1778:	00003302 	andeq	r3, r0, r2, lsl #6
    177c:	8d193800 	ldchi	8, cr3, [r9, #-0]
    1780:	05000009 	streq	r0, [r0, #-9]
    1784:	0866024b 	stmdaeq	r6!, {r0, r1, r3, r6, r9}^
    1788:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
    178c:	00000866 	andeq	r0, r0, r6, ror #16
    1790:	9f024e05 	svcls	0x00024e05
    1794:	40000001 	andmi	r0, r0, r1
    1798:	00081119 	andeq	r1, r8, r9, lsl r1
    179c:	024f0500 	subeq	r0, pc, #0, 10
    17a0:	00000033 	andeq	r0, r0, r3, lsr r0
    17a4:	0afd1944 	beq	fff47cbc <_estack+0xf7f37cbc>
    17a8:	50050000 	andpl	r0, r5, r0
    17ac:	00019f02 	andeq	r9, r1, r2, lsl #30
    17b0:	eb194800 	bl	6537b8 <__bss_end+0x63dc68>
    17b4:	05000008 	streq	r0, [r0, #-8]
    17b8:	086c0251 	stmdaeq	ip!, {r0, r4, r6, r9}^
    17bc:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
    17c0:	0000082f 	andeq	r0, r0, pc, lsr #16
    17c4:	33025405 	movwcc	r5, #9221	; 0x2405
    17c8:	50000000 	andpl	r0, r0, r0
    17cc:	00077719 	andeq	r7, r7, r9, lsl r7
    17d0:	02550500 	subseq	r0, r5, #0, 10
    17d4:	0000012f 	andeq	r0, r0, pc, lsr #2
    17d8:	09111954 	ldmdbeq	r1, {r2, r4, r6, r8, fp, ip}
    17dc:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    17e0:	00081e02 	andeq	r1, r8, r2, lsl #28
    17e4:	c71a5800 	ldrgt	r5, [sl, -r0, lsl #16]
    17e8:	05000008 	streq	r0, [r0, #-8]
    17ec:	02bc027c 	adcseq	r0, ip, #124, 4	; 0xc0000007
    17f0:	01480000 	mrseq	r0, (UNDEF: 72)
    17f4:	0008441a 	andeq	r4, r8, sl, lsl r4
    17f8:	027d0500 	rsbseq	r0, sp, #0, 10
    17fc:	0000027e 	andeq	r0, r0, lr, ror r2
    1800:	9f1a014c 	svcls	0x001a014c
    1804:	0500000a 	streq	r0, [r0, #-10]
    1808:	087d0281 	ldmdaeq	sp!, {r0, r7, r9}^
    180c:	02dc0000 	sbcseq	r0, ip, #0
    1810:	0007501a 	andeq	r5, r7, sl, lsl r0
    1814:	02860500 	addeq	r0, r6, #0, 10
    1818:	00000623 	andeq	r0, r0, r3, lsr #12
    181c:	351a02e0 	ldrcc	r0, [sl, #-736]	; 0xfffffd20
    1820:	05000007 	streq	r0, [r0, #-7]
    1824:	08890287 	stmeq	r9, {r0, r1, r2, r7, r9}
    1828:	02ec0000 	rsceq	r0, ip, #0
    182c:	2e040600 	cfmadd32cs	mvax0, mvfx0, mvfx4, mvfx0
    1830:	16000004 	strne	r0, [r0], -r4
    1834:	00000033 	andeq	r0, r0, r3, lsr r0
    1838:	000005ad 	andeq	r0, r0, sp, lsr #11
    183c:	00044c17 	andeq	r4, r4, r7, lsl ip
    1840:	01281700 			; <UNDEFINED> instruction: 0x01281700
    1844:	ad170000 	ldcge	0, cr0, [r7, #-0]
    1848:	17000005 	strne	r0, [r0, -r5]
    184c:	00000033 	andeq	r0, r0, r3, lsr r0
    1850:	3c040600 	stccc	6, cr0, [r4], {-0}
    1854:	06000001 	streq	r0, [r0], -r1
    1858:	00058f04 	andeq	r8, r5, r4, lsl #30
    185c:	00a41600 	adceq	r1, r4, r0, lsl #12
    1860:	05d70000 	ldrbeq	r0, [r7]
    1864:	4c170000 	ldcmi	0, cr0, [r7], {-0}
    1868:	17000004 	strne	r0, [r0, -r4]
    186c:	00000128 	andeq	r0, r0, r8, lsr #2
    1870:	0000a417 	andeq	sl, r0, r7, lsl r4
    1874:	00331700 	eorseq	r1, r3, r0, lsl #14
    1878:	06000000 	streq	r0, [r0], -r0
    187c:	0005b904 	andeq	fp, r5, r4, lsl #18
    1880:	00331600 	eorseq	r1, r3, r0, lsl #12
    1884:	05f10000 	ldrbeq	r0, [r1, #0]!
    1888:	4c170000 	ldcmi	0, cr0, [r7], {-0}
    188c:	17000004 	strne	r0, [r0, -r4]
    1890:	00000128 	andeq	r0, r0, r8, lsr #2
    1894:	dd040600 	stcle	6, cr0, [r4, #-0]
    1898:	0b000005 	bleq	18b4 <_start-0x674c>
    189c:	0000004f 	andeq	r0, r0, pc, asr #32
    18a0:	00000607 	andeq	r0, r0, r7, lsl #12
    18a4:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    18a8:	0b000200 	bleq	20b0 <_start-0x5f50>
    18ac:	0000004f 	andeq	r0, r0, pc, asr #32
    18b0:	00000617 	andeq	r0, r0, r7, lsl r6
    18b4:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    18b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18bc:	00000940 	andeq	r0, r0, r0, asr #18
    18c0:	04011f05 	streq	r1, [r1], #-3845	; 0xfffff0fb
    18c4:	1b000003 	blne	18d8 <_start-0x6728>
    18c8:	00000a86 	andeq	r0, r0, r6, lsl #21
    18cc:	0123050c 			; <UNDEFINED> instruction: 0x0123050c
    18d0:	00000658 	andeq	r0, r0, r8, asr r6
    18d4:	00096819 	andeq	r6, r9, r9, lsl r8
    18d8:	01250500 			; <UNDEFINED> instruction: 0x01250500
    18dc:	00000658 	andeq	r0, r0, r8, asr r6
    18e0:	083d1900 	ldmdaeq	sp!, {r8, fp, ip}
    18e4:	26050000 	strcs	r0, [r5], -r0
    18e8:	00003301 	andeq	r3, r0, r1, lsl #6
    18ec:	3a190400 	bcc	6428f4 <__bss_end+0x62cda4>
    18f0:	05000009 	streq	r0, [r0, #-9]
    18f4:	065e0127 	ldrbeq	r0, [lr], -r7, lsr #2
    18f8:	00080000 	andeq	r0, r8, r0
    18fc:	06230406 	strteq	r0, [r3], -r6, lsl #8
    1900:	04060000 	streq	r0, [r6], #-0
    1904:	00000617 	andeq	r0, r0, r7, lsl r6
    1908:	0006501b 	andeq	r5, r6, fp, lsl r0
    190c:	3f050e00 	svccc	0x00050e00
    1910:	00069901 	andeq	r9, r6, r1, lsl #18
    1914:	09bf1900 	ldmibeq	pc!, {r8, fp, ip}	; <UNPREDICTABLE>
    1918:	40050000 	andmi	r0, r5, r0
    191c:	00069901 	andeq	r9, r6, r1, lsl #18
    1920:	06190000 	ldreq	r0, [r9], -r0
    1924:	0500000a 	streq	r0, [r0, #-10]
    1928:	06990141 	ldreq	r0, [r9], r1, asr #2
    192c:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    1930:	00000a22 	andeq	r0, r0, r2, lsr #20
    1934:	5d014205 	sfmpl	f4, 4, [r1, #-20]	; 0xffffffec
    1938:	0c000000 	stceq	0, cr0, [r0], {-0}
    193c:	005d0b00 	subseq	r0, sp, r0, lsl #22
    1940:	06a90000 	strteq	r0, [r9], r0
    1944:	ea0c0000 	b	30194c <__bss_end+0x2ebdfc>
    1948:	02000000 	andeq	r0, r0, #0
    194c:	05d01c00 	ldrbeq	r1, [r0, #3072]	; 0xc00
    1950:	07aa0259 	sbfxeq	r0, r9, #4, #11
    1954:	5a190000 	bpl	64195c <__bss_end+0x62be0c>
    1958:	0500000a 	streq	r0, [r0, #-10]
    195c:	002c025b 	eoreq	r0, ip, fp, asr r2
    1960:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1964:	00000a0c 	andeq	r0, r0, ip, lsl #20
    1968:	2f025c05 	svccs	0x00025c05
    196c:	04000001 	streq	r0, [r0], #-1
    1970:	00085919 	andeq	r5, r8, r9, lsl r9
    1974:	025d0500 	subseq	r0, sp, #0, 10
    1978:	000007aa 	andeq	r0, r0, sl, lsr #15
    197c:	0ad41908 	beq	ff507da4 <_estack+0xf74f7da4>
    1980:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    1984:	0001b502 	andeq	fp, r1, r2, lsl #10
    1988:	fc192400 	ldc2	4, cr2, [r9], {-0}
    198c:	05000007 	streq	r0, [r0, #-7]
    1990:	0033025f 	eorseq	r0, r3, pc, asr r2
    1994:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    1998:	00000963 	andeq	r0, r0, r3, ror #18
    199c:	7c026005 	stcvc	0, cr6, [r2], {5}
    19a0:	50000000 	andpl	r0, r0, r0
    19a4:	000aea19 	andeq	lr, sl, r9, lsl sl
    19a8:	02610500 	rsbeq	r0, r1, #0, 10
    19ac:	00000664 	andeq	r0, r0, r4, ror #12
    19b0:	096e1958 	stmdbeq	lr!, {r3, r4, r6, r8, fp, ip}^
    19b4:	62050000 	andvs	r0, r5, #0
    19b8:	00011202 	andeq	r1, r1, r2, lsl #4
    19bc:	ef196800 	svc	0x00196800
    19c0:	0500000a 	streq	r0, [r0, #-10]
    19c4:	01120263 	tsteq	r2, r3, ror #4
    19c8:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
    19cc:	000008f5 	strdeq	r0, [r0], -r5
    19d0:	12026405 	andne	r6, r2, #83886080	; 0x5000000
    19d4:	78000001 	stmdavc	r0, {r0}
    19d8:	000a9519 	andeq	r9, sl, r9, lsl r5
    19dc:	02650500 	rsbeq	r0, r5, #0, 10
    19e0:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    19e4:	084d1980 	stmdaeq	sp, {r7, r8, fp, ip}^
    19e8:	66050000 	strvs	r0, [r5], -r0
    19ec:	0007ca02 	andeq	ip, r7, r2, lsl #20
    19f0:	3a198800 	bcc	6639f8 <__bss_end+0x64dea8>
    19f4:	0500000a 	streq	r0, [r0, #-10]
    19f8:	00330267 	eorseq	r0, r3, r7, ror #4
    19fc:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
    1a00:	000007ae 	andeq	r0, r0, lr, lsr #15
    1a04:	12026805 	andne	r6, r2, #327680	; 0x50000
    1a08:	a4000001 	strge	r0, [r0], #-1
    1a0c:	00070719 	andeq	r0, r7, r9, lsl r7
    1a10:	02690500 	rsbeq	r0, r9, #0, 10
    1a14:	00000112 	andeq	r0, r0, r2, lsl r1
    1a18:	079d19ac 	ldreq	r1, [sp, ip, lsr #19]
    1a1c:	6a050000 	bvs	141a24 <__bss_end+0x12bed4>
    1a20:	00011202 	andeq	r1, r1, r2, lsl #4
    1a24:	6919b400 	ldmdbvs	r9, {sl, ip, sp, pc}
    1a28:	05000006 	streq	r0, [r0, #-6]
    1a2c:	0112026b 	tsteq	r2, fp, ror #4
    1a30:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
    1a34:	00000678 	andeq	r0, r0, r8, ror r6
    1a38:	12026c05 	andne	r6, r2, #1280	; 0x500
    1a3c:	c4000001 	strgt	r0, [r0], #-1
    1a40:	00091619 	andeq	r1, r9, r9, lsl r6
    1a44:	026d0500 	rsbeq	r0, sp, #0, 10
    1a48:	00000033 	andeq	r0, r0, r3, lsr r0
    1a4c:	350b00cc 	strcc	r0, [fp, #-204]	; 0xffffff34
    1a50:	ba000001 	blt	1a5c <_start-0x65a4>
    1a54:	0c000007 	stceq	0, cr0, [r0], {7}
    1a58:	000000ea 	andeq	r0, r0, sl, ror #1
    1a5c:	350b0019 	strcc	r0, [fp, #-25]	; 0xffffffe7
    1a60:	ca000001 	bgt	1a6c <_start-0x6594>
    1a64:	0c000007 	stceq	0, cr0, [r0], {7}
    1a68:	000000ea 	andeq	r0, r0, sl, ror #1
    1a6c:	350b0007 	strcc	r0, [fp, #-7]
    1a70:	da000001 	ble	1a7c <_start-0x6584>
    1a74:	0c000007 	stceq	0, cr0, [r0], {7}
    1a78:	000000ea 	andeq	r0, r0, sl, ror #1
    1a7c:	f01c0017 			; <UNDEFINED> instruction: 0xf01c0017
    1a80:	fe027205 	cdp2	2, 0, cr7, cr2, cr5, {0}
    1a84:	19000007 	stmdbne	r0, {r0, r1, r2}
    1a88:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    1a8c:	fe027505 	cdp2	5, 0, cr7, cr2, cr5, {0}
    1a90:	00000007 	andeq	r0, r0, r7
    1a94:	000a8c19 	andeq	r8, sl, r9, lsl ip
    1a98:	02760500 	rsbseq	r0, r6, #0, 10
    1a9c:	0000080e 	andeq	r0, r0, lr, lsl #16
    1aa0:	fe0b0078 	mcr2	0, 0, r0, cr11, cr8, {3}
    1aa4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1aa8:	0c000008 	stceq	0, cr0, [r0], {8}
    1aac:	000000ea 	andeq	r0, r0, sl, ror #1
    1ab0:	2c0b001d 	stccs	0, cr0, [fp], {29}
    1ab4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1ab8:	0c000008 	stceq	0, cr0, [r0], {8}
    1abc:	000000ea 	andeq	r0, r0, sl, ror #1
    1ac0:	f01d001d 			; <UNDEFINED> instruction: 0xf01d001d
    1ac4:	40025705 	andmi	r5, r2, r5, lsl #14
    1ac8:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1acc:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    1ad0:	a9026e05 	stmdbge	r2, {r0, r2, r9, sl, fp, sp, lr}
    1ad4:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    1ad8:	00000ac1 	andeq	r0, r0, r1, asr #21
    1adc:	da027705 	ble	9f6f8 <__bss_end+0x89ba8>
    1ae0:	00000007 	andeq	r0, r0, r7
    1ae4:	0001350b 	andeq	r3, r1, fp, lsl #10
    1ae8:	00085000 	andeq	r5, r8, r0
    1aec:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    1af0:	00180000 	andseq	r0, r8, r0
    1af4:	0006ee07 	andeq	lr, r6, r7, lsl #28
    1af8:	50040600 	andpl	r0, r4, r0, lsl #12
    1afc:	1f000008 	svcne	0x00000008
    1b00:	00000866 	andeq	r0, r0, r6, ror #16
    1b04:	00044c17 	andeq	r4, r4, r7, lsl ip
    1b08:	04060000 	streq	r0, [r6], #-0
    1b0c:	0000085b 	andeq	r0, r0, fp, asr r8
    1b10:	019f0406 	orrseq	r0, pc, r6, lsl #8
    1b14:	7d1f0000 	ldcvc	0, cr0, [pc, #-0]	; 1b1c <_start-0x64e4>
    1b18:	17000008 	strne	r0, [r0, -r8]
    1b1c:	00000033 	andeq	r0, r0, r3, lsr r0
    1b20:	83040600 	movwhi	r0, #17920	; 0x4600
    1b24:	06000008 	streq	r0, [r0], -r8
    1b28:	00087204 	andeq	r7, r8, r4, lsl #4
    1b2c:	06170b00 	ldreq	r0, [r7], -r0, lsl #22
    1b30:	08990000 	ldmeq	r9, {}	; <UNPREDICTABLE>
    1b34:	ea0c0000 	b	301b3c <__bss_end+0x2ebfec>
    1b38:	02000000 	andeq	r0, r0, #0
    1b3c:	0a4e2000 	beq	1389b44 <__bss_end+0x1373ff4>
    1b40:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
    1b44:	00044c02 	andeq	r4, r4, r2, lsl #24
    1b48:	0a472000 	beq	11c9b50 <__bss_end+0x11b4000>
    1b4c:	ff050000 			; <UNDEFINED> instruction: 0xff050000
    1b50:	00045202 	andeq	r5, r4, r2, lsl #4
    1b54:	bc040600 	stclt	6, cr0, [r4], {-0}
    1b58:	10000008 	andne	r0, r0, r8
    1b5c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    1b60:	08cf2221 	stmiaeq	pc, {r0, r5, r9, sp}^	; <UNPREDICTABLE>
    1b64:	63060000 	movwvs	r0, #24576	; 0x6000
    1b68:	0000012f 	andeq	r0, r0, pc, lsr #2
    1b6c:	00000c02 	andeq	r0, r0, r2, lsl #24
    1b70:	701f0700 	andsvc	r0, pc, r0, lsl #14
    1b74:	11000000 	mrsne	r0, (UNDEF: 0)
    1b78:	00000386 	andeq	r0, r0, r6, lsl #7
    1b7c:	1c690814 	stclne	8, cr0, [r9], #-80	; 0xffffffb0
    1b80:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    1b84:	00000339 	andeq	r0, r0, r9, lsr r3
    1b88:	08c86b08 	stmiaeq	r8, {r3, r8, r9, fp, sp, lr}^
    1b8c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1b90:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1b94:	09216c08 	stmdbeq	r1!, {r3, sl, fp, sp, lr}
    1b98:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1b9c:	000003f6 	strdeq	r0, [r0], -r6
    1ba0:	09216d08 	stmdbeq	r1!, {r3, r8, sl, fp, sp, lr}
    1ba4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    1ba8:	0000035b 	andeq	r0, r0, fp, asr r3
    1bac:	01286e08 			; <UNDEFINED> instruction: 0x01286e08
    1bb0:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    1bb4:	00000304 	andeq	r0, r0, r4, lsl #6
    1bb8:	01286f08 			; <UNDEFINED> instruction: 0x01286f08
    1bbc:	00100000 	andseq	r0, r0, r0
    1bc0:	0008d305 	andeq	sp, r8, r5, lsl #6
    1bc4:	1c040600 	stcne	6, cr0, [r4], {-0}
    1bc8:	02000009 	andeq	r0, r0, #9
    1bcc:	000004f2 	strdeq	r0, [r0], -r2
    1bd0:	08d37108 	ldmeq	r3, {r3, r8, ip, sp, lr}^
    1bd4:	27050000 	strcs	r0, [r5, -r0]
    1bd8:	11000009 	tstne	r0, r9
    1bdc:	00000597 	muleq	r0, r7, r5
    1be0:	6873080c 	ldmdavs	r3!, {r2, r3, fp}^
    1be4:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    1be8:	00000339 	andeq	r0, r0, r9, lsr r3
    1bec:	08c87508 	stmiaeq	r8, {r3, r8, sl, ip, sp, lr}^
    1bf0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1bf4:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1bf8:	09217608 	stmdbeq	r1!, {r3, r9, sl, ip, sp, lr}
    1bfc:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1c00:	000003f6 	strdeq	r0, [r0], -r6
    1c04:	09217708 	stmdbeq	r1!, {r3, r8, r9, sl, ip, sp, lr}
    1c08:	00080000 	andeq	r0, r8, r0
    1c0c:	00046602 	andeq	r6, r4, r2, lsl #12
    1c10:	37790800 	ldrbcc	r0, [r9, -r0, lsl #16]!
    1c14:	05000009 	streq	r0, [r0, #-9]
    1c18:	00000968 	andeq	r0, r0, r8, ror #18
    1c1c:	0005a711 	andeq	sl, r5, r1, lsl r7
    1c20:	7e081400 	cfcpysvc	mvf1, mvf8
    1c24:	000009a9 	andeq	r0, r0, r9, lsr #19
    1c28:	0004850e 	andeq	r8, r4, lr, lsl #10
    1c2c:	77800800 	strvc	r0, [r0, r0, lsl #16]
    1c30:	00000000 	andeq	r0, r0, r0
    1c34:	0003310e 	andeq	r3, r3, lr, lsl #2
    1c38:	a9810800 	stmibge	r1, {fp}
    1c3c:	04000009 	streq	r0, [r0], #-9
    1c40:	0003520e 	andeq	r5, r3, lr, lsl #4
    1c44:	73820800 	orrvc	r0, r2, #0, 16
    1c48:	08000009 	stmdaeq	r0, {r0, r3}
    1c4c:	32040600 	andcc	r0, r4, #0, 12
    1c50:	02000009 	andeq	r0, r0, #9
    1c54:	000009f7 	strdeq	r0, [r0], -r7
    1c58:	09788308 	ldmdbeq	r8!, {r3, r8, r9, pc}^
    1c5c:	c9110000 	ldmdbgt	r1, {}	; <UNPREDICTABLE>
    1c60:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1c64:	09df6809 	ldmibeq	pc, {r0, r3, fp, sp, lr}^	; <UNPREDICTABLE>
    1c68:	020e0000 	andeq	r0, lr, #0
    1c6c:	0900000c 	stmdbeq	r0, {r2, r3}
    1c70:	0000646a 	andeq	r6, r0, sl, ror #8
    1c74:	3f0e0000 	svccc	0x000e0000
    1c78:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    1c7c:	0008c86b 	andeq	ip, r8, fp, ror #16
    1c80:	02000400 	andeq	r0, r0, #0, 8
    1c84:	00000c67 	andeq	r0, r0, r7, ror #24
    1c88:	09ba6c09 	ldmibeq	sl!, {r0, r3, sl, fp, sp, lr}
    1c8c:	65110000 	ldrvs	r0, [r1, #-0]
    1c90:	4c00000d 	stcmi	0, cr0, [r0], {13}
    1c94:	0a7b7901 	beq	1ee00a0 <__bss_end+0x1eca550>
    1c98:	280e0000 	stmdacs	lr, {}	; <UNPREDICTABLE>
    1c9c:	0100000c 	tsteq	r0, ip
    1ca0:	000a7b7b 	andeq	r7, sl, fp, ror fp
    1ca4:	f30e0000 	vhadd.u8	d0, d14, d0
    1ca8:	0100000d 	tsteq	r0, sp
    1cac:	000a7b7c 	andeq	r7, sl, ip, ror fp
    1cb0:	2a0e0400 	bcs	382cb8 <__bss_end+0x36d168>
    1cb4:	0100000e 	tsteq	r0, lr
    1cb8:	000a7b7e 	andeq	r7, sl, lr, ror fp
    1cbc:	e80e0800 	stmda	lr, {fp}
    1cc0:	0100000b 	tsteq	r0, fp
    1cc4:	000a7b7f 	andeq	r7, sl, pc, ror fp
    1cc8:	040e0c00 	streq	r0, [lr], #-3072	; 0xfffff400
    1ccc:	0100000e 	tsteq	r0, lr
    1cd0:	0009af81 	andeq	sl, r9, r1, lsl #31
    1cd4:	9f0e1000 	svcls	0x000e1000
    1cd8:	0100000b 	tsteq	r0, fp
    1cdc:	0009af82 	andeq	sl, r9, r2, lsl #31
    1ce0:	a90e2400 	stmdbge	lr, {sl, sp}
    1ce4:	0100000d 	tsteq	r0, sp
    1ce8:	00007784 	andeq	r7, r0, r4, lsl #15
    1cec:	dc0e3800 	stcle	8, cr3, [lr], {-0}
    1cf0:	0100000c 	tsteq	r0, ip
    1cf4:	00007085 	andeq	r7, r0, r5, lsl #1
    1cf8:	340e3c00 	strcc	r3, [lr], #-3072	; 0xfffff400
    1cfc:	0100000e 	tsteq	r0, lr
    1d00:	00007086 	andeq	r7, r0, r6, lsl #1
    1d04:	eb0e4000 	bl	391d0c <__bss_end+0x37c1bc>
    1d08:	0100000d 	tsteq	r0, sp
    1d0c:	00006b88 	andeq	r6, r0, r8, lsl #23
    1d10:	8a0e4400 	bhi	392d18 <__bss_end+0x37d1c8>
    1d14:	0100000b 	tsteq	r0, fp
    1d18:	00006b89 	andeq	r6, r0, r9, lsl #23
    1d1c:	06004800 	streq	r4, [r0], -r0, lsl #16
    1d20:	00004804 	andeq	r4, r0, r4, lsl #16
    1d24:	0d500200 	lfmeq	f0, 2, [r0, #-0]
    1d28:	90010000 	andls	r0, r1, r0
    1d2c:	000009ea 	andeq	r0, r0, sl, ror #19
    1d30:	000cba02 	andeq	fp, ip, r2, lsl #20
    1d34:	9c980100 	ldflss	f0, [r8], {0}
    1d38:	1000000a 	andne	r0, r0, sl
    1d3c:	00000a8c 	andeq	r0, r0, ip, lsl #21
    1d40:	0a810406 	beq	fe042d60 <_estack+0xf6032d60>
    1d44:	9c100000 	ldcls	0, cr0, [r0], {-0}
    1d48:	2300000a 	movwcs	r0, #10
    1d4c:	00000b31 	andeq	r0, r0, r1, lsr fp
    1d50:	64056901 	strvs	r6, [r5], #-2305	; 0xfffff6ff
    1d54:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1d58:	4800011b 	stmdami	r0, {r0, r1, r3, r4, r8}
    1d5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d60:	000ae09c 	muleq	sl, ip, r0
    1d64:	0b612400 	bleq	184ad6c <__bss_end+0x183521c>
    1d68:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1d6c:	000a9705 	andeq	r9, sl, r5, lsl #14
    1d70:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d74:	000c4d25 	andeq	r4, ip, r5, lsr #26
    1d78:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    1d7c:	00000064 	andeq	r0, r0, r4, rrx
    1d80:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d84:	000bf326 	andeq	pc, fp, r6, lsr #6
    1d88:	055d0100 	ldrbeq	r0, [sp, #-256]	; 0xffffff00
    1d8c:	00000064 	andeq	r0, r0, r4, rrx
    1d90:	00011b0c 	andeq	r1, r1, ip, lsl #22
    1d94:	0000004c 	andeq	r0, r0, ip, asr #32
    1d98:	0b199c01 	bleq	668da4 <__bss_end+0x653254>
    1d9c:	61240000 			; <UNDEFINED> instruction: 0x61240000
    1da0:	0100000b 	tsteq	r0, fp
    1da4:	0a97055d 	beq	fe5c3320 <_estack+0xf65b3320>
    1da8:	91020000 	mrsls	r0, (UNDEF: 2)
    1dac:	0c4d256c 	cfstr64eq	mvdx2, [sp], {108}	; 0x6c
    1db0:	5f010000 	svcpl	0x00010000
    1db4:	00006405 	andeq	r6, r0, r5, lsl #8
    1db8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1dbc:	0b702300 	bleq	1c0a9c4 <__bss_end+0x1bf4e74>
    1dc0:	52010000 	andpl	r0, r1, #0
    1dc4:	00006405 	andeq	r6, r0, r5, lsl #8
    1dc8:	011acc00 	tsteq	sl, r0, lsl #24
    1dcc:	00004000 	andeq	r4, r0, r0
    1dd0:	529c0100 	addspl	r0, ip, #0, 2
    1dd4:	2400000b 	strcs	r0, [r0], #-11
    1dd8:	00000b61 	andeq	r0, r0, r1, ror #22
    1ddc:	97055201 	strls	r5, [r5, -r1, lsl #4]
    1de0:	0200000a 	andeq	r0, r0, #10
    1de4:	4d256c91 	stcmi	12, cr6, [r5, #-580]!	; 0xfffffdbc
    1de8:	0100000c 	tsteq	r0, ip
    1dec:	00640554 	rsbeq	r0, r4, r4, asr r5
    1df0:	91020000 	mrsls	r0, (UNDEF: 2)
    1df4:	3c260074 	stccc	0, cr0, [r6], #-464	; 0xfffffe30
    1df8:	0100000c 	tsteq	r0, ip
    1dfc:	00640546 	rsbeq	r0, r4, r6, asr #10
    1e00:	1a880000 	bne	fe201e08 <_estack+0xf61f1e08>
    1e04:	00440001 	subeq	r0, r4, r1
    1e08:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e0c:	00000b8b 	andeq	r0, r0, fp, lsl #23
    1e10:	000b6124 	andeq	r6, fp, r4, lsr #2
    1e14:	05460100 	strbeq	r0, [r6, #-256]	; 0xffffff00
    1e18:	00000a97 	muleq	r0, r7, sl
    1e1c:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    1e20:	00000c4d 	andeq	r0, r0, sp, asr #24
    1e24:	64054801 	strvs	r4, [r5], #-2049	; 0xfffff7ff
    1e28:	02000000 	andeq	r0, r0, #0
    1e2c:	27007491 			; <UNDEFINED> instruction: 0x27007491
    1e30:	00000ddc 	ldrdeq	r0, [r0], -ip
    1e34:	84050601 	strhi	r0, [r5], #-1537	; 0xfffff9ff
    1e38:	04000119 	streq	r0, [r0], #-281	; 0xfffffee7
    1e3c:	01000001 	tsteq	r0, r1
    1e40:	000bb19c 	muleq	fp, ip, r1
    1e44:	0b612400 	bleq	184ae4c <__bss_end+0x18352fc>
    1e48:	06010000 	streq	r0, [r1], -r0
    1e4c:	000a8c05 	andeq	r8, sl, r5, lsl #24
    1e50:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e54:	0d942700 	ldceq	7, cr2, [r4]
    1e58:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    1e5c:	0118f404 	tsteq	r8, r4, lsl #8	; <UNPREDICTABLE>
    1e60:	00009000 	andeq	r9, r0, r0
    1e64:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    1e68:	2400000b 	strcs	r0, [r0], #-11
    1e6c:	00000b61 	andeq	r0, r0, r1, ror #22
    1e70:	a204f801 	andge	pc, r4, #65536	; 0x10000
    1e74:	0200000a 	andeq	r0, r0, #10
    1e78:	4f247491 	svcmi	0x00247491
    1e7c:	0100000e 	tsteq	r0, lr
    1e80:	08b104f8 	ldmeq	r1!, {r3, r4, r5, r6, r7, sl}
    1e84:	91020000 	mrsls	r0, (UNDEF: 2)
    1e88:	b6270070 			; <UNDEFINED> instruction: 0xb6270070
    1e8c:	0100000b 	tsteq	r0, fp
    1e90:	17c804d2 			; <UNDEFINED> instruction: 0x17c804d2
    1e94:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
    1e98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e9c:	00000c2a 	andeq	r0, r0, sl, lsr #24
    1ea0:	000b6124 	andeq	r6, fp, r4, lsr #2
    1ea4:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    1ea8:	00000a9c 	muleq	r0, ip, sl
    1eac:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    1eb0:	00000d42 	andeq	r0, r0, r2, asr #26
    1eb4:	b104d201 	tstlt	r4, r1, lsl #4
    1eb8:	02000008 	andeq	r0, r0, #8
    1ebc:	fa247091 	blx	91e108 <__bss_end+0x9085b8>
    1ec0:	0100000d 	tsteq	r0, sp
    1ec4:	006404d2 	ldrdeq	r0, [r4], #-66	; 0xffffffbe	; <UNPREDICTABLE>
    1ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    1ecc:	9228006c 	eorls	r0, r8, #108	; 0x6c
    1ed0:	0100000b 	tsteq	r0, fp
    1ed4:	179404a9 	ldrne	r0, [r4, r9, lsr #9]
    1ed8:	00340001 	eorseq	r0, r4, r1
    1edc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ee0:	00000c50 	andeq	r0, r0, r0, asr ip
    1ee4:	000b6124 	andeq	r6, fp, r4, lsr #2
    1ee8:	04a90100 	strteq	r0, [r9], #256	; 0x100
    1eec:	00000a8c 	andeq	r0, r0, ip, lsl #21
    1ef0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ef4:	000d2423 	andeq	r2, sp, r3, lsr #8
    1ef8:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    1efc:	00000070 	andeq	r0, r0, r0, ror r0
    1f00:	00011764 	andeq	r1, r1, r4, ror #14
    1f04:	00000030 	andeq	r0, r0, r0, lsr r0
    1f08:	0c899c01 	stceq	12, cr9, [r9], {1}
    1f0c:	61240000 			; <UNDEFINED> instruction: 0x61240000
    1f10:	0100000b 	tsteq	r0, fp
    1f14:	0a97049d 	beq	fe5c3190 <_estack+0xf65b3190>
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	0c4c256c 	cfstr64eq	mvdx2, [ip], {108}	; 0x6c
    1f20:	9f010000 	svcls	0x00010000
    1f24:	00007004 	andeq	r7, r0, r4
    1f28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f2c:	0b4a2900 	bleq	128c334 <__bss_end+0x12767e4>
    1f30:	8f010000 	svchi	0x00010000
    1f34:	00007004 	andeq	r7, r0, r4
    1f38:	01173000 	tsteq	r7, r0
    1f3c:	00003400 	andeq	r3, r0, r0, lsl #8
    1f40:	c29c0100 	addsgt	r0, ip, #0, 2
    1f44:	2400000c 	strcs	r0, [r0], #-12
    1f48:	00000b61 	andeq	r0, r0, r1, ror #22
    1f4c:	97048f01 	strls	r8, [r4, -r1, lsl #30]
    1f50:	0200000a 	andeq	r0, r0, #10
    1f54:	4c256c91 	stcmi	12, cr6, [r5], #-580	; 0xfffffdbc
    1f58:	0100000c 	tsteq	r0, ip
    1f5c:	00700491 			; <UNDEFINED> instruction: 0x00700491
    1f60:	91020000 	mrsls	r0, (UNDEF: 2)
    1f64:	c7290074 			; <UNDEFINED> instruction: 0xc7290074
    1f68:	0100000c 	tsteq	r0, ip
    1f6c:	00640456 	rsbeq	r0, r4, r6, asr r4
    1f70:	16500000 	ldrbne	r0, [r0], -r0
    1f74:	00e00001 	rsceq	r0, r0, r1
    1f78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f7c:	00000d28 	andeq	r0, r0, r8, lsr #26
    1f80:	000b6124 	andeq	r6, fp, r4, lsr #2
    1f84:	04560100 	ldrbeq	r0, [r6], #-256	; 0xffffff00
    1f88:	00000a8c 	andeq	r0, r0, ip, lsl #21
    1f8c:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    1f90:	00000e4f 	andeq	r0, r0, pc, asr #28
    1f94:	2a045601 	bcs	1177a0 <__bss_end+0x101c50>
    1f98:	02000001 	andeq	r0, r0, #1
    1f9c:	fc246891 	stc2	8, cr6, [r4], #-580	; 0xfffffdbc
    1fa0:	0100000c 	tsteq	r0, ip
    1fa4:	0d280456 	cfstrseq	mvf0, [r8, #-344]!	; 0xfffffea8
    1fa8:	91020000 	mrsls	r0, (UNDEF: 2)
    1fac:	0c4d2564 	cfstr64eq	mvdx2, [sp], {100}	; 0x64
    1fb0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    1fb4:	00006404 	andeq	r6, r0, r4, lsl #8
    1fb8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fbc:	000c1125 	andeq	r1, ip, r5, lsr #2
    1fc0:	04590100 	ldrbeq	r0, [r9], #-256	; 0xffffff00
    1fc4:	00000070 	andeq	r0, r0, r0, ror r0
    1fc8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1fcc:	00640406 	rsbeq	r0, r4, r6, lsl #8
    1fd0:	d3290000 			; <UNDEFINED> instruction: 0xd3290000
    1fd4:	0100000b 	tsteq	r0, fp
    1fd8:	006403c1 	rsbeq	r0, r4, r1, asr #7
    1fdc:	144c0000 	strbne	r0, [ip], #-0
    1fe0:	02040001 	andeq	r0, r4, #1
    1fe4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fe8:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
    1fec:	000b6124 	andeq	r6, fp, r4, lsr #2
    1ff0:	03c10100 	biceq	r0, r1, #0, 2
    1ff4:	00000a8c 	andeq	r0, r0, ip, lsl #21
    1ff8:	24649102 	strbtcs	r9, [r4], #-258	; 0xfffffefe
    1ffc:	00000e4f 	andeq	r0, r0, pc, asr #28
    2000:	2a03c101 	bcs	f240c <__bss_end+0xdc8bc>
    2004:	02000001 	andeq	r0, r0, #1
    2008:	92246091 	eorls	r6, r4, #145	; 0x91
    200c:	01000010 	tsteq	r0, r0, lsl r0
    2010:	08c803c1 	stmiaeq	r8, {r0, r6, r7, r8, r9}^
    2014:	91020000 	mrsls	r0, (UNDEF: 2)
    2018:	0c2f245c 	cfstrseq	mvf2, [pc], #-368	; 1eb0 <_start-0x6150>
    201c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2020:	00006403 	andeq	r6, r0, r3, lsl #8
    2024:	58910200 	ldmpl	r1, {r9}
    2028:	000d5725 	andeq	r5, sp, r5, lsr #14
    202c:	03c30100 	biceq	r0, r3, #0, 2
    2030:	00000064 	andeq	r0, r0, r4, rrx
    2034:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    2038:	000011bf 			; <UNDEFINED> instruction: 0x000011bf
    203c:	df03c401 	svcle	0x0003c401
    2040:	02000009 	andeq	r0, r0, #9
    2044:	e5256891 	str	r6, [r5, #-2193]!	; 0xfffff76f
    2048:	0100000c 	tsteq	r0, ip
    204c:	0a7b03c5 	beq	1ec2f68 <__bss_end+0x1ead418>
    2050:	91020000 	mrsls	r0, (UNDEF: 2)
    2054:	0c290070 	stceq	0, cr0, [r9], #-448	; 0xfffffe40
    2058:	0100000b 	tsteq	r0, fp
    205c:	00640386 	rsbeq	r0, r4, r6, lsl #7
    2060:	13700000 	cmnne	r0, #0
    2064:	00dc0001 	sbcseq	r0, ip, r1
    2068:	9c010000 	stcls	0, cr0, [r1], {-0}
    206c:	00000e27 	andeq	r0, r0, r7, lsr #28
    2070:	000b6124 	andeq	r6, fp, r4, lsr #2
    2074:	03860100 	orreq	r0, r6, #0, 2
    2078:	00000a8c 	andeq	r0, r0, ip, lsl #21
    207c:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    2080:	00000d42 	andeq	r0, r0, r2, asr #26
    2084:	b7038601 	strlt	r8, [r3, -r1, lsl #12]
    2088:	02000008 	andeq	r0, r0, #8
    208c:	fc246891 	stc2	8, cr6, [r4], #-580	; 0xfffffdbc
    2090:	0100000c 	tsteq	r0, ip
    2094:	0d280386 	stceq	3, cr0, [r8, #-536]!	; 0xfffffde8
    2098:	91020000 	mrsls	r0, (UNDEF: 2)
    209c:	0dce2464 	cfstrdeq	mvd2, [lr, #400]	; 0x190
    20a0:	86010000 	strhi	r0, [r1], -r0
    20a4:	00006403 	andeq	r6, r0, r3, lsl #8
    20a8:	60910200 	addsvs	r0, r1, r0, lsl #4
    20ac:	000c4d25 	andeq	r4, ip, r5, lsr #26
    20b0:	03880100 	orreq	r0, r8, #0, 2
    20b4:	00000064 	andeq	r0, r0, r4, rrx
    20b8:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    20bc:	00000c11 	andeq	r0, r0, r1, lsl ip
    20c0:	70038901 	andvc	r8, r3, r1, lsl #18
    20c4:	02000000 	andeq	r0, r0, #0
    20c8:	29007091 	stmdbcs	r0, {r0, r4, r7, ip, sp, lr}
    20cc:	00000c55 	andeq	r0, r0, r5, asr ip
    20d0:	64024101 	strvs	r4, [r2], #-257	; 0xfffffeff
    20d4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    20d8:	a4000111 	strge	r0, [r0], #-273	; 0xfffffeef
    20dc:	01000001 	tsteq	r0, r1
    20e0:	000e9c9c 	muleq	lr, ip, ip
    20e4:	0b612400 	bleq	184b0ec <__bss_end+0x183559c>
    20e8:	41010000 	mrsmi	r0, (UNDEF: 1)
    20ec:	000a8c02 	andeq	r8, sl, r2, lsl #24
    20f0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    20f4:	000d4224 	andeq	r4, sp, r4, lsr #4
    20f8:	02410100 	subeq	r0, r1, #0, 2
    20fc:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    2100:	24609102 	strbtcs	r9, [r0], #-258	; 0xfffffefe
    2104:	00001092 	muleq	r0, r2, r0
    2108:	c8024101 	stmdagt	r2, {r0, r8, lr}
    210c:	02000008 	andeq	r0, r0, #8
    2110:	ce245c91 	mcrgt	12, 1, r5, cr4, cr1, {4}
    2114:	0100000d 	tsteq	r0, sp
    2118:	00640241 	rsbeq	r0, r4, r1, asr #4
    211c:	91020000 	mrsls	r0, (UNDEF: 2)
    2120:	0d572558 	cfldr64eq	mvdx2, [r7, #-352]	; 0xfffffea0
    2124:	43010000 	movwmi	r0, #4096	; 0x1000
    2128:	00006402 	andeq	r6, r0, r2, lsl #8
    212c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2130:	0011bf25 	andseq	fp, r1, r5, lsr #30
    2134:	02440100 	subeq	r0, r4, #0, 2
    2138:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    213c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2140:	000d8029 	andeq	r8, sp, r9, lsr #32
    2144:	01420100 	mrseq	r0, (UNDEF: 82)
    2148:	00000a8c 	andeq	r0, r0, ip, lsl #21
    214c:	00011104 	andeq	r1, r1, r4, lsl #2
    2150:	000000c8 	andeq	r0, r0, r8, asr #1
    2154:	0f119c01 	svceq	0x00119c01
    2158:	16240000 	strtne	r0, [r4], -r0
    215c:	0100000d 	tsteq	r0, sp
    2160:	00700142 	rsbseq	r0, r0, r2, asr #2
    2164:	91020000 	mrsls	r0, (UNDEF: 2)
    2168:	0e342464 	cdpeq	4, 3, cr2, cr4, cr4, {3}
    216c:	42010000 	andmi	r0, r1, #0
    2170:	00007001 	andeq	r7, r0, r1
    2174:	60910200 	addsvs	r0, r1, r0, lsl #4
    2178:	000b2524 	andeq	r2, fp, r4, lsr #10
    217c:	01420100 	mrseq	r0, (UNDEF: 82)
    2180:	0000004f 	andeq	r0, r0, pc, asr #32
    2184:	255f9102 	ldrbcs	r9, [pc, #-258]	; 208a <_start-0x5f76>
    2188:	00000d75 	andeq	r0, r0, r5, ror sp
    218c:	9c014401 	cfstrsls	mvf4, [r1], {1}
    2190:	0200000a 	andeq	r0, r0, #10
    2194:	18257091 	stmdane	r5!, {r0, r4, r7, ip, sp, lr}
    2198:	0100000e 	tsteq	r0, lr
    219c:	00210145 	eoreq	r0, r1, r5, asr #2
    21a0:	91020000 	mrsls	r0, (UNDEF: 2)
    21a4:	0c4d256c 	cfstr64eq	mvdx2, [sp], {108}	; 0x6c
    21a8:	46010000 	strmi	r0, [r1], -r0
    21ac:	000a8c01 	andeq	r8, sl, r1, lsl #24
    21b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    21b4:	0dbb2a00 			; <UNDEFINED> instruction: 0x0dbb2a00
    21b8:	17010000 	strne	r0, [r1, -r0]
    21bc:	00006401 	andeq	r6, r0, r1, lsl #8
    21c0:	010ff000 	mrseq	pc, CPSR	; <UNPREDICTABLE>
    21c4:	00011400 	andeq	r1, r1, r0, lsl #8
    21c8:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    21cc:	00000b61 	andeq	r0, r0, r1, ror #22
    21d0:	8c011701 	stchi	7, cr1, [r1], {1}
    21d4:	0200000a 	andeq	r0, r0, #10
    21d8:	76247491 			; <UNDEFINED> instruction: 0x76247491
    21dc:	0100000d 	tsteq	r0, sp
    21e0:	00640117 	rsbeq	r0, r4, r7, lsl r1
    21e4:	91020000 	mrsls	r0, (UNDEF: 2)
    21e8:	48000070 	stmdami	r0, {r4, r5, r6}
    21ec:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    21f0:	0007b000 	andeq	fp, r7, r0
    21f4:	d6010400 	strle	r0, [r1], -r0, lsl #8
    21f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    21fc:	000011f4 	strdeq	r1, [r0], -r4
    2200:	00001249 	andeq	r1, r0, r9, asr #4
    2204:	00011ba0 	andeq	r1, r1, r0, lsr #23
    2208:	00001920 	andeq	r1, r0, r0, lsr #18
    220c:	00000a20 	andeq	r0, r0, r0, lsr #20
    2210:	05060102 	streq	r0, [r6, #-258]	; 0xfffffefe
    2214:	03000009 	movweq	r0, #9
    2218:	00000025 	andeq	r0, r0, r5, lsr #32
    221c:	03080102 	movweq	r0, #33026	; 0x8102
    2220:	02000009 	andeq	r0, r0, #9
    2224:	091f0502 	ldmdbeq	pc, {r1, r8, sl}	; <UNPREDICTABLE>
    2228:	02020000 	andeq	r0, r2, #0
    222c:	0000b707 	andeq	fp, r0, r7, lsl #14
    2230:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2234:	0000017b 	andeq	r0, r0, fp, ror r1
    2238:	00004604 	andeq	r4, r0, r4, lsl #12
    223c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2240:	000006d3 	ldrdeq	r0, [r0], -r3
    2244:	00005204 	andeq	r5, r0, r4, lsl #4
    2248:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    224c:	00000176 	andeq	r0, r0, r6, ror r1
    2250:	ce070802 	cdpgt	8, 0, cr0, cr7, cr2, {0}
    2254:	05000006 	streq	r0, [r0, #-6]
    2258:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    225c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2260:	0006d807 	andeq	sp, r6, r7, lsl #16
    2264:	0b690600 	bleq	1a43a6c <__bss_end+0x1a2df1c>
    2268:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    226c:	00000073 	andeq	r0, r0, r3, ror r0
    2270:	a4040802 	strge	r0, [r4], #-2050	; 0xfffff7fe
    2274:	07000001 	streq	r0, [r0, -r1]
    2278:	08740604 	ldmdaeq	r4!, {r2, r9, sl}^
    227c:	22030000 	andcs	r0, r3, #0
    2280:	00000099 	muleq	r0, r9, r0
    2284:	009f0408 	addseq	r0, pc, r8, lsl #8
    2288:	cd090000 	stcgt	0, cr0, [r9, #-0]
    228c:	06000009 	streq	r0, [r0], -r9
    2290:	000008e4 	andeq	r0, r0, r4, ror #17
    2294:	00462c04 	subeq	r2, r6, r4, lsl #24
    2298:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    229c:	04000009 	streq	r0, [r0], #-9
    22a0:	00004672 	andeq	r4, r0, r2, ror r6
    22a4:	087c0a00 	ldmdaeq	ip!, {r9, fp}^
    22a8:	65020000 	strvs	r0, [r2, #-0]
    22ac:	00007301 	andeq	r7, r0, r1, lsl #6
    22b0:	04040b00 	streq	r0, [r4], #-2816	; 0xfffff500
    22b4:	0000e5a6 	andeq	lr, r0, r6, lsr #11
    22b8:	086e0c00 	stmdaeq	lr!, {sl, fp}^
    22bc:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    22c0:	000000ba 	strheq	r0, [r0], -sl
    22c4:	0008200c 	andeq	r2, r8, ip
    22c8:	e5a90400 	str	r0, [r9, #1024]!	; 0x400
    22cc:	00000000 	andeq	r0, r0, r0
    22d0:	0000310d 	andeq	r3, r0, sp, lsl #2
    22d4:	0000f500 	andeq	pc, r0, r0, lsl #10
    22d8:	00f50e00 	rscseq	r0, r5, r0, lsl #28
    22dc:	00030000 	andeq	r0, r3, r0
    22e0:	6d070402 	cfstrsvs	mvf0, [r7, #-8]
    22e4:	0f000001 	svceq	0x00000001
    22e8:	1da30408 	cfstrsne	mvf0, [r3, #32]!
    22ec:	10000001 	andne	r0, r0, r1
    22f0:	000009c5 	andeq	r0, r0, r5, asr #19
    22f4:	006ca504 	rsbeq	sl, ip, r4, lsl #10
    22f8:	10000000 	andne	r0, r0, r0
    22fc:	000009d4 	ldrdeq	r0, [r0], -r4
    2300:	00c6aa04 	sbceq	sl, r6, r4, lsl #20
    2304:	00040000 	andeq	r0, r4, r0
    2308:	00094706 	andeq	r4, r9, r6, lsl #14
    230c:	fcab0400 	stc2	4, cr0, [fp]
    2310:	06000000 	streq	r0, [r0], -r0
    2314:	000007e3 	andeq	r0, r0, r3, ror #15
    2318:	008eaf04 	addeq	sl, lr, r4, lsl #30
    231c:	32060000 	andcc	r0, r6, #0
    2320:	0500000a 	streq	r0, [r0, #-10]
    2324:	00005216 	andeq	r5, r0, r6, lsl r2
    2328:	07f41100 	ldrbeq	r1, [r4, r0, lsl #2]!
    232c:	05180000 	ldreq	r0, [r8, #-0]
    2330:	0001912f 	andeq	r9, r1, pc, lsr #2
    2334:	09681000 	stmdbeq	r8!, {ip}^
    2338:	31050000 	mrscc	r0, (UNDEF: 5)
    233c:	00000191 	muleq	r0, r1, r1
    2340:	6b5f1200 	blvs	17c6b48 <__bss_end+0x17b0ff8>
    2344:	6c320500 	cfldr32vs	mvfx0, [r2], #-0
    2348:	04000000 	streq	r0, [r0], #-0
    234c:	0009b010 	andeq	fp, r9, r0, lsl r0
    2350:	6c320500 	cfldr32vs	mvfx0, [r2], #-0
    2354:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2358:	0007dd10 	andeq	sp, r7, r0, lsl sp
    235c:	6c320500 	cfldr32vs	mvfx0, [r2], #-0
    2360:	0c000000 	stceq	0, cr0, [r0], {-0}
    2364:	000a7710 	andeq	r7, sl, r0, lsl r7
    2368:	6c320500 	cfldr32vs	mvfx0, [r2], #-0
    236c:	10000000 	andne	r0, r0, r0
    2370:	00785f12 	rsbseq	r5, r8, r2, lsl pc
    2374:	01973305 	orrseq	r3, r7, r5, lsl #6
    2378:	00140000 	andseq	r0, r4, r0
    237c:	013e0408 	teqeq	lr, r8, lsl #8
    2380:	330d0000 	movwcc	r0, #53248	; 0xd000
    2384:	a7000001 	strge	r0, [r0, -r1]
    2388:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    238c:	000000f5 	strdeq	r0, [r0], -r5
    2390:	1b110000 	blne	442398 <__bss_end+0x42c848>
    2394:	24000008 	strcs	r0, [r0], #-8
    2398:	02203705 	eoreq	r3, r0, #1310720	; 0x140000
    239c:	16100000 	ldrne	r0, [r0], -r0
    23a0:	05000007 	streq	r0, [r0, #-7]
    23a4:	00006c39 	andeq	r6, r0, r9, lsr ip
    23a8:	fd100000 	ldc2	0, cr0, [r0, #-0]
    23ac:	05000009 	streq	r0, [r0, #-9]
    23b0:	00006c3a 	andeq	r6, r0, sl, lsr ip
    23b4:	2b100400 	blcs	4033bc <__bss_end+0x3ed86c>
    23b8:	05000007 	streq	r0, [r0, #-7]
    23bc:	00006c3b 	andeq	r6, r0, fp, lsr ip
    23c0:	02100800 	andseq	r0, r0, #0, 16
    23c4:	0500000b 	streq	r0, [r0, #-11]
    23c8:	00006c3c 	andeq	r6, r0, ip, lsr ip
    23cc:	be100c00 	cdplt	12, 1, cr0, cr0, cr0, {0}
    23d0:	05000008 	streq	r0, [r0, #-8]
    23d4:	00006c3d 	andeq	r6, r0, sp, lsr ip
    23d8:	9e101000 	cdpls	0, 1, cr1, cr0, cr0, {0}
    23dc:	05000008 	streq	r0, [r0, #-8]
    23e0:	00006c3e 	andeq	r6, r0, lr, lsr ip
    23e4:	7c101400 	cfldrsvc	mvf1, [r0], {-0}
    23e8:	0500000a 	streq	r0, [r0, #-10]
    23ec:	00006c3f 	andeq	r6, r0, pc, lsr ip
    23f0:	29101800 	ldmdbcs	r0, {fp, ip}
    23f4:	05000009 	streq	r0, [r0, #-9]
    23f8:	00006c40 	andeq	r6, r0, r0, asr #24
    23fc:	c9101c00 	ldmdbgt	r0, {sl, fp, ip}
    2400:	0500000a 	streq	r0, [r0, #-10]
    2404:	00006c41 	andeq	r6, r0, r1, asr #24
    2408:	13002000 	movwne	r2, #0
    240c:	0000073a 	andeq	r0, r0, sl, lsr r7
    2410:	4a050108 	bmi	142838 <__bss_end+0x12cce8>
    2414:	00000260 	andeq	r0, r0, r0, ror #4
    2418:	0007bc10 	andeq	fp, r7, r0, lsl ip
    241c:	604b0500 	subvs	r0, fp, r0, lsl #10
    2420:	00000002 	andeq	r0, r0, r2
    2424:	00063e10 	andeq	r3, r6, r0, lsl lr
    2428:	604c0500 	subvs	r0, ip, r0, lsl #10
    242c:	80000002 	andhi	r0, r0, r2
    2430:	000a1914 	andeq	r1, sl, r4, lsl r9
    2434:	334e0500 	movtcc	r0, #58624	; 0xe500
    2438:	00000001 	andeq	r0, r0, r1
    243c:	075f1401 	ldrbeq	r1, [pc, -r1, lsl #8]
    2440:	51050000 	mrspl	r0, (UNDEF: 5)
    2444:	00000133 	andeq	r0, r0, r3, lsr r1
    2448:	0d000104 	stfeqs	f0, [r0, #-16]
    244c:	0000008c 	andeq	r0, r0, ip, lsl #1
    2450:	00000270 	andeq	r0, r0, r0, ror r2
    2454:	0000f50e 	andeq	pc, r0, lr, lsl #10
    2458:	13001f00 	movwne	r1, #3840	; 0xf00
    245c:	000008c7 	andeq	r0, r0, r7, asr #17
    2460:	5d050190 	stfpls	f0, [r5, #-576]	; 0xfffffdc0
    2464:	000002ae 	andeq	r0, r0, lr, lsr #5
    2468:	00096810 	andeq	r6, r9, r0, lsl r8
    246c:	ae5e0500 	cdpge	5, 5, cr0, cr14, cr0, {0}
    2470:	00000002 	andeq	r0, r0, r2
    2474:	00098010 	andeq	r8, r9, r0, lsl r0
    2478:	6c5f0500 	cfldr64vs	mvdx0, [pc], {-0}
    247c:	04000000 	streq	r0, [r0], #-0
    2480:	0007c410 	andeq	ip, r7, r0, lsl r4
    2484:	b4610500 	strbtlt	r0, [r1], #-1280	; 0xfffffb00
    2488:	08000002 	stmdaeq	r0, {r1}
    248c:	00073a10 	andeq	r3, r7, r0, lsl sl
    2490:	20620500 	rsbcs	r0, r2, r0, lsl #10
    2494:	88000002 	stmdahi	r0, {r1}
    2498:	70040800 	andvc	r0, r4, r0, lsl #16
    249c:	0d000002 	stceq	0, cr0, [r0, #-8]
    24a0:	000002c4 	andeq	r0, r0, r4, asr #5
    24a4:	000002c4 	andeq	r0, r0, r4, asr #5
    24a8:	0000f50e 	andeq	pc, r0, lr, lsl #10
    24ac:	08001f00 	stmdaeq	r0, {r8, r9, sl, fp, ip}
    24b0:	0002ca04 	andeq	ip, r2, r4, lsl #20
    24b4:	33111500 	tstcc	r1, #0, 10
    24b8:	08000009 	stmdaeq	r0, {r0, r3}
    24bc:	02f07505 	rscseq	r7, r0, #20971520	; 0x1400000
    24c0:	25100000 	ldrcs	r0, [r0, #-0]
    24c4:	05000007 	streq	r0, [r0, #-7]
    24c8:	0002f076 	andeq	pc, r2, r6, ror r0	; <UNPREDICTABLE>
    24cc:	4a100000 	bmi	4024d4 <__bss_end+0x3ec984>
    24d0:	05000006 	streq	r0, [r0, #-6]
    24d4:	00006c77 	andeq	r6, r0, r7, ror ip
    24d8:	08000400 	stmdaeq	r0, {sl}
    24dc:	00003104 	andeq	r3, r0, r4, lsl #2
    24e0:	09521100 	ldmdbeq	r2, {r8, ip}^
    24e4:	05680000 	strbeq	r0, [r8, #-0]!
    24e8:	000420b5 	strheq	r2, [r4], -r5
    24ec:	705f1200 	subsvc	r1, pc, r0, lsl #4
    24f0:	f0b60500 			; <UNDEFINED> instruction: 0xf0b60500
    24f4:	00000002 	andeq	r0, r0, r2
    24f8:	00725f12 	rsbseq	r5, r2, r2, lsl pc
    24fc:	006cb705 	rsbeq	fp, ip, r5, lsl #14
    2500:	12040000 	andne	r0, r4, #0
    2504:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
    2508:	00006cb8 			; <UNDEFINED> instruction: 0x00006cb8
    250c:	58100800 	ldmdapl	r0, {fp}
    2510:	05000007 	streq	r0, [r0, #-7]
    2514:	000038b9 			; <UNDEFINED> instruction: 0x000038b9
    2518:	37100c00 	ldrcc	r0, [r0, -r0, lsl #24]
    251c:	05000008 	streq	r0, [r0, #-8]
    2520:	000038ba 			; <UNDEFINED> instruction: 0x000038ba
    2524:	5f120e00 	svcpl	0x00120e00
    2528:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
    252c:	0002cbbb 			; <UNDEFINED> instruction: 0x0002cbbb
    2530:	e5101000 	ldr	r1, [r0, #-0]
    2534:	05000006 	streq	r0, [r0, #-6]
    2538:	00006cbc 			; <UNDEFINED> instruction: 0x00006cbc
    253c:	48101800 	ldmdami	r0, {fp, ip}
    2540:	05000007 	streq	r0, [r0, #-7]
    2544:	00008cc3 	andeq	r8, r0, r3, asr #25
    2548:	0b101c00 	bleq	409550 <__bss_end+0x3f3a00>
    254c:	05000008 	streq	r0, [r0, #-8]
    2550:	00058dc5 	andeq	r8, r5, r5, asr #27
    2554:	97102000 	ldrls	r2, [r0, -r0]
    2558:	05000008 	streq	r0, [r0, #-8]
    255c:	0005b7c7 	andeq	fp, r5, r7, asr #15
    2560:	dc102400 	cfldrsle	mvf2, [r0], {-0}
    2564:	05000009 	streq	r0, [r0, #-9]
    2568:	0005dbca 	andeq	sp, r5, sl, asr #23
    256c:	e3102800 	tst	r0, #0, 16
    2570:	0500000a 	streq	r0, [r0, #-10]
    2574:	0005f5cb 	andeq	pc, r5, fp, asr #11
    2578:	5f122c00 	svcpl	0x00122c00
    257c:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    2580:	0002cbce 	andeq	ip, r2, lr, asr #23
    2584:	5f123000 	svcpl	0x00123000
    2588:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
    258c:	0002f0cf 	andeq	pc, r2, pc, asr #1
    2590:	5f123800 	svcpl	0x00123800
    2594:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
    2598:	00006cd0 	ldrdeq	r6, [r0], -r0
    259c:	1f103c00 	svcne	0x00103c00
    25a0:	05000007 	streq	r0, [r0, #-7]
    25a4:	0005fbd3 	ldrdeq	pc, [r5], -r3
    25a8:	bb104000 	bllt	4125b0 <__bss_end+0x3fca60>
    25ac:	0500000a 	streq	r0, [r0, #-10]
    25b0:	00060bd4 	ldrdeq	r0, [r6], -r4
    25b4:	5f124300 	svcpl	0x00124300
    25b8:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    25bc:	0002cbd7 	ldrdeq	ip, [r2], -r7
    25c0:	6e104400 	cfmulsvs	mvf4, mvf0, mvf0
    25c4:	05000007 	streq	r0, [r0, #-7]
    25c8:	00006cda 	ldrdeq	r6, [r0], -sl
    25cc:	7f104c00 	svcvc	0x00104c00
    25d0:	05000007 	streq	r0, [r0, #-7]
    25d4:	0000a4db 	ldrdeq	sl, [r0], -fp
    25d8:	63105000 	tstvs	r0, #0
    25dc:	05000006 	streq	r0, [r0, #-6]
    25e0:	00043ede 	ldrdeq	r3, [r4], -lr
    25e4:	ce105400 	cfmulsgt	mvf5, mvf0, mvf0
    25e8:	05000009 	streq	r0, [r0, #-9]
    25ec:	000128e2 	andeq	r2, r1, r2, ror #17
    25f0:	5a105800 	bpl	4185f8 <__bss_end+0x402aa8>
    25f4:	05000009 	streq	r0, [r0, #-9]
    25f8:	00011de4 	andeq	r1, r1, r4, ror #27
    25fc:	8f105c00 	svchi	0x00105c00
    2600:	05000008 	streq	r0, [r0, #-8]
    2604:	00006ce5 	andeq	r6, r0, r5, ror #25
    2608:	16006400 	strne	r6, [r0], -r0, lsl #8
    260c:	0000006c 	andeq	r0, r0, ip, rrx
    2610:	0000043e 	andeq	r0, r0, lr, lsr r4
    2614:	00043e17 	andeq	r3, r4, r7, lsl lr
    2618:	008c1700 	addeq	r1, ip, r0, lsl #14
    261c:	7b170000 	blvc	5c2624 <__bss_end+0x5acad4>
    2620:	17000005 	strne	r0, [r0, -r5]
    2624:	0000006c 	andeq	r0, r0, ip, rrx
    2628:	49040800 	stmdbmi	r4, {fp}
    262c:	03000004 	movweq	r0, #4
    2630:	0000043e 	andeq	r0, r0, lr, lsr r4
    2634:	0009b818 	andeq	fp, r9, r8, lsl r8
    2638:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
    263c:	057b0239 	ldrbeq	r0, [fp, #-569]!	; 0xfffffdc7
    2640:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
    2644:	05000009 	streq	r0, [r0, #-9]
    2648:	006c023b 	rsbeq	r0, ip, fp, lsr r2
    264c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2650:	00000767 	andeq	r0, r0, r7, ror #14
    2654:	62024005 	andvs	r4, r2, #5
    2658:	04000006 	streq	r0, [r0], #-6
    265c:	00082719 	andeq	r2, r8, r9, lsl r7
    2660:	02400500 	subeq	r0, r0, #0, 10
    2664:	00000662 	andeq	r0, r0, r2, ror #12
    2668:	07ec1908 	strbeq	r1, [ip, r8, lsl #18]!
    266c:	40050000 	andmi	r0, r5, r0
    2670:	00066202 	andeq	r6, r6, r2, lsl #4
    2674:	7b190c00 	blvc	64567c <__bss_end+0x62fb2c>
    2678:	05000009 	streq	r0, [r0, #-9]
    267c:	006c0242 	rsbeq	r0, ip, r2, asr #4
    2680:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
    2684:	00000658 	andeq	r0, r0, r8, asr r6
    2688:	44024305 	strmi	r4, [r2], #-773	; 0xfffffcfb
    268c:	14000008 	strne	r0, [r0], #-8
    2690:	00099719 	andeq	r9, r9, r9, lsl r7
    2694:	02460500 	subeq	r0, r6, #0, 10
    2698:	0000006c 	andeq	r0, r0, ip, rrx
    269c:	09851930 	stmibeq	r5, {r4, r5, r8, fp, ip}
    26a0:	47050000 	strmi	r0, [r5, -r0]
    26a4:	00085902 	andeq	r5, r8, r2, lsl #18
    26a8:	d9193400 	ldmdble	r9, {sl, ip, sp}
    26ac:	05000008 	streq	r0, [r0, #-8]
    26b0:	006c0249 	rsbeq	r0, ip, r9, asr #4
    26b4:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    26b8:	0000098d 	andeq	r0, r0, sp, lsl #19
    26bc:	6a024b05 	bvs	952d8 <__bss_end+0x7f788>
    26c0:	3c000008 	stccc	0, cr0, [r0], {8}
    26c4:	00086619 	andeq	r6, r8, r9, lsl r6
    26c8:	024e0500 	subeq	r0, lr, #0, 10
    26cc:	00000191 	muleq	r0, r1, r1
    26d0:	08111940 	ldmdaeq	r1, {r6, r8, fp, ip}
    26d4:	4f050000 	svcmi	0x00050000
    26d8:	00006c02 	andeq	r6, r0, r2, lsl #24
    26dc:	fd194400 	ldc2	4, cr4, [r9, #-0]
    26e0:	0500000a 	streq	r0, [r0, #-10]
    26e4:	01910250 	orrseq	r0, r1, r0, asr r2
    26e8:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    26ec:	000008eb 	andeq	r0, r0, fp, ror #17
    26f0:	70025105 	andvc	r5, r2, r5, lsl #2
    26f4:	4c000008 	stcmi	0, cr0, [r0], {8}
    26f8:	00082f19 	andeq	r2, r8, r9, lsl pc
    26fc:	02540500 	subseq	r0, r4, #0, 10
    2700:	0000006c 	andeq	r0, r0, ip, rrx
    2704:	07771950 			; <UNDEFINED> instruction: 0x07771950
    2708:	55050000 	strpl	r0, [r5, #-0]
    270c:	00057b02 	andeq	r7, r5, r2, lsl #22
    2710:	11195400 	tstne	r9, r0, lsl #8
    2714:	05000009 	streq	r0, [r0, #-9]
    2718:	08220278 	stmdaeq	r2!, {r3, r4, r5, r6, r9}
    271c:	1a580000 	bne	1602724 <__bss_end+0x15ecbd4>
    2720:	000008c7 	andeq	r0, r0, r7, asr #17
    2724:	ae027c05 	cdpge	12, 0, cr7, cr2, cr5, {0}
    2728:	48000002 	stmdami	r0, {r1}
    272c:	08441a01 	stmdaeq	r4, {r0, r9, fp, ip}^
    2730:	7d050000 	stcvc	0, cr0, [r5, #-0]
    2734:	00027002 	andeq	r7, r2, r2
    2738:	1a014c00 	bne	55740 <__bss_end+0x3fbf0>
    273c:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    2740:	81028105 	tsthi	r2, r5, lsl #2
    2744:	dc000008 	stcle	0, cr0, [r0], {8}
    2748:	07501a02 	ldrbeq	r1, [r0, -r2, lsl #20]
    274c:	86050000 	strhi	r0, [r5], -r0
    2750:	00062702 	andeq	r2, r6, r2, lsl #14
    2754:	1a02e000 	bne	ba75c <__bss_end+0xa4c0c>
    2758:	00000735 	andeq	r0, r0, r5, lsr r7
    275c:	8d028705 	stchi	7, cr8, [r2, #-20]	; 0xffffffec
    2760:	ec000008 	stc	0, cr0, [r0], {8}
    2764:	04080002 	streq	r0, [r8], #-2
    2768:	00000581 	andeq	r0, r0, r1, lsl #11
    276c:	0c080102 	stfeqs	f0, [r8], {2}
    2770:	03000009 	movweq	r0, #9
    2774:	00000581 	andeq	r0, r0, r1, lsl #11
    2778:	04200408 	strteq	r0, [r0], #-1032	; 0xfffffbf8
    277c:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    2780:	b1000000 	mrslt	r0, (UNDEF: 0)
    2784:	17000005 	strne	r0, [r0, -r5]
    2788:	0000043e 	andeq	r0, r0, lr, lsr r4
    278c:	00008c17 	andeq	r8, r0, r7, lsl ip
    2790:	05b11700 	ldreq	r1, [r1, #1792]!	; 0x700
    2794:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    2798:	00000000 	andeq	r0, r0, r0
    279c:	05880408 	streq	r0, [r8, #1032]	; 0x408
    27a0:	04080000 	streq	r0, [r8], #-0
    27a4:	00000593 	muleq	r0, r3, r5
    27a8:	0000af16 	andeq	sl, r0, r6, lsl pc
    27ac:	0005db00 	andeq	sp, r5, r0, lsl #22
    27b0:	043e1700 	ldrteq	r1, [lr], #-1792	; 0xfffff900
    27b4:	8c170000 	ldchi	0, cr0, [r7], {-0}
    27b8:	17000000 	strne	r0, [r0, -r0]
    27bc:	000000af 	andeq	r0, r0, pc, lsr #1
    27c0:	00006c17 	andeq	r6, r0, r7, lsl ip
    27c4:	04080000 	streq	r0, [r8], #-0
    27c8:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    27cc:	00006c16 	andeq	r6, r0, r6, lsl ip
    27d0:	0005f500 	andeq	pc, r5, r0, lsl #10
    27d4:	043e1700 	ldrteq	r1, [lr], #-1792	; 0xfffff900
    27d8:	8c170000 	ldchi	0, cr0, [r7], {-0}
    27dc:	00000000 	andeq	r0, r0, r0
    27e0:	05e10408 	strbeq	r0, [r1, #1032]!	; 0x408
    27e4:	310d0000 	mrscc	r0, (UNDEF: 13)
    27e8:	0b000000 	bleq	27f0 <_start-0x5810>
    27ec:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    27f0:	000000f5 	strdeq	r0, [r0], -r5
    27f4:	310d0002 	tstcc	sp, r2
    27f8:	1b000000 	blne	2800 <_start-0x5800>
    27fc:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    2800:	000000f5 	strdeq	r0, [r0], -r5
    2804:	400a0000 	andmi	r0, sl, r0
    2808:	05000009 	streq	r0, [r0, #-9]
    280c:	02f6011f 	rscseq	r0, r6, #-1073741817	; 0xc0000007
    2810:	861b0000 	ldrhi	r0, [fp], -r0
    2814:	0c00000a 	stceq	0, cr0, [r0], {10}
    2818:	5c012305 	stcpl	3, cr2, [r1], {5}
    281c:	19000006 	stmdbne	r0, {r1, r2}
    2820:	00000968 	andeq	r0, r0, r8, ror #18
    2824:	5c012505 	cfstr32pl	mvfx2, [r1], {5}
    2828:	00000006 	andeq	r0, r0, r6
    282c:	00083d19 	andeq	r3, r8, r9, lsl sp
    2830:	01260500 			; <UNDEFINED> instruction: 0x01260500
    2834:	0000006c 	andeq	r0, r0, ip, rrx
    2838:	093a1904 	ldmdbeq	sl!, {r2, r8, fp, ip}
    283c:	27050000 	strcs	r0, [r5, -r0]
    2840:	00066201 	andeq	r6, r6, r1, lsl #4
    2844:	08000800 	stmdaeq	r0, {fp}
    2848:	00062704 	andeq	r2, r6, r4, lsl #14
    284c:	1b040800 	blne	104854 <__bss_end+0xeed04>
    2850:	1b000006 	blne	2870 <_start-0x5790>
    2854:	00000650 	andeq	r0, r0, r0, asr r6
    2858:	013f050e 	teqeq	pc, lr, lsl #10
    285c:	0000069d 	muleq	r0, sp, r6
    2860:	0009bf19 	andeq	fp, r9, r9, lsl pc
    2864:	01400500 	cmpeq	r0, r0, lsl #10
    2868:	0000069d 	muleq	r0, sp, r6
    286c:	0a061900 	beq	188c74 <__bss_end+0x173124>
    2870:	41050000 	mrsmi	r0, (UNDEF: 5)
    2874:	00069d01 	andeq	r9, r6, r1, lsl #26
    2878:	22190600 	andscs	r0, r9, #0, 12
    287c:	0500000a 	streq	r0, [r0, #-10]
    2880:	003f0142 	eorseq	r0, pc, r2, asr #2
    2884:	000c0000 	andeq	r0, ip, r0
    2888:	00003f0d 	andeq	r3, r0, sp, lsl #30
    288c:	0006ad00 	andeq	sl, r6, r0, lsl #26
    2890:	00f50e00 	rscseq	r0, r5, r0, lsl #28
    2894:	00020000 	andeq	r0, r2, r0
    2898:	5905d01c 	stmdbpl	r5, {r2, r3, r4, ip, lr, pc}
    289c:	0007ae02 	andeq	sl, r7, r2, lsl #28
    28a0:	0a5a1900 	beq	1688ca8 <__bss_end+0x1673158>
    28a4:	5b050000 	blpl	1428ac <__bss_end+0x12cd5c>
    28a8:	00007302 	andeq	r7, r0, r2, lsl #6
    28ac:	0c190000 	ldceq	0, cr0, [r9], {-0}
    28b0:	0500000a 	streq	r0, [r0, #-10]
    28b4:	057b025c 	ldrbeq	r0, [fp, #-604]!	; 0xfffffda4
    28b8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    28bc:	00000859 	andeq	r0, r0, r9, asr r8
    28c0:	ae025d05 	cdpge	13, 0, cr5, cr2, cr5, {0}
    28c4:	08000007 	stmdaeq	r0, {r0, r1, r2}
    28c8:	000ad419 	andeq	sp, sl, r9, lsl r4
    28cc:	025e0500 	subseq	r0, lr, #0, 10
    28d0:	000001a7 	andeq	r0, r0, r7, lsr #3
    28d4:	07fc1924 	ldrbeq	r1, [ip, r4, lsr #18]!
    28d8:	5f050000 	svcpl	0x00050000
    28dc:	00006c02 	andeq	r6, r0, r2, lsl #24
    28e0:	63194800 	tstvs	r9, #0, 16
    28e4:	05000009 	streq	r0, [r0, #-9]
    28e8:	00650260 	rsbeq	r0, r5, r0, ror #4
    28ec:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
    28f0:	00000aea 	andeq	r0, r0, sl, ror #21
    28f4:	68026105 	stmdavs	r2, {r0, r2, r8, sp, lr}
    28f8:	58000006 	stmdapl	r0, {r1, r2}
    28fc:	00096e19 	andeq	r6, r9, r9, lsl lr
    2900:	02620500 	rsbeq	r0, r2, #0, 10
    2904:	0000011d 	andeq	r0, r0, sp, lsl r1
    2908:	0aef1968 	beq	ffbc8eb0 <_estack+0xf7bb8eb0>
    290c:	63050000 	movwvs	r0, #20480	; 0x5000
    2910:	00011d02 	andeq	r1, r1, r2, lsl #26
    2914:	f5197000 			; <UNDEFINED> instruction: 0xf5197000
    2918:	05000008 	streq	r0, [r0, #-8]
    291c:	011d0264 	tsteq	sp, r4, ror #4
    2920:	19780000 	ldmdbne	r8!, {}^	; <UNPREDICTABLE>
    2924:	00000a95 	muleq	r0, r5, sl
    2928:	be026505 	cfsh32lt	mvfx6, mvfx2, #5
    292c:	80000007 	andhi	r0, r0, r7
    2930:	00084d19 	andeq	r4, r8, r9, lsl sp
    2934:	02660500 	rsbeq	r0, r6, #0, 10
    2938:	000007ce 	andeq	r0, r0, lr, asr #15
    293c:	0a3a1988 	beq	e88f64 <__bss_end+0xe73414>
    2940:	67050000 	strvs	r0, [r5, -r0]
    2944:	00006c02 	andeq	r6, r0, r2, lsl #24
    2948:	ae19a000 	cdpge	0, 1, cr10, cr9, cr0, {0}
    294c:	05000007 	streq	r0, [r0, #-7]
    2950:	011d0268 	tsteq	sp, r8, ror #4
    2954:	19a40000 	stmibne	r4!, {}	; <UNPREDICTABLE>
    2958:	00000707 	andeq	r0, r0, r7, lsl #14
    295c:	1d026905 	vstrne.16	s12, [r2, #-10]	; <UNPREDICTABLE>
    2960:	ac000001 	stcge	0, cr0, [r0], {1}
    2964:	00079d19 	andeq	r9, r7, r9, lsl sp
    2968:	026a0500 	rsbeq	r0, sl, #0, 10
    296c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2970:	066919b4 			; <UNDEFINED> instruction: 0x066919b4
    2974:	6b050000 	blvs	14297c <__bss_end+0x12ce2c>
    2978:	00011d02 	andeq	r1, r1, r2, lsl #26
    297c:	7819bc00 	ldmdavc	r9, {sl, fp, ip, sp, pc}
    2980:	05000006 	streq	r0, [r0, #-6]
    2984:	011d026c 	tsteq	sp, ip, ror #4
    2988:	19c40000 	stmibne	r4, {}^	; <UNPREDICTABLE>
    298c:	00000916 	andeq	r0, r0, r6, lsl r9
    2990:	6c026d05 	stcvs	13, cr6, [r2], {5}
    2994:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2998:	05810d00 	streq	r0, [r1, #3328]	; 0xd00
    299c:	07be0000 	ldreq	r0, [lr, r0]!
    29a0:	f50e0000 			; <UNDEFINED> instruction: 0xf50e0000
    29a4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    29a8:	05810d00 	streq	r0, [r1, #3328]	; 0xd00
    29ac:	07ce0000 	strbeq	r0, [lr, r0]
    29b0:	f50e0000 			; <UNDEFINED> instruction: 0xf50e0000
    29b4:	07000000 	streq	r0, [r0, -r0]
    29b8:	05810d00 	streq	r0, [r1, #3328]	; 0xd00
    29bc:	07de0000 	ldrbeq	r0, [lr, r0]
    29c0:	f50e0000 			; <UNDEFINED> instruction: 0xf50e0000
    29c4:	17000000 	strne	r0, [r0, -r0]
    29c8:	05f01c00 	ldrbeq	r1, [r0, #3072]!	; 0xc00
    29cc:	08020272 	stmdaeq	r2, {r1, r4, r5, r6, r9}
    29d0:	b7190000 	ldrlt	r0, [r9, -r0]
    29d4:	05000008 	streq	r0, [r0, #-8]
    29d8:	08020275 	stmdaeq	r2, {r0, r2, r4, r5, r6, r9}
    29dc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    29e0:	00000a8c 	andeq	r0, r0, ip, lsl #21
    29e4:	12027605 	andne	r7, r2, #5242880	; 0x500000
    29e8:	78000008 	stmdavc	r0, {r3}
    29ec:	02f00d00 	rscseq	r0, r0, #0, 26
    29f0:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    29f4:	f50e0000 			; <UNDEFINED> instruction: 0xf50e0000
    29f8:	1d000000 	stcne	0, cr0, [r0, #-0]
    29fc:	00730d00 	rsbseq	r0, r3, r0, lsl #26
    2a00:	08220000 	stmdaeq	r2!, {}	; <UNPREDICTABLE>
    2a04:	f50e0000 			; <UNDEFINED> instruction: 0xf50e0000
    2a08:	1d000000 	stcne	0, cr0, [r0, #-0]
    2a0c:	05f01d00 	ldrbeq	r1, [r0, #3328]!	; 0xd00
    2a10:	08440257 	stmdaeq	r4, {r0, r1, r2, r4, r6, r9}^
    2a14:	b81e0000 	ldmdalt	lr, {}	; <UNPREDICTABLE>
    2a18:	05000009 	streq	r0, [r0, #-9]
    2a1c:	06ad026e 	strteq	r0, [sp], lr, ror #4
    2a20:	c11e0000 	tstgt	lr, r0
    2a24:	0500000a 	streq	r0, [r0, #-10]
    2a28:	07de0277 			; <UNDEFINED> instruction: 0x07de0277
    2a2c:	0d000000 	stceq	0, cr0, [r0, #-0]
    2a30:	00000581 	andeq	r0, r0, r1, lsl #11
    2a34:	00000854 	andeq	r0, r0, r4, asr r8
    2a38:	0000f50e 	andeq	pc, r0, lr, lsl #10
    2a3c:	09001800 	stmdbeq	r0, {fp, ip}
    2a40:	000006ee 	andeq	r0, r0, lr, ror #13
    2a44:	08540408 	ldmdaeq	r4, {r3, sl}^
    2a48:	6a1f0000 	bvs	7c2a50 <__bss_end+0x7acf00>
    2a4c:	17000008 	strne	r0, [r0, -r8]
    2a50:	0000043e 	andeq	r0, r0, lr, lsr r4
    2a54:	5f040800 	svcpl	0x00040800
    2a58:	08000008 	stmdaeq	r0, {r3}
    2a5c:	00019104 	andeq	r9, r1, r4, lsl #2
    2a60:	08811f00 	stmeq	r1, {r8, r9, sl, fp, ip}
    2a64:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    2a68:	00000000 	andeq	r0, r0, r0
    2a6c:	08870408 	stmeq	r7, {r3, sl}
    2a70:	04080000 	streq	r0, [r8], #-0
    2a74:	00000876 	andeq	r0, r0, r6, ror r8
    2a78:	00061b0d 	andeq	r1, r6, sp, lsl #22
    2a7c:	00089d00 	andeq	r9, r8, r0, lsl #26
    2a80:	00f50e00 	rscseq	r0, r5, r0, lsl #28
    2a84:	00020000 	andeq	r0, r2, r0
    2a88:	000a4e20 	andeq	r4, sl, r0, lsr #28
    2a8c:	02fe0500 	rscseq	r0, lr, #0, 10
    2a90:	0000043e 	andeq	r0, r0, lr, lsr r4
    2a94:	000a4720 	andeq	r4, sl, r0, lsr #14
    2a98:	02ff0500 	rscseq	r0, pc, #0, 10
    2a9c:	00000444 	andeq	r0, r0, r4, asr #8
    2aa0:	0008cf21 	andeq	ip, r8, r1, lsr #30
    2aa4:	7b630600 	blvc	18c42ac <__bss_end+0x18ae75c>
    2aa8:	06000005 	streq	r0, [r0], -r5
    2aac:	000000ca 	andeq	r0, r0, sl, asr #1
    2ab0:	08cb4707 	stmiaeq	fp, {r0, r1, r2, r8, r9, sl, lr}^
    2ab4:	04080000 	streq	r0, [r8], #-0
    2ab8:	000008d1 	ldrdeq	r0, [r0], -r1
    2abc:	0008dc1f 	andeq	sp, r8, pc, lsl ip
    2ac0:	008c1700 	addeq	r1, ip, r0, lsl #14
    2ac4:	06000000 	streq	r0, [r0], -r0
    2ac8:	0000000c 	andeq	r0, r0, ip
    2acc:	00521f08 	subseq	r1, r2, r8, lsl #30
    2ad0:	dc040000 	stcle	0, cr0, [r4], {-0}
    2ad4:	06000008 	streq	r0, [r0], -r8
    2ad8:	0000112d 	andeq	r1, r0, sp, lsr #2
    2adc:	08f75709 	ldmeq	r7!, {r0, r3, r8, r9, sl, ip, lr}^
    2ae0:	04080000 	streq	r0, [r8], #-0
    2ae4:	000008fd 	strdeq	r0, [r0], -sp
    2ae8:	00004616 	andeq	r4, r0, r6, lsl r6
    2aec:	00090c00 	andeq	r0, r9, r0, lsl #24
    2af0:	008c1700 	addeq	r1, ip, r0, lsl #14
    2af4:	11000000 	mrsne	r0, (UNDEF: 0)
    2af8:	00000386 	andeq	r0, r0, r6, lsl #7
    2afc:	55690a14 	strbpl	r0, [r9, #-2580]!	; 0xfffff5ec
    2b00:	10000009 	andne	r0, r0, r9
    2b04:	00000339 	andeq	r0, r0, r9, lsr r3
    2b08:	08dc6b0a 	ldmeq	ip, {r1, r3, r8, r9, fp, sp, lr}^
    2b0c:	10000000 	andne	r0, r0, r0
    2b10:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2b14:	095a6c0a 	ldmdbeq	sl, {r1, r3, sl, fp, sp, lr}^
    2b18:	10040000 	andne	r0, r4, r0
    2b1c:	000003f6 	strdeq	r0, [r0], -r6
    2b20:	095a6d0a 	ldmdbeq	sl, {r1, r3, r8, sl, fp, sp, lr}^
    2b24:	10080000 	andne	r0, r8, r0
    2b28:	0000035b 	andeq	r0, r0, fp, asr r3
    2b2c:	008c6e0a 	addeq	r6, ip, sl, lsl #28
    2b30:	100c0000 	andne	r0, ip, r0
    2b34:	00000304 	andeq	r0, r0, r4, lsl #6
    2b38:	008c6f0a 	addeq	r6, ip, sl, lsl #30
    2b3c:	00100000 	andseq	r0, r0, r0
    2b40:	00090c04 	andeq	r0, r9, r4, lsl #24
    2b44:	55040800 	strpl	r0, [r4, #-2048]	; 0xfffff800
    2b48:	06000009 	streq	r0, [r0], -r9
    2b4c:	000004f2 	strdeq	r0, [r0], -r2
    2b50:	090c710a 	stmdbeq	ip, {r1, r3, r8, ip, sp, lr}
    2b54:	60040000 	andvs	r0, r4, r0
    2b58:	11000009 	tstne	r0, r9
    2b5c:	00000597 	muleq	r0, r7, r5
    2b60:	a1730a0c 	cmnge	r3, ip, lsl #20
    2b64:	10000009 	andne	r0, r0, r9
    2b68:	00000339 	andeq	r0, r0, r9, lsr r3
    2b6c:	08dc750a 	ldmeq	ip, {r1, r3, r8, sl, ip, sp, lr}^
    2b70:	10000000 	andne	r0, r0, r0
    2b74:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2b78:	095a760a 	ldmdbeq	sl, {r1, r3, r9, sl, ip, sp, lr}^
    2b7c:	10040000 	andne	r0, r4, r0
    2b80:	000003f6 	strdeq	r0, [r0], -r6
    2b84:	095a770a 	ldmdbeq	sl, {r1, r3, r8, r9, sl, ip, sp, lr}^
    2b88:	00080000 	andeq	r0, r8, r0
    2b8c:	00046606 	andeq	r6, r4, r6, lsl #12
    2b90:	70790a00 	rsbsvc	r0, r9, r0, lsl #20
    2b94:	04000009 	streq	r0, [r0], #-9
    2b98:	000009a1 	andeq	r0, r0, r1, lsr #19
    2b9c:	0005a711 	andeq	sl, r5, r1, lsl r7
    2ba0:	7e0a1400 	cfcpysvc	mvf1, mvf10
    2ba4:	000009e2 	andeq	r0, r0, r2, ror #19
    2ba8:	00048510 	andeq	r8, r4, r0, lsl r5
    2bac:	59800a00 	stmibpl	r0, {r9, fp}
    2bb0:	00000000 	andeq	r0, r0, r0
    2bb4:	00033110 	andeq	r3, r3, r0, lsl r1
    2bb8:	e2810a00 	add	r0, r1, #0, 20
    2bbc:	04000009 	streq	r0, [r0], #-9
    2bc0:	00035210 	andeq	r5, r3, r0, lsl r2
    2bc4:	ac820a00 	vstmiage	r2, {s0-s-1}
    2bc8:	08000009 	stmdaeq	r0, {r0, r3}
    2bcc:	6b040800 	blvs	104bd4 <__bss_end+0xef084>
    2bd0:	06000009 	streq	r0, [r0], -r9
    2bd4:	000009f7 	strdeq	r0, [r0], -r7
    2bd8:	09b1830a 	ldmibeq	r1!, {r1, r3, r8, r9, pc}
    2bdc:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    2be0:	06000009 	streq	r0, [r0], -r9
    2be4:	0000107e 	andeq	r1, r0, lr, ror r0
    2be8:	008c630b 	addeq	r6, ip, fp, lsl #6
    2bec:	c9110000 	ldmdbgt	r1, {}	; <UNPREDICTABLE>
    2bf0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2bf4:	0a28680b 	beq	a1cc28 <__bss_end+0xa070d8>
    2bf8:	02100000 	andseq	r0, r0, #0
    2bfc:	0b00000c 	bleq	2c34 <_start-0x53cc>
    2c00:	0000466a 	andeq	r4, r0, sl, ror #12
    2c04:	3f100000 	svccc	0x00100000
    2c08:	0b00000e 	bleq	2c48 <_start-0x53b8>
    2c0c:	0008dc6b 	andeq	sp, r8, fp, ror #24
    2c10:	06000400 	streq	r0, [r0], -r0, lsl #8
    2c14:	00000c67 	andeq	r0, r0, r7, ror #24
    2c18:	0a036c0b 	beq	ddc4c <__bss_end+0xc80fc>
    2c1c:	3a110000 	bcc	442c24 <__bss_end+0x42d0d4>
    2c20:	0c000012 	stceq	0, cr0, [r0], {18}
    2c24:	0a64710b 	beq	191f058 <__bss_end+0x1909508>
    2c28:	06100000 	ldreq	r0, [r0], -r0
    2c2c:	0b000014 	bleq	2c84 <_start-0x537c>
    2c30:	00008c73 	andeq	r8, r0, r3, ror ip
    2c34:	8f100000 	svchi	0x00100000
    2c38:	0b000013 	bleq	2c8c <_start-0x5374>
    2c3c:	00005274 	andeq	r5, r0, r4, ror r2
    2c40:	e9100400 	ldmdb	r0, {sl}
    2c44:	0b00000e 	bleq	2c84 <_start-0x537c>
    2c48:	00005275 	andeq	r5, r0, r5, ror r2
    2c4c:	06000800 	streq	r0, [r0], -r0, lsl #16
    2c50:	000011e6 	andeq	r1, r0, r6, ror #3
    2c54:	0a33760b 	beq	ce0488 <__bss_end+0xcca938>
    2c58:	64030000 	strvs	r0, [r3], #-0
    2c5c:	0800000a 	stmdaeq	r0, {r1, r3}
    2c60:	00002c04 	andeq	r2, r0, r4, lsl #24
    2c64:	0a740300 	beq	1d0386c <__bss_end+0x1cedd1c>
    2c68:	04080000 	streq	r0, [r8], #-0
    2c6c:	00000052 	andeq	r0, r0, r2, asr r0
    2c70:	000e7511 	andeq	r7, lr, r1, lsl r5
    2c74:	66014800 	strvs	r4, [r1], -r0, lsl #16
    2c78:	00000ae6 	andeq	r0, r0, r6, ror #21
    2c7c:	00019710 	andeq	r9, r1, r0, lsl r7
    2c80:	e6680100 	strbt	r0, [r8], -r0, lsl #2
    2c84:	0000000a 	andeq	r0, r0, sl
    2c88:	0005dd10 	andeq	sp, r5, r0, lsl sp
    2c8c:	606e0100 	rsbvs	r0, lr, r0, lsl #2
    2c90:	04000009 	streq	r0, [r0], #-9
    2c94:	00060a10 	andeq	r0, r6, r0, lsl sl
    2c98:	606f0100 	rsbvs	r0, pc, r0, lsl #2
    2c9c:	18000009 	stmdane	r0, {r0, r3}
    2ca0:	0004a810 	andeq	sl, r4, r0, lsl r8
    2ca4:	52700100 	rsbspl	r0, r0, #0, 2
    2ca8:	2c000000 	stccs	0, cr0, [r0], {-0}
    2cac:	00130d10 	andseq	r0, r3, r0, lsl sp
    2cb0:	7f710100 	svcvc	0x00710100
    2cb4:	3000000a 	andcc	r0, r0, sl
    2cb8:	000e5810 	andeq	r5, lr, r0, lsl r8
    2cbc:	ec720100 	ldfe	f0, [r2], #-0
    2cc0:	3400000a 	strcc	r0, [r0], #-10
    2cc4:	00130310 	andseq	r0, r3, r0, lsl r3
    2cc8:	ec860100 	stfs	f0, [r6], {0}
    2ccc:	44000008 	strmi	r0, [r0], #-8
    2cd0:	59040800 	stmdbpl	r4, {fp}
    2cd4:	0d000000 	stceq	0, cr0, [r0, #-0]
    2cd8:	00000025 	andeq	r0, r0, r5, lsr #32
    2cdc:	00000afc 	strdeq	r0, [r0], -ip
    2ce0:	0000f50e 	andeq	pc, r0, lr, lsl #10
    2ce4:	06000f00 	streq	r0, [r0], -r0, lsl #30
    2ce8:	0000108a 	andeq	r1, r0, sl, lsl #1
    2cec:	0a859301 	beq	fe1678f8 <_estack+0xf61578f8>
    2cf0:	fc030000 	stc2	0, cr0, [r3], {-0}
    2cf4:	2200000a 	andcs	r0, r0, #10
    2cf8:	000002c5 	andeq	r0, r0, r5, asr #5
    2cfc:	0b239f01 	bleq	8ea908 <__bss_end+0x8d4db8>
    2d00:	03050000 	movweq	r0, #20480	; 0x5000
    2d04:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
    2d08:	0afc0408 	beq	fff03d30 <_estack+0xf7ef3d30>
    2d0c:	1d040000 	stcne	0, cr0, [r4, #-0]
    2d10:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2d14:	000009e8 	andeq	r0, r0, r8, ror #19
    2d18:	00000b38 	andeq	r0, r0, r8, lsr fp
    2d1c:	0000f50e 	andeq	pc, r0, lr, lsl #10
    2d20:	23000400 	movwcs	r0, #1024	; 0x400
    2d24:	00000ed7 	ldrdeq	r0, [r0], -r7
    2d28:	0b28a301 	bleq	a2b934 <__bss_end+0xa15de4>
    2d2c:	03050000 	movweq	r0, #20480	; 0x5000
    2d30:	000147f8 	strdeq	r4, [r1], -r8
    2d34:	000f1d23 	andeq	r1, pc, r3, lsr #26
    2d38:	e8a40100 	stmia	r4!, {r8}
    2d3c:	05000009 	streq	r0, [r0, #-9]
    2d40:	01485c03 	cmpeq	r8, r3, lsl #24
    2d44:	0f2f2300 	svceq	0x002f2300
    2d48:	a5010000 	strge	r0, [r1, #-0]
    2d4c:	000009e8 	andeq	r0, r0, r8, ror #19
    2d50:	48700305 	ldmdami	r0!, {r0, r2, r8, r9}^
    2d54:	24230001 	strtcs	r0, [r3], #-1
    2d58:	01000013 	tsteq	r0, r3, lsl r0
    2d5c:	000b82a6 	andeq	r8, fp, r6, lsr #5
    2d60:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    2d64:	08000148 	stmdaeq	r0, {r3, r6, r8}
    2d68:	0009e804 	andeq	lr, r9, r4, lsl #16
    2d6c:	0b7c0400 	bleq	1f03d74 <__bss_end+0x1eee224>
    2d70:	7c030000 	stcvc	0, cr0, [r3], {-0}
    2d74:	2300000b 	movwcs	r0, #11
    2d78:	000010b9 	strheq	r1, [r0], -r9
    2d7c:	0b82a701 	bleq	fe0ac988 <_estack+0xf609c988>
    2d80:	03050000 	movweq	r0, #20480	; 0x5000
    2d84:	00014888 	andeq	r4, r1, r8, lsl #17
    2d88:	000fef23 	andeq	lr, pc, r3, lsr #30
    2d8c:	e8a80100 	stmia	r8!, {r8}
    2d90:	05000009 	streq	r0, [r0, #-9]
    2d94:	01488c03 	cmpeq	r8, r3, lsl #24
    2d98:	10482300 	subne	r2, r8, r0, lsl #6
    2d9c:	ac010000 	stcge	0, cr0, [r1], {-0}
    2da0:	000009e8 	andeq	r0, r0, r8, ror #19
    2da4:	48a00305 	stmiami	r0!, {r0, r2, r8, r9}
    2da8:	9f230001 	svcls	0x00230001
    2dac:	01000010 	tsteq	r0, r0, lsl r0
    2db0:	000059ad 	andeq	r5, r0, sp, lsr #19
    2db4:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    2db8:	23000148 	movwcs	r0, #328	; 0x148
    2dbc:	00000fc3 	andeq	r0, r0, r3, asr #31
    2dc0:	09e8b301 	stmibeq	r8!, {r0, r8, r9, ip, sp, pc}^
    2dc4:	03050000 	movweq	r0, #20480	; 0x5000
    2dc8:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
    2dcc:	00148223 	andseq	r8, r4, r3, lsr #4
    2dd0:	59be0100 	ldmibpl	lr!, {r8}
    2dd4:	05000000 	streq	r0, [r0, #-0]
    2dd8:	0148cc03 	cmpeq	r8, r3, lsl #24
    2ddc:	10ae2300 	adcne	r2, lr, r0, lsl #6
    2de0:	bf010000 	svclt	0x00010000
    2de4:	000008e7 	andeq	r0, r0, r7, ror #17
    2de8:	48d00305 	ldmmi	r0, {r0, r2, r8, r9}^
    2dec:	36230001 	strtcc	r0, [r3], -r1
    2df0:	01000013 	tsteq	r0, r3, lsl r0
    2df4:	000052c0 	andeq	r5, r0, r0, asr #5
    2df8:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    2dfc:	23000148 	movwcs	r0, #328	; 0x148
    2e00:	00000ea0 	andeq	r0, r0, r0, lsr #29
    2e04:	0059c101 	subseq	ip, r9, r1, lsl #2
    2e08:	03050000 	movweq	r0, #20480	; 0x5000
    2e0c:	000148d8 	ldrdeq	r4, [r1], -r8
    2e10:	000ec523 	andeq	ip, lr, r3, lsr #10
    2e14:	4dc20100 	stfmie	f0, [r2]
    2e18:	05000000 	streq	r0, [r0, #-0]
    2e1c:	0148dc03 	cmpeq	r8, r3, lsl #24
    2e20:	0f882300 	svceq	0x00882300
    2e24:	c3010000 	movwgt	r0, #4096	; 0x1000
    2e28:	00000059 	andeq	r0, r0, r9, asr r0
    2e2c:	48e00305 	stmiami	r0!, {r0, r2, r8, r9}^
    2e30:	5c230001 	stcpl	0, cr0, [r3], #-4
    2e34:	0100000f 	tsteq	r0, pc
    2e38:	000059c4 	andeq	r5, r0, r4, asr #19
    2e3c:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    2e40:	23000148 	movwcs	r0, #328	; 0x148
    2e44:	00001061 	andeq	r1, r0, r1, rrx
    2e48:	004dc501 	subeq	ip, sp, r1, lsl #10
    2e4c:	03050000 	movweq	r0, #20480	; 0x5000
    2e50:	000148e8 	andeq	r4, r1, r8, ror #17
    2e54:	0012f323 	andseq	pc, r2, r3, lsr #6
    2e58:	4dc60100 	stfmie	f0, [r6]
    2e5c:	05000000 	streq	r0, [r0, #-0]
    2e60:	0148ec03 	cmpeq	r8, r3, lsl #24
    2e64:	11c82300 	bicne	r2, r8, r0, lsl #6
    2e68:	c7010000 	strgt	r0, [r1, -r0]
    2e6c:	00000052 	andeq	r0, r0, r2, asr r0
    2e70:	48f00305 	ldmmi	r0!, {r0, r2, r8, r9}^
    2e74:	80230001 	eorhi	r0, r3, r1
    2e78:	01000011 	tsteq	r0, r1, lsl r0
    2e7c:	0008dcc8 	andeq	sp, r8, r8, asr #25
    2e80:	60030500 	andvs	r0, r3, r0, lsl #10
    2e84:	24000147 	strcs	r0, [r0], #-327	; 0xfffffeb9
    2e88:	00001424 	andeq	r1, r0, r4, lsr #8
    2e8c:	8c092901 			; <UNDEFINED> instruction: 0x8c092901
    2e90:	34000134 	strcc	r0, [r0], #-308	; 0xfffffecc
    2e94:	01000000 	mrseq	r0, (UNDEF: 0)
    2e98:	000cc29c 	muleq	ip, ip, r2
    2e9c:	14a82500 	strtne	r2, [r8], #1280	; 0x500
    2ea0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2ea4:	000b1d09 	andeq	r1, fp, r9, lsl #26
    2ea8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2eac:	0fac2600 	svceq	0x00ac2600
    2eb0:	6a010000 	bvs	42eb8 <__bss_end+0x2d368>
    2eb4:	000b1d08 	andeq	r1, fp, r8, lsl #26
    2eb8:	0133dc00 	teqeq	r3, r0, lsl #24
    2ebc:	0000b000 	andeq	fp, r0, r0
    2ec0:	0a9c0100 	beq	fe7032c8 <_estack+0xf66f32c8>
    2ec4:	2500000d 	strcs	r0, [r0, #-13]
    2ec8:	00001195 	muleq	r0, r5, r1
    2ecc:	3f086a01 	svccc	0x00086a01
    2ed0:	02000000 	andeq	r0, r0, #0
    2ed4:	c3256e91 			; <UNDEFINED> instruction: 0xc3256e91
    2ed8:	01000013 	tsteq	r0, r3, lsl r0
    2edc:	0a7f086a 	beq	1fc508c <__bss_end+0x1faf53c>
    2ee0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ee4:	115a2768 	cmpne	sl, r8, ror #14
    2ee8:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2eec:	000b1d08 	andeq	r1, fp, r8, lsl #26
    2ef0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ef4:	14632400 	strbtne	r2, [r3], #-1024	; 0xfffffc00
    2ef8:	50010000 	andpl	r0, r1, r0
    2efc:	01332408 	teqeq	r3, r8, lsl #8
    2f00:	0000b800 	andeq	fp, r0, r0, lsl #16
    2f04:	309c0100 	addscc	r0, ip, r0, lsl #2
    2f08:	2500000d 	strcs	r0, [r0, #-13]
    2f0c:	00000558 	andeq	r0, r0, r8, asr r5
    2f10:	dc085001 	stcle	0, cr5, [r8], {1}
    2f14:	02000008 	andeq	r0, r0, #8
    2f18:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    2f1c:	000013e6 	andeq	r1, r0, r6, ror #7
    2f20:	68082d01 	stmdavs	r8, {r0, r8, sl, fp, sp}
    2f24:	bc000132 	stflts	f0, [r0], {50}	; 0x32
    2f28:	01000000 	mrseq	r0, (UNDEF: 0)
    2f2c:	000d799c 	muleq	sp, ip, r9
    2f30:	32742800 	rsbscc	r2, r4, #0, 16
    2f34:	00980001 	addseq	r0, r8, r1
    2f38:	3e270000 	cdpcc	0, 2, cr0, cr7, cr0, {0}
    2f3c:	01000011 	tsteq	r0, r1, lsl r0
    2f40:	00460831 	subeq	r0, r6, r1, lsr r8
    2f44:	91020000 	mrsls	r0, (UNDEF: 2)
    2f48:	32b42874 	adcscc	r2, r4, #116, 16	; 0x740000
    2f4c:	00580001 	subseq	r0, r8, r1
    2f50:	a8270000 	stmdage	r7!, {}	; <UNPREDICTABLE>
    2f54:	01000014 	tsteq	r0, r4, lsl r0
    2f58:	0b1d083d 	bleq	745054 <__bss_end+0x72f504>
    2f5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f60:	00000070 	andeq	r0, r0, r0, ror r0
    2f64:	00101624 	andseq	r1, r0, r4, lsr #12
    2f68:	080d0100 	stmdaeq	sp, {r8}
    2f6c:	000131a8 	andeq	r3, r1, r8, lsr #3
    2f70:	000000c0 	andeq	r0, r0, r0, asr #1
    2f74:	0d9f9c01 	ldceq	12, cr9, [pc, #4]	; 2f80 <_start-0x5080>
    2f78:	a8270000 	stmdage	r7!, {}	; <UNPREDICTABLE>
    2f7c:	01000004 	tsteq	r0, r4
    2f80:	0052080f 	subseq	r0, r2, pc, lsl #16
    2f84:	91020000 	mrsls	r0, (UNDEF: 2)
    2f88:	8a240074 	bhi	903160 <__bss_end+0x8ed610>
    2f8c:	01000012 	tsteq	r0, r2, lsl r0
    2f90:	30e807b7 	strhtcc	r0, [r8], #119	; 0x77
    2f94:	00c00001 	sbceq	r0, r0, r1
    2f98:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f9c:	00000e01 	andeq	r0, r0, r1, lsl #28
    2fa0:	0014a825 	andseq	sl, r4, r5, lsr #16
    2fa4:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    2fa8:	00000b1d 	andeq	r0, r0, sp, lsl fp
    2fac:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    2fb0:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    2fb4:	7a07b701 	bvc	1f0bc0 <__bss_end+0x1db070>
    2fb8:	0200000a 	andeq	r0, r0, #10
    2fbc:	a8257091 	stmdage	r5!, {r0, r4, r7, ip, sp, lr}
    2fc0:	01000004 	tsteq	r0, r4
    2fc4:	005207b7 	ldrheq	r0, [r2], #-119	; 0xffffff89
    2fc8:	91020000 	mrsls	r0, (UNDEF: 2)
    2fcc:	145a256c 	ldrbne	r2, [sl], #-1388	; 0xfffffa94
    2fd0:	b7010000 	strlt	r0, [r1, -r0]
    2fd4:	000e0707 	andeq	r0, lr, r7, lsl #14
    2fd8:	68910200 	ldmvs	r1, {r9}
    2fdc:	00119525 	andseq	r9, r1, r5, lsr #10
    2fe0:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    2fe4:	0000003f 	andeq	r0, r0, pc, lsr r0
    2fe8:	00009102 	andeq	r9, r0, r2, lsl #2
    2fec:	0a6f0408 	beq	1bc4014 <__bss_end+0x1bae4c4>
    2ff0:	01030000 	mrseq	r0, (UNDEF: 3)
    2ff4:	2400000e 	strcs	r0, [r0], #-14
    2ff8:	00001121 	andeq	r1, r0, r1, lsr #2
    2ffc:	b8077601 	stmdalt	r7, {r0, r9, sl, ip, sp, lr}
    3000:	30000130 	andcc	r0, r0, r0, lsr r1
    3004:	01000000 	mrseq	r0, (UNDEF: 0)
    3008:	000e329c 	muleq	lr, ip, r2
    300c:	01842500 	orreq	r2, r4, r0, lsl #10
    3010:	76010000 	strvc	r0, [r1], -r0
    3014:	00008c07 	andeq	r8, r0, r7, lsl #24
    3018:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    301c:	13b22900 			; <UNDEFINED> instruction: 0x13b22900
    3020:	42010000 	andmi	r0, r1, #0
    3024:	01309007 	teqeq	r0, r7
    3028:	00002800 	andeq	r2, r0, r0, lsl #16
    302c:	2a9c0100 	bcs	fe703434 <_estack+0xf66f3434>
    3030:	00001348 	andeq	r1, r0, r8, asr #6
    3034:	46071401 	strmi	r1, [r7], -r1, lsl #8
    3038:	9c000000 	stcls	0, cr0, [r0], {-0}
    303c:	f400012f 	vst4.8	{d0,d2,d4,d6}, [r0 :128]
    3040:	01000000 	mrseq	r0, (UNDEF: 0)
    3044:	000e8c9c 	muleq	lr, ip, ip
    3048:	11be2500 			; <UNDEFINED> instruction: 0x11be2500
    304c:	14010000 	strne	r0, [r1], #-0
    3050:	000e9207 	andeq	r9, lr, r7, lsl #4
    3054:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3058:	00109125 	andseq	r9, r0, r5, lsr #2
    305c:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    3060:	00000e9d 	muleq	r0, sp, lr
    3064:	27689102 	strbcs	r9, [r8, -r2, lsl #2]!
    3068:	00000c4d 	andeq	r0, r0, sp, asr #24
    306c:	46071601 	strmi	r1, [r7], -r1, lsl #12
    3070:	02000000 	andeq	r0, r0, #0
    3074:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    3078:	000a2804 	andeq	r2, sl, r4, lsl #16
    307c:	0e8c0300 	cdpeq	3, 8, cr0, cr12, cr0, {0}
    3080:	04080000 	streq	r0, [r8], #-0
    3084:	000008dc 	ldrdeq	r0, [r0], -ip
    3088:	000e9703 	andeq	r9, lr, r3, lsl #14
    308c:	0ef62b00 	vmoveq.f64	d18, #96	; 0x3f000000  0.5
    3090:	0c010000 	stceq	0, cr0, [r1], {-0}
    3094:	012f5407 			; <UNDEFINED> instruction: 0x012f5407
    3098:	00004800 	andeq	r4, r0, r0, lsl #16
    309c:	c89c0100 	ldmgt	ip, {r8}
    30a0:	2500000e 	strcs	r0, [r0, #-14]
    30a4:	000011be 			; <UNDEFINED> instruction: 0x000011be
    30a8:	92070c01 	andls	r0, r7, #256	; 0x100
    30ac:	0200000e 	andeq	r0, r0, #14
    30b0:	2a007491 	bcs	202fc <__bss_end+0xa7ac>
    30b4:	000010fb 	strdeq	r1, [r0], -fp
    30b8:	4606d901 	strmi	sp, [r6], -r1, lsl #18
    30bc:	3c000000 	stccc	0, cr0, [r0], {-0}
    30c0:	1800012e 	stmdane	r0, {r1, r2, r3, r5, r8}
    30c4:	01000001 	tsteq	r0, r1
    30c8:	000f109c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
    30cc:	04e62500 	strbteq	r2, [r6], #1280	; 0x500
    30d0:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    30d4:	000f1606 	andeq	r1, pc, r6, lsl #12
    30d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    30dc:	000f9d27 	andeq	r9, pc, r7, lsr #26
    30e0:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    30e4:	00000b1d 	andeq	r0, r0, sp, lsl fp
    30e8:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    30ec:	00000c4d 	andeq	r0, r0, sp, asr #24
    30f0:	4606dc01 	strmi	sp, [r6], -r1, lsl #24
    30f4:	02000000 	andeq	r0, r0, #0
    30f8:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    30fc:	0009f304 	andeq	pc, r9, r4, lsl #6
    3100:	0f100300 	svceq	0x00100300
    3104:	d32c0000 			; <UNDEFINED> instruction: 0xd32c0000
    3108:	01000010 	tsteq	r0, r0, lsl r0
    310c:	2da00687 	stccs	6, cr0, [r0, #540]!	; 0x21c
    3110:	009c0001 	addseq	r0, ip, r1
    3114:	9c010000 	stcls	0, cr0, [r1], {-0}
    3118:	00000f5f 	andeq	r0, r0, pc, asr pc
    311c:	0004e625 	andeq	lr, r4, r5, lsr #12
    3120:	06870100 	streq	r0, [r7], r0, lsl #2
    3124:	00000f16 	andeq	r0, r0, r6, lsl pc
    3128:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    312c:	00001092 	muleq	r0, r2, r0
    3130:	dc068701 	stcle	7, cr8, [r6], {1}
    3134:	02000008 	andeq	r0, r0, #8
    3138:	58276891 	stmdapl	r7!, {r0, r4, r7, fp, sp, lr}
    313c:	01000005 	tsteq	r0, r5
    3140:	08dc0689 	ldmeq	ip, {r0, r3, r7, r9, sl}^
    3144:	91020000 	mrsls	r0, (UNDEF: 2)
    3148:	e02b0074 	eor	r0, fp, r4, ror r0
    314c:	01000012 	tsteq	r0, r2, lsl r0
    3150:	2c98064b 	ldccs	6, cr0, [r8], {75}	; 0x4b
    3154:	01080001 	tsteq	r8, r1
    3158:	9c010000 	stcls	0, cr0, [r1], {-0}
    315c:	00000f8f 	andeq	r0, r0, pc, lsl #31
    3160:	012d0428 			; <UNDEFINED> instruction: 0x012d0428
    3164:	00007800 	andeq	r7, r0, r0, lsl #16
    3168:	03912700 	orrseq	r2, r1, #0, 14
    316c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3170:	000b8706 	andeq	r8, fp, r6, lsl #14
    3174:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3178:	b02a0000 	eorlt	r0, sl, r0
    317c:	01000012 	tsteq	r0, r2, lsl r0
    3180:	0046062d 	subeq	r0, r6, sp, lsr #12
    3184:	2c1c0000 	ldccs	0, cr0, [ip], {-0}
    3188:	007c0001 	rsbseq	r0, ip, r1
    318c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3190:	00000fe6 	andeq	r0, r0, r6, ror #31
    3194:	0010f525 	andseq	pc, r0, r5, lsr #10
    3198:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    319c:	000009f8 	strdeq	r0, [r0], -r8
    31a0:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    31a4:	0000144e 	andeq	r1, r0, lr, asr #8
    31a8:	8c062d01 	stchi	13, cr2, [r6], {1}
    31ac:	02000000 	andeq	r0, r0, #0
    31b0:	a9276891 	stmdbge	r7!, {r0, r4, r7, fp, sp, lr}
    31b4:	01000014 	tsteq	r0, r4, lsl r0
    31b8:	0b1d062f 	bleq	744a7c <__bss_end+0x72ef2c>
    31bc:	91020000 	mrsls	r0, (UNDEF: 2)
    31c0:	0c4d2774 	mcrreq	7, 7, r2, sp, cr4
    31c4:	30010000 	andcc	r0, r1, r0
    31c8:	00004606 	andeq	r4, r0, r6, lsl #12
    31cc:	70910200 	addsvc	r0, r1, r0, lsl #4
    31d0:	102d2a00 	eorne	r2, sp, r0, lsl #20
    31d4:	10010000 	andne	r0, r1, r0
    31d8:	0008ec06 	andeq	lr, r8, r6, lsl #24
    31dc:	012bc000 			; <UNDEFINED> instruction: 0x012bc000
    31e0:	00005c00 	andeq	r5, r0, r0, lsl #24
    31e4:	2e9c0100 	fmlcse	f0, f4, f0
    31e8:	25000010 	strcs	r0, [r0, #-16]
    31ec:	000010f5 	strdeq	r1, [r0], -r5
    31f0:	f8061001 			; <UNDEFINED> instruction: 0xf8061001
    31f4:	02000009 	andeq	r0, r0, #9
    31f8:	a9276c91 	stmdbge	r7!, {r0, r4, r7, sl, fp, sp, lr}
    31fc:	01000014 	tsteq	r0, r4, lsl r0
    3200:	0b1d0612 	bleq	744a50 <__bss_end+0x72ef00>
    3204:	91020000 	mrsls	r0, (UNDEF: 2)
    3208:	0c4d2774 	mcrreq	7, 7, r2, sp, cr4
    320c:	13010000 	movwne	r0, #4096	; 0x1000
    3210:	0008ec06 	andeq	lr, r8, r6, lsl #24
    3214:	70910200 	addsvc	r0, r1, r0, lsl #4
    3218:	0f412c00 	svceq	0x00412c00
    321c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3220:	012b6405 			; <UNDEFINED> instruction: 0x012b6405
    3224:	00005c00 	andeq	r5, r0, r0, lsl #24
    3228:	729c0100 	addsvc	r0, ip, #0, 2
    322c:	25000010 	strcs	r0, [r0, #-16]
    3230:	000010f5 	strdeq	r1, [r0], -r5
    3234:	f805f601 			; <UNDEFINED> instruction: 0xf805f601
    3238:	02000009 	andeq	r0, r0, #9
    323c:	4b256c91 	blmi	95e488 <__bss_end+0x948938>
    3240:	01000011 	tsteq	r0, r1, lsl r0
    3244:	08ec05f6 	stmiaeq	ip!, {r1, r2, r4, r5, r6, r7, r8, sl}^
    3248:	91020000 	mrsls	r0, (UNDEF: 2)
    324c:	14a92768 	strtne	r2, [r9], #1896	; 0x768
    3250:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    3254:	000b1d05 	andeq	r1, fp, r5, lsl #26
    3258:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    325c:	12772c00 	rsbsne	r2, r7, #0, 24
    3260:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3264:	01294805 			; <UNDEFINED> instruction: 0x01294805
    3268:	00021c00 	andeq	r1, r2, r0, lsl #24
    326c:	ce9c0100 	fmlgte	f0, f4, f0
    3270:	27000010 	smladcs	r0, r0, r0, r0
    3274:	000014a8 	andeq	r1, r0, r8, lsr #9
    3278:	1d05ab01 	vstrne	d10, [r5, #-4]
    327c:	0200000b 	andeq	r0, r0, #11
    3280:	882d7091 	stmdahi	sp!, {r0, r4, r7, ip, sp, lr}
    3284:	84000129 	strhi	r0, [r0], #-297	; 0xfffffed7
    3288:	b4000000 	strlt	r0, [r0], #-0
    328c:	27000010 	smladcs	r0, r0, r0, r0
    3290:	000002e2 	andeq	r0, r0, r2, ror #5
    3294:	7c05b501 	cfstr32vc	mvfx11, [r5], {1}
    3298:	0200000b 	andeq	r0, r0, #11
    329c:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    32a0:	00012a0c 	andeq	r2, r1, ip, lsl #20
    32a4:	00000110 	andeq	r0, r0, r0, lsl r1
    32a8:	00033927 	andeq	r3, r3, r7, lsr #18
    32ac:	05d60100 	ldrbeq	r0, [r6, #256]	; 0x100
    32b0:	000008dc 	ldrdeq	r0, [r0], -ip
    32b4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    32b8:	0e892e00 	cdpeq	14, 8, cr2, cr9, cr0, {0}
    32bc:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    32c0:	00005204 	andeq	r5, r0, r4, lsl #4
    32c4:	01292400 			; <UNDEFINED> instruction: 0x01292400
    32c8:	00002400 	andeq	r2, r0, r0, lsl #8
    32cc:	2f9c0100 	svccs	0x009c0100
    32d0:	00000fd6 	ldrdeq	r0, [r0], -r6
    32d4:	dc04ea01 			; <UNDEFINED> instruction: 0xdc04ea01
    32d8:	ec000008 	stc	0, cr0, [r0], {8}
    32dc:	38000128 	stmdacc	r0, {r3, r5, r8}
    32e0:	01000000 	mrseq	r0, (UNDEF: 0)
    32e4:	00111d9c 	mulseq	r1, ip, sp
    32e8:	0c4d2700 	mcrreq	7, 0, r2, sp, cr0
    32ec:	ec010000 	stc	0, cr0, [r1], {-0}
    32f0:	0008dc04 	andeq	sp, r8, r4, lsl #24
    32f4:	70910200 	addsvc	r0, r1, r0, lsl #4
    32f8:	000c1127 	andeq	r1, ip, r7, lsr #2
    32fc:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    3300:	00000052 	andeq	r0, r0, r2, asr r0
    3304:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3308:	00116e2a 	andseq	r6, r1, sl, lsr #28
    330c:	04db0100 	ldrbeq	r0, [fp], #256	; 0x100
    3310:	000008dc 	ldrdeq	r0, [r0], -ip
    3314:	000128b8 			; <UNDEFINED> instruction: 0x000128b8
    3318:	00000034 	andeq	r0, r0, r4, lsr r0
    331c:	11479c01 	cmpne	r7, r1, lsl #24
    3320:	a2270000 	eorge	r0, r7, #0
    3324:	01000011 	tsteq	r0, r1, lsl r0
    3328:	08dc04dd 	ldmeq	ip, {r0, r2, r3, r4, r6, r7, sl}^
    332c:	91020000 	mrsls	r0, (UNDEF: 2)
    3330:	152a0074 	strne	r0, [sl, #-116]!	; 0xffffff8c
    3334:	01000013 	tsteq	r0, r3, lsl r0
    3338:	00460484 	subeq	r0, r6, r4, lsl #9
    333c:	27140000 	ldrcs	r0, [r4, -r0]
    3340:	01a40001 			; <UNDEFINED> instruction: 0x01a40001
    3344:	9c010000 	stcls	0, cr0, [r1], {-0}
    3348:	00001198 	muleq	r0, r8, r1
    334c:	0014a827 	andseq	sl, r4, r7, lsr #16
    3350:	04860100 	streq	r0, [r6], #256	; 0x100
    3354:	00000b1d 	andeq	r0, r0, sp, lsl fp
    3358:	3e275401 	cdpcc	4, 2, cr5, cr7, cr1, {0}
    335c:	01000014 	tsteq	r0, r4, lsl r0
    3360:	00460487 	subeq	r0, r6, r7, lsl #9
    3364:	91020000 	mrsls	r0, (UNDEF: 2)
    3368:	2760286c 	strbcs	r2, [r0, -ip, ror #16]!
    336c:	01240001 			; <UNDEFINED> instruction: 0x01240001
    3370:	79270000 	stmdbvc	r7!, {}	; <UNPREDICTABLE>
    3374:	0100000f 	tsteq	r0, pc
    3378:	0046049a 	umaaleq	r0, r6, sl, r4
    337c:	91020000 	mrsls	r0, (UNDEF: 2)
    3380:	29000068 	stmdbcs	r0, {r3, r5, r6}
    3384:	0000106e 	andeq	r1, r0, lr, rrx
    3388:	e4047c01 	str	r7, [r4], #-3073	; 0xfffff3ff
    338c:	30000126 	andcc	r0, r0, r6, lsr #2
    3390:	01000000 	mrseq	r0, (UNDEF: 0)
    3394:	0e63309c 	mcreq	0, 3, r3, cr3, cr12, {4}
    3398:	71010000 	mrsvc	r0, (UNDEF: 1)
    339c:	0126ac04 			; <UNDEFINED> instruction: 0x0126ac04
    33a0:	00003800 	andeq	r3, r0, r0, lsl #16
    33a4:	2c9c0100 	ldfcss	f0, [ip], {0}
    33a8:	000013d2 	ldrdeq	r1, [r0], -r2
    33ac:	10043001 	andne	r3, r4, r1
    33b0:	9c000126 	stflss	f0, [r0], {38}	; 0x26
    33b4:	01000000 	mrseq	r0, (UNDEF: 0)
    33b8:	0011e29c 	mulseq	r1, ip, r2
    33bc:	0c4d2700 	mcrreq	7, 0, r2, sp, cr0
    33c0:	32010000 	andcc	r0, r1, #0
    33c4:	00004604 	andeq	r4, r0, r4, lsl #12
    33c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    33cc:	139f2a00 	orrsne	r2, pc, #0, 20
    33d0:	02010000 	andeq	r0, r1, #0
    33d4:	00004604 	andeq	r4, r0, r4, lsl #12
    33d8:	0124f400 	msreq	CPSR_s, r0, lsl #8
    33dc:	00011c00 	andeq	r1, r1, r0, lsl #24
    33e0:	399c0100 	ldmibcc	ip, {r8}
    33e4:	25000012 	strcs	r0, [r0, #-18]	; 0xffffffee
    33e8:	00000f6a 	andeq	r0, r0, sl, ror #30
    33ec:	f8040201 			; <UNDEFINED> instruction: 0xf8040201
    33f0:	02000009 	andeq	r0, r0, #9
    33f4:	79276491 	stmdbvc	r7!, {r0, r4, r7, sl, sp, lr}
    33f8:	0100000f 	tsteq	r0, pc
    33fc:	00460404 	subeq	r0, r6, r4, lsl #8
    3400:	91020000 	mrsls	r0, (UNDEF: 2)
    3404:	14a82774 	strtne	r2, [r8], #1908	; 0x774
    3408:	05010000 	streq	r0, [r1, #-0]
    340c:	000b1d04 	andeq	r1, fp, r4, lsl #26
    3410:	70910200 	addsvc	r0, r1, r0, lsl #4
    3414:	000c1127 	andeq	r1, ip, r7, lsr #2
    3418:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    341c:	00000052 	andeq	r0, r0, r2, asr r0
    3420:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3424:	0014ae2c 	andseq	sl, r4, ip, lsr #28
    3428:	03d50100 	bicseq	r0, r5, #0, 2
    342c:	000123fc 	strdeq	r2, [r1], -ip
    3430:	000000f8 	strdeq	r0, [r0], -r8
    3434:	126e9c01 	rsbne	r9, lr, #256	; 0x100
    3438:	6a250000 	bvs	943440 <__bss_end+0x92d8f0>
    343c:	0100000f 	tsteq	r0, pc
    3440:	09f803d5 	ldmibeq	r8!, {r0, r2, r4, r6, r7, r8, r9}^
    3444:	91020000 	mrsls	r0, (UNDEF: 2)
    3448:	14a8276c 	strtne	r2, [r8], #1900	; 0x76c
    344c:	d7010000 	strle	r0, [r1, -r0]
    3450:	000b1d03 	andeq	r1, fp, r3, lsl #26
    3454:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3458:	10012f00 	andne	r2, r1, r0, lsl #30
    345c:	b3010000 	movwlt	r0, #4096	; 0x1000
    3460:	00004603 	andeq	r4, r0, r3, lsl #12
    3464:	01238000 			; <UNDEFINED> instruction: 0x01238000
    3468:	00007c00 	andeq	r7, r0, r0, lsl #24
    346c:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    3470:	25000012 	strcs	r0, [r0, #-18]	; 0xffffffee
    3474:	000010f5 	strdeq	r1, [r0], -r5
    3478:	f803b301 			; <UNDEFINED> instruction: 0xf803b301
    347c:	02000009 	andeq	r0, r0, #9
    3480:	4d276c91 	stcmi	12, cr6, [r7, #-580]!	; 0xfffffdbc
    3484:	0100000c 	tsteq	r0, ip
    3488:	004603b5 	strheq	r0, [r6], #-53	; 0xffffffcb
    348c:	91020000 	mrsls	r0, (UNDEF: 2)
    3490:	14a82774 	strtne	r2, [r8], #1908	; 0x774
    3494:	b6010000 	strlt	r0, [r1], -r0
    3498:	0012bc03 	andseq	fp, r2, r3, lsl #24
    349c:	70910200 	addsvc	r0, r1, r0, lsl #4
    34a0:	07040800 	streq	r0, [r4, -r0, lsl #16]
    34a4:	0300000b 	movweq	r0, #11
    34a8:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    34ac:	0014312c 	andseq	r3, r4, ip, lsr #2
    34b0:	03730100 	cmneq	r3, #0, 2
    34b4:	0001227c 	andeq	r2, r1, ip, ror r2
    34b8:	00000104 	andeq	r0, r0, r4, lsl #2
    34bc:	12f69c01 	rscsne	r9, r6, #256	; 0x100
    34c0:	5d250000 	stcpl	0, cr0, [r5, #-0]
    34c4:	01000013 	tsteq	r0, r3, lsl r0
    34c8:	09f80373 	ldmibeq	r8!, {r0, r1, r4, r5, r6, r8, r9}^
    34cc:	91020000 	mrsls	r0, (UNDEF: 2)
    34d0:	14a8276c 	strtne	r2, [r8], #1900	; 0x76c
    34d4:	75010000 	strvc	r0, [r1, #-0]
    34d8:	000b1d03 	andeq	r1, fp, r3, lsl #26
    34dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    34e0:	11d52c00 	bicsne	r2, r5, r0, lsl #24
    34e4:	07010000 	streq	r0, [r1, -r0]
    34e8:	0120d403 			; <UNDEFINED> instruction: 0x0120d403
    34ec:	0001a800 	andeq	sl, r1, r0, lsl #16
    34f0:	589c0100 	ldmpl	ip, {r8}
    34f4:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    34f8:	000010f4 	strdeq	r1, [r0], -r4
    34fc:	f8030701 			; <UNDEFINED> instruction: 0xf8030701
    3500:	02000009 	andeq	r0, r0, #9
    3504:	a9256491 	stmdbge	r5!, {r0, r4, r7, sl, sp, lr}
    3508:	01000011 	tsteq	r0, r1, lsl r0
    350c:	00520307 	subseq	r0, r2, r7, lsl #6
    3510:	91020000 	mrsls	r0, (UNDEF: 2)
    3514:	14a82760 	strtne	r2, [r8], #1888	; 0x760
    3518:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    351c:	000b1d03 	andeq	r1, fp, r3, lsl #26
    3520:	70910200 	addsvc	r0, r1, r0, lsl #4
    3524:	000f0b27 	andeq	r0, pc, r7, lsr #22
    3528:	030a0100 	movweq	r0, #41216	; 0xa100
    352c:	00000052 	andeq	r0, r0, r2, asr r0
    3530:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    3534:	00000f79 	andeq	r0, r0, r9, ror pc
    3538:	46030b01 	strmi	r0, [r3], -r1, lsl #22
    353c:	02000000 	andeq	r0, r0, #0
    3540:	2a007491 	bcs	2078c <__bss_end+0xac3c>
    3544:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    3548:	5202f101 	andpl	pc, r2, #1073741824	; 0x40000000
    354c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3550:	58000120 	stmdapl	r0, {r5, r8}
    3554:	01000000 	mrseq	r0, (UNDEF: 0)
    3558:	0013a09c 	mulseq	r3, ip, r0
    355c:	10f42500 	rscsne	r2, r4, r0, lsl #10
    3560:	f1010000 	setend	le
    3564:	0009f802 	andeq	pc, r9, r2, lsl #16
    3568:	6c910200 	lfmvs	f0, 4, [r1], {0}
    356c:	0014a827 	andseq	sl, r4, r7, lsr #16
    3570:	02f30100 	rscseq	r0, r3, #0, 2
    3574:	00000b1d 	andeq	r0, r0, sp, lsl fp
    3578:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    357c:	00000c4c 	andeq	r0, r0, ip, asr #24
    3580:	5202f401 	andpl	pc, r2, #16777216	; 0x1000000
    3584:	02000000 	andeq	r0, r0, #0
    3588:	2c007091 	stccs	0, cr7, [r0], {145}	; 0x91
    358c:	000010e9 	andeq	r1, r0, r9, ror #1
    3590:	f802c301 			; <UNDEFINED> instruction: 0xf802c301
    3594:	8400011f 	strhi	r0, [r0], #-287	; 0xfffffee1
    3598:	01000000 	mrseq	r0, (UNDEF: 0)
    359c:	0013e49c 	mulseq	r3, ip, r4
    35a0:	03442500 	movteq	r2, #17664	; 0x4500
    35a4:	c3010000 	movwgt	r0, #4096	; 0x1000
    35a8:	0008dc02 	andeq	sp, r8, r2, lsl #24
    35ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    35b0:	00055827 	andeq	r5, r5, r7, lsr #16
    35b4:	02c50100 	sbceq	r0, r5, #0, 2
    35b8:	000008dc 	ldrdeq	r0, [r0], -ip
    35bc:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    35c0:	0000143e 	andeq	r1, r0, lr, lsr r4
    35c4:	4602c601 	strmi	ip, [r2], -r1, lsl #12
    35c8:	02000000 	andeq	r0, r0, #0
    35cc:	2c007491 	cfstrscs	mvf7, [r0], {145}	; 0x91
    35d0:	00001414 	andeq	r1, r0, r4, lsl r4
    35d4:	e8028201 	stmda	r2, {r0, r9, pc}
    35d8:	1000011e 	andne	r0, r0, lr, lsl r1
    35dc:	01000001 	tsteq	r0, r1
    35e0:	0014469c 	mulseq	r4, ip, r6
    35e4:	136d2500 	cmnne	sp, #0, 10
    35e8:	82010000 	andhi	r0, r1, #0
    35ec:	000e9d02 	andeq	r9, lr, r2, lsl #26
    35f0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    35f4:	00149925 	andseq	r9, r4, r5, lsr #18
    35f8:	02820100 	addeq	r0, r2, #0, 2
    35fc:	000008dc 	ldrdeq	r0, [r0], -ip
    3600:	27609102 	strbcs	r9, [r0, -r2, lsl #2]!
    3604:	00000558 	andeq	r0, r0, r8, asr r5
    3608:	dc028401 	cfstrsle	mvf8, [r2], {1}
    360c:	02000008 	andeq	r0, r0, #8
    3610:	3e277091 	mcrcc	0, 1, r7, cr7, cr1, {4}
    3614:	01000014 	tsteq	r0, r4, lsl r0
    3618:	00460285 	subeq	r0, r6, r5, lsl #5
    361c:	91020000 	mrsls	r0, (UNDEF: 2)
    3620:	1114276c 	tstne	r4, ip, ror #14
    3624:	85010000 	strhi	r0, [r1, #-0]
    3628:	00004602 	andeq	r4, r0, r2, lsl #12
    362c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3630:	12a42c00 	adcne	r2, r4, #0, 24
    3634:	40010000 	andmi	r0, r1, r0
    3638:	011de802 	tsteq	sp, r2, lsl #16
    363c:	00010000 	andeq	r0, r1, r0
    3640:	7b9c0100 	blvc	fe703a48 <_estack+0xf66f3a48>
    3644:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    3648:	00001380 	andeq	r1, r0, r0, lsl #7
    364c:	f8024001 			; <UNDEFINED> instruction: 0xf8024001
    3650:	02000009 	andeq	r0, r0, #9
    3654:	a8276c91 	stmdage	r7!, {r0, r4, r7, sl, fp, sp, lr}
    3658:	01000014 	tsteq	r0, r4, lsl r0
    365c:	0b1d0242 	bleq	743f6c <__bss_end+0x72e41c>
    3660:	91020000 	mrsls	r0, (UNDEF: 2)
    3664:	cd2a0074 	stcgt	0, cr0, [sl, #-464]!	; 0xfffffe30
    3668:	01000012 	tsteq	r0, r2, lsl r0
    366c:	0046019b 	umaaleq	r0, r6, fp, r1
    3670:	1ba00000 	blne	fe803678 <_estack+0xf67f3678>
    3674:	02480001 	subeq	r0, r8, #1
    3678:	9c010000 	stcls	0, cr0, [r1], {-0}
    367c:	00001545 	andeq	r1, r0, r5, asr #10
    3680:	00116325 	andseq	r6, r1, r5, lsr #6
    3684:	019b0100 	orrseq	r0, fp, r0, lsl #2
    3688:	000008c0 	andeq	r0, r0, r0, asr #17
    368c:	25649102 	strbcs	r9, [r4, #-258]!	; 0xfffffefe
    3690:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    3694:	7a019b01 	bvc	6a2a0 <__bss_end+0x54750>
    3698:	0200000a 	andeq	r0, r0, #10
    369c:	95256091 	strls	r6, [r5, #-145]!	; 0xffffff6f
    36a0:	01000011 	tsteq	r0, r1, lsl r0
    36a4:	003f019b 	mlaseq	pc, fp, r1, r0	; <UNPREDICTABLE>
    36a8:	91020000 	mrsls	r0, (UNDEF: 2)
    36ac:	0184255e 	orreq	r2, r4, lr, asr r5
    36b0:	9b010000 	blls	436b8 <__bss_end+0x2db68>
    36b4:	00008c01 	andeq	r8, r0, r1, lsl #24
    36b8:	58910200 	ldmpl	r1, {r9}
    36bc:	0004a825 	andeq	sl, r4, r5, lsr #16
    36c0:	019b0100 	orrseq	r0, fp, r0, lsl #2
    36c4:	00000052 	andeq	r0, r0, r2, asr r0
    36c8:	25009102 	strcs	r9, [r0, #-258]	; 0xfffffefe
    36cc:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
    36d0:	45019b01 	strmi	r9, [r1, #-2817]	; 0xfffff4ff
    36d4:	02000015 	andeq	r0, r0, #21
    36d8:	c3250491 			; <UNDEFINED> instruction: 0xc3250491
    36dc:	01000013 	tsteq	r0, r3, lsl r0
    36e0:	0a7f019b 	beq	1fc3d54 <__bss_end+0x1fae204>
    36e4:	91020000 	mrsls	r0, (UNDEF: 2)
    36e8:	145a2508 	ldrbne	r2, [sl], #-1288	; 0xfffffaf8
    36ec:	9b010000 	blls	436f4 <__bss_end+0x2dba4>
    36f0:	000e0701 	andeq	r0, lr, r1, lsl #14
    36f4:	0c910200 	lfmeq	f0, 4, [r1], {0}
    36f8:	000c4d27 	andeq	r4, ip, r7, lsr #26
    36fc:	019d0100 	orrseq	r0, sp, r0, lsl #2
    3700:	00000046 	andeq	r0, r0, r6, asr #32
    3704:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    3708:	0000115a 	andeq	r1, r0, sl, asr r1
    370c:	1d019e01 	stcne	14, cr9, [r1, #-4]
    3710:	0200000b 	andeq	r0, r0, #11
    3714:	dc287091 	stcle	0, cr7, [r8], #-580	; 0xfffffdbc
    3718:	9c00011b 	stflss	f0, [r0], {27}
    371c:	27000001 	strcs	r0, [r0, -r1]
    3720:	00000197 	muleq	r0, r7, r1
    3724:	7f01a901 	svcvc	0x0001a901
    3728:	0200000a 	andeq	r0, r0, #10
    372c:	00006c91 	muleq	r0, r1, ip
    3730:	09f80408 	ldmibeq	r8!, {r3, sl}^
    3734:	b3000000 	movwlt	r0, #0
    3738:	04000002 	streq	r0, [r0], #-2
    373c:	000a8000 	andeq	r8, sl, r0
    3740:	d6010400 	strle	r0, [r1], -r0, lsl #8
    3744:	0c000000 	stceq	0, cr0, [r0], {-0}
    3748:	000015ca 	andeq	r1, r0, sl, asr #11
    374c:	000134c0 	andeq	r3, r1, r0, asr #9
    3750:	000003a0 	andeq	r0, r0, r0, lsr #7
    3754:	00000fcf 	andeq	r0, r0, pc, asr #31
    3758:	00159902 	andseq	r9, r5, r2, lsl #18
    375c:	2c0b0200 	sfmcs	f0, 4, [fp], {-0}
    3760:	03000000 	movweq	r0, #0
    3764:	00003204 	andeq	r3, r0, r4, lsl #4
    3768:	00420400 	subeq	r0, r2, r0, lsl #8
    376c:	42050000 	andmi	r0, r5, #0
    3770:	05000000 	streq	r0, [r0, #-0]
    3774:	0000004e 	andeq	r0, r0, lr, asr #32
    3778:	07040600 	streq	r0, [r4, -r0, lsl #12]
    377c:	000006d8 	ldrdeq	r0, [r0], -r8
    3780:	00004207 	andeq	r4, r0, r7, lsl #4
    3784:	09040800 	stmdbeq	r4, {fp}
    3788:	710d0208 	tstvc	sp, r8, lsl #4
    378c:	0a000000 	beq	3794 <_start-0x486c>
    3790:	0000155c 	andeq	r1, r0, ip, asr r5
    3794:	00210e02 	eoreq	r0, r1, r2, lsl #28
    3798:	0a000000 	beq	37a0 <_start-0x4860>
    379c:	0000008e 	andeq	r0, r0, lr, lsl #1
    37a0:	004e0f02 	subeq	r0, lr, r2, lsl #30
    37a4:	00040000 	andeq	r0, r4, r0
    37a8:	0015ae02 	andseq	sl, r5, r2, lsl #28
    37ac:	50100200 	andspl	r0, r0, r0, lsl #4
    37b0:	0b000000 	bleq	37b8 <_start-0x4848>
    37b4:	00000071 	andeq	r0, r0, r1, ror r0
    37b8:	0000008c 	andeq	r0, r0, ip, lsl #1
    37bc:	00008c0c 	andeq	r8, r0, ip, lsl #24
    37c0:	06004700 	streq	r4, [r0], -r0, lsl #14
    37c4:	016d0704 	cmneq	sp, r4, lsl #14
    37c8:	810d0000 	mrshi	r0, (UNDEF: 13)
    37cc:	01000015 	tsteq	r0, r5, lsl r0
    37d0:	00007c09 	andeq	r7, r0, r9, lsl #24
    37d4:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    37d8:	09000148 	stmdbeq	r0, {r3, r6, r8}
    37dc:	250c0128 	strcs	r0, [ip, #-296]	; 0xfffffed8
    37e0:	0a000001 	beq	37ec <_start-0x4814>
    37e4:	0000160b 	andeq	r1, r0, fp, lsl #12
    37e8:	01250d01 			; <UNDEFINED> instruction: 0x01250d01
    37ec:	0a000000 	beq	37f4 <_start-0x480c>
    37f0:	000014c8 	andeq	r1, r0, r8, asr #9
    37f4:	01250e01 			; <UNDEFINED> instruction: 0x01250e01
    37f8:	0a040000 	beq	103800 <__bss_end+0xedcb0>
    37fc:	000014d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3800:	01250f01 			; <UNDEFINED> instruction: 0x01250f01
    3804:	0a080000 	beq	20380c <__bss_end+0x1edcbc>
    3808:	000014f9 	strdeq	r1, [r0], -r9
    380c:	01251001 			; <UNDEFINED> instruction: 0x01251001
    3810:	0a0c0000 	beq	303818 <__bss_end+0x2edcc8>
    3814:	00001620 	andeq	r1, r0, r0, lsr #12
    3818:	01251101 			; <UNDEFINED> instruction: 0x01251101
    381c:	0a100000 	beq	403824 <__bss_end+0x3edcd4>
    3820:	00001570 	andeq	r1, r0, r0, ror r5
    3824:	01251201 			; <UNDEFINED> instruction: 0x01251201
    3828:	0a140000 	beq	503830 <__bss_end+0x4edce0>
    382c:	00001614 	andeq	r1, r0, r4, lsl r6
    3830:	01251301 			; <UNDEFINED> instruction: 0x01251301
    3834:	0a180000 	beq	60383c <__bss_end+0x5edcec>
    3838:	00001578 	andeq	r1, r0, r8, ror r5
    383c:	01251401 			; <UNDEFINED> instruction: 0x01251401
    3840:	0a1c0000 	beq	703848 <__bss_end+0x6edcf8>
    3844:	00001567 	andeq	r1, r0, r7, ror #10
    3848:	01251501 			; <UNDEFINED> instruction: 0x01251501
    384c:	0a200000 	beq	803854 <__bss_end+0x7edd04>
    3850:	000014da 	ldrdeq	r1, [r0], -sl
    3854:	01251601 			; <UNDEFINED> instruction: 0x01251601
    3858:	00240000 	eoreq	r0, r4, r0
    385c:	d3070406 	movwle	r0, #29702	; 0x7406
    3860:	02000006 	andeq	r0, r0, #6
    3864:	000014e7 	andeq	r1, r0, r7, ror #9
    3868:	00a41701 	adceq	r1, r4, r1, lsl #14
    386c:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    3870:	0d000001 	stceq	0, cr0, [r0, #-4]
    3874:	00000191 	muleq	r0, r1, r1
    3878:	01531901 	cmpeq	r3, r1, lsl #18
    387c:	03050000 	movweq	r0, #20480	; 0x5000
    3880:	00014428 	andeq	r4, r1, r8, lsr #8
    3884:	01370403 	teqeq	r7, r3, lsl #8
    3888:	4d070000 	stcmi	0, cr0, [r7, #-0]
    388c:	0b000001 	bleq	3898 <_start-0x4768>
    3890:	00000125 	andeq	r0, r0, r5, lsr #2
    3894:	00000168 	andeq	r0, r0, r8, ror #2
    3898:	00008c0c 	andeq	r8, r0, ip, lsl #24
    389c:	0d000200 	sfmeq	f0, 4, [r0, #-0]
    38a0:	00001525 	andeq	r1, r0, r5, lsr #10
    38a4:	01581c01 	cmpeq	r8, r1, lsl #24
    38a8:	03050000 	movweq	r0, #20480	; 0x5000
    38ac:	00014b34 	andeq	r4, r1, r4, lsr fp
    38b0:	0015510f 	andseq	r5, r5, pc, lsl #2
    38b4:	806d0100 	rsbhi	r0, sp, r0, lsl #2
    38b8:	e0000137 	and	r0, r0, r7, lsr r1
    38bc:	01000000 	mrseq	r0, (UNDEF: 0)
    38c0:	0001ab9c 	muleq	r1, ip, fp
    38c4:	72691000 	rsbvc	r1, r9, #0
    38c8:	6d010071 	stcvs	0, cr0, [r1, #-452]	; 0xfffffe3c
    38cc:	00000049 	andeq	r0, r0, r9, asr #32
    38d0:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    38d4:	0000154c 	andeq	r1, r0, ip, asr #10
    38d8:	01256f01 			; <UNDEFINED> instruction: 0x01256f01
    38dc:	91020000 	mrsls	r0, (UNDEF: 2)
    38e0:	8f0f0074 	svchi	0x000f0074
    38e4:	01000015 	tsteq	r0, r5, lsl r0
    38e8:	0136ac5b 	teqeq	r6, fp, asr ip
    38ec:	0000d400 	andeq	sp, r0, r0, lsl #8
    38f0:	dd9c0100 	ldfles	f0, [ip]
    38f4:	10000001 	andne	r0, r0, r1
    38f8:	00717269 	rsbseq	r7, r1, r9, ror #4
    38fc:	00495b01 	subeq	r5, r9, r1, lsl #22
    3900:	91020000 	mrsls	r0, (UNDEF: 2)
    3904:	154c0d6c 	strbne	r0, [ip, #-3436]	; 0xfffff294
    3908:	5d010000 	stcpl	0, cr0, [r1, #-0]
    390c:	00000125 	andeq	r0, r0, r5, lsr #2
    3910:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3914:	00150111 	andseq	r0, r5, r1, lsl r1
    3918:	48510100 	ldmdami	r1, {r8}^
    391c:	64000136 	strvs	r0, [r0], #-310	; 0xfffffeca
    3920:	01000000 	mrseq	r0, (UNDEF: 0)
    3924:	00021d9c 	muleq	r2, ip, sp
    3928:	72691000 	rsbvc	r1, r9, #0
    392c:	51010071 	tstpl	r1, r1, ror r0
    3930:	00000049 	andeq	r0, r0, r9, asr #32
    3934:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    3938:	0000155c 	andeq	r1, r0, ip, asr r5
    393c:	00215101 	eoreq	r5, r1, r1, lsl #2
    3940:	91020000 	mrsls	r0, (UNDEF: 2)
    3944:	008e1270 	addeq	r1, lr, r0, ror r2
    3948:	51010000 	mrspl	r0, (UNDEF: 1)
    394c:	0000004e 	andeq	r0, r0, lr, asr #32
    3950:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3954:	00150d13 	andseq	r0, r5, r3, lsl sp
    3958:	2c4c0100 	stfcse	f0, [ip], {-0}
    395c:	1c000136 	stfnes	f0, [r0], {54}	; 0x36
    3960:	01000000 	mrseq	r0, (UNDEF: 0)
    3964:	1541139c 	strbne	r1, [r1, #-924]	; 0xfffffc64
    3968:	47010000 	strmi	r0, [r1, -r0]
    396c:	00013610 	andeq	r3, r1, r0, lsl r6
    3970:	0000001c 	andeq	r0, r0, ip, lsl r0
    3974:	bf119c01 	svclt	0x00119c01
    3978:	01000015 	tsteq	r0, r5, lsl r0
    397c:	01357036 	teqeq	r5, r6, lsr r0
    3980:	0000a000 	andeq	sl, r0, r0
    3984:	629c0100 	addsvs	r0, ip, #0, 2
    3988:	0d000002 	stceq	0, cr0, [r0, #-8]
    398c:	00001516 	andeq	r1, r0, r6, lsl r5
    3990:	01253801 			; <UNDEFINED> instruction: 0x01253801
    3994:	54010000 	strpl	r0, [r1], #-0
    3998:	15351400 	ldrne	r1, [r5, #-1024]!	; 0xfffffc00
    399c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    39a0:	000134c0 	andeq	r3, r1, r0, asr #9
    39a4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    39a8:	2d129c01 	ldccs	12, cr9, [r2, #-4]
    39ac:	01000015 	tsteq	r0, r5, lsl r0
    39b0:	0001251e 	andeq	r2, r1, lr, lsl r5
    39b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    39b8:	00072612 	andeq	r2, r7, r2, lsl r6
    39bc:	491e0100 	ldmdbmi	lr, {r8}
    39c0:	02000000 	andeq	r0, r0, #0
    39c4:	d8156891 	ldmdale	r5, {r0, r4, r7, fp, sp, lr}
    39c8:	7c000134 	stfvcs	f0, [r0], {52}	; 0x34
    39cc:	16000000 	strne	r0, [r0], -r0
    39d0:	00746962 	rsbseq	r6, r4, r2, ror #18
    39d4:	00422301 	subeq	r2, r2, r1, lsl #6
    39d8:	91020000 	mrsls	r0, (UNDEF: 2)
    39dc:	72691674 	rsbvc	r1, r9, #116, 12	; 0x7400000
    39e0:	26010071 			; <UNDEFINED> instruction: 0x26010071
    39e4:	00000042 	andeq	r0, r0, r2, asr #32
    39e8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    39ec:	03fa0000 	mvnseq	r0, #0
    39f0:	00040000 	andeq	r0, r4, r0
    39f4:	00000bad 	andeq	r0, r0, sp, lsr #23
    39f8:	00d60104 	sbcseq	r0, r6, r4, lsl #2
    39fc:	720c0000 	andvc	r0, ip, #0
    3a00:	60000016 	andvs	r0, r0, r6, lsl r0
    3a04:	d8000138 	stmdale	r0, {r3, r4, r5, r8}
    3a08:	8f000005 	svchi	0x00000005
    3a0c:	02000010 	andeq	r0, r0, #16
    3a10:	0000170e 	andeq	r1, r0, lr, lsl #14
    3a14:	00005c01 	andeq	r5, r0, r1, lsl #24
    3a18:	5c050200 	sfmpl	f0, 4, [r5], {-0}
    3a1c:	03000000 	movweq	r0, #0
    3a20:	0000175b 	andeq	r1, r0, fp, asr r7
    3a24:	17760300 	ldrbne	r0, [r6, -r0, lsl #6]!
    3a28:	03010000 	movweq	r0, #4096	; 0x1000
    3a2c:	00001825 	andeq	r1, r0, r5, lsr #16
    3a30:	174f0302 	strbne	r0, [pc, -r2, lsl #6]
    3a34:	03030000 	movweq	r0, #12288	; 0x3000
    3a38:	00001784 	andeq	r1, r0, r4, lsl #15
    3a3c:	16b40304 	ldrtne	r0, [r4], r4, lsl #6
    3a40:	03050000 	movweq	r0, #20480	; 0x5000
    3a44:	000016c8 	andeq	r1, r0, r8, asr #13
    3a48:	01040006 	tsteq	r4, r6
    3a4c:	00090308 	andeq	r0, r9, r8, lsl #6
    3a50:	17380200 	ldrne	r0, [r8, -r0, lsl #4]!
    3a54:	5c010000 	stcpl	0, cr0, [r1], {-0}
    3a58:	02000000 	andeq	r0, r0, #0
    3a5c:	00008018 	andeq	r8, r0, r8, lsl r0
    3a60:	17470300 	strbne	r0, [r7, -r0, lsl #6]
    3a64:	03000000 	movweq	r0, #0
    3a68:	00001852 	andeq	r1, r0, r2, asr r8
    3a6c:	a0050001 	andge	r0, r5, r1
    3a70:	01a90801 			; <UNDEFINED> instruction: 0x01a90801
    3a74:	bb060000 	bllt	183a7c <__bss_end+0x16df2c>
    3a78:	01000017 	tsteq	r0, r7, lsl r0
    3a7c:	0001a909 	andeq	sl, r1, r9, lsl #18
    3a80:	c2060000 	andgt	r0, r6, #0
    3a84:	01000017 	tsteq	r0, r7, lsl r0
    3a88:	0001c00a 	andeq	ip, r1, sl
    3a8c:	28061800 	stmdacs	r6, {fp, ip}
    3a90:	01000016 	tsteq	r0, r6, lsl r0
    3a94:	0001c70b 	andeq	ip, r1, fp, lsl #14
    3a98:	cd061c00 	stcgt	12, cr1, [r6, #-0]
    3a9c:	01000017 	tsteq	r0, r7, lsl r0
    3aa0:	0001c00c 	andeq	ip, r1, ip
    3aa4:	66062400 	strvs	r2, [r6], -r0, lsl #8
    3aa8:	01000016 	tsteq	r0, r6, lsl r0
    3aac:	0001c70d 	andeq	ip, r1, sp, lsl #14
    3ab0:	d8062800 	stmdale	r6, {fp, sp}
    3ab4:	01000017 	tsteq	r0, r7, lsl r0
    3ab8:	0001c00e 	andeq	ip, r1, lr
    3abc:	8f063000 	svchi	0x00063000
    3ac0:	01000017 	tsteq	r0, r7, lsl r0
    3ac4:	0001c70f 	andeq	ip, r1, pc, lsl #14
    3ac8:	e3063400 	movw	r3, #25600	; 0x6400
    3acc:	01000017 	tsteq	r0, r7, lsl r0
    3ad0:	0001c010 	andeq	ip, r1, r0, lsl r0
    3ad4:	a3063c00 	movwge	r3, #27648	; 0x6c00
    3ad8:	01000017 	tsteq	r0, r7, lsl r0
    3adc:	0001c711 	andeq	ip, r1, r1, lsl r7
    3ae0:	ee064000 	cdp	0, 0, cr4, cr6, cr0, {0}
    3ae4:	01000017 	tsteq	r0, r7, lsl r0
    3ae8:	0001c012 	andeq	ip, r1, r2, lsl r0
    3aec:	9d064800 	stcls	8, cr4, [r6, #-0]
    3af0:	01000017 	tsteq	r0, r7, lsl r0
    3af4:	0001c713 	andeq	ip, r1, r3, lsl r7
    3af8:	f9064c00 			; <UNDEFINED> instruction: 0xf9064c00
    3afc:	01000017 	tsteq	r0, r7, lsl r0
    3b00:	0001c014 	andeq	ip, r1, r4, lsl r0
    3b04:	41065400 	tstmi	r6, r0, lsl #8
    3b08:	01000017 	tsteq	r0, r7, lsl r0
    3b0c:	0001c715 	andeq	ip, r1, r5, lsl r7
    3b10:	04065800 	streq	r5, [r6], #-2048	; 0xfffff800
    3b14:	01000018 	tsteq	r0, r8, lsl r0
    3b18:	0001c016 	andeq	ip, r1, r6, lsl r0
    3b1c:	6c066000 	stcvs	0, cr6, [r6], {-0}
    3b20:	01000016 	tsteq	r0, r6, lsl r0
    3b24:	0001c717 	andeq	ip, r1, r7, lsl r7
    3b28:	0f066400 	svceq	0x00066400
    3b2c:	01000018 	tsteq	r0, r8, lsl r0
    3b30:	0001c018 	andeq	ip, r1, r8, lsl r0
    3b34:	67066c00 	strvs	r6, [r6, -r0, lsl #24]
    3b38:	01000017 	tsteq	r0, r7, lsl r0
    3b3c:	0001c719 	andeq	ip, r1, r9, lsl r7
    3b40:	1a067000 	bne	19fb48 <__bss_end+0x189ff8>
    3b44:	01000018 	tsteq	r0, r8, lsl r0
    3b48:	0001c01a 	andeq	ip, r1, sl, lsl r0
    3b4c:	21067800 	tstcs	r6, r0, lsl #16
    3b50:	01000017 	tsteq	r0, r7, lsl r0
    3b54:	0001c71b 	andeq	ip, r1, fp, lsl r7
    3b58:	3c067c00 	stccc	12, cr7, [r6], {-0}
    3b5c:	01000018 	tsteq	r0, r8, lsl r0
    3b60:	0001c01c 	andeq	ip, r1, ip, lsl r0
    3b64:	f0068400 			; <UNDEFINED> instruction: 0xf0068400
    3b68:	01000016 	tsteq	r0, r6, lsl r0
    3b6c:	0001c71d 	andeq	ip, r1, sp, lsl r7
    3b70:	47068800 	strmi	r8, [r6, -r0, lsl #16]
    3b74:	01000018 	tsteq	r0, r8, lsl r0
    3b78:	0001c01e 	andeq	ip, r1, lr, lsl r0
    3b7c:	08069000 	stmdaeq	r6, {ip, pc}
    3b80:	01000017 	tsteq	r0, r7, lsl r0
    3b84:	0001d71f 	andeq	sp, r1, pc, lsl r7
    3b88:	6d069400 	cfstrsvs	mvf9, [r6, #-0]
    3b8c:	01000017 	tsteq	r0, r7, lsl r0
    3b90:	0001c720 	andeq	ip, r1, r0, lsr #14
    3b94:	07009800 	streq	r9, [r0, -r0, lsl #16]
    3b98:	000001c0 	andeq	r0, r0, r0, asr #3
    3b9c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    3ba0:	0001b908 	andeq	fp, r1, r8, lsl #18
    3ba4:	04000500 	streq	r0, [r0], #-1280	; 0xfffffb00
    3ba8:	016d0704 	cmneq	sp, r4, lsl #14
    3bac:	04040000 	streq	r0, [r4], #-0
    3bb0:	0006d307 	andeq	sp, r6, r7, lsl #6
    3bb4:	01c00700 	biceq	r0, r0, r0, lsl #14
    3bb8:	01d70000 	bicseq	r0, r7, r0
    3bbc:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    3bc0:	01000001 	tsteq	r0, r1
    3bc4:	01c00700 	biceq	r0, r0, r0, lsl #14
    3bc8:	01e70000 	mvneq	r0, r0
    3bcc:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    3bd0:	00000001 	andeq	r0, r0, r1
    3bd4:	162e0900 	strtne	r0, [lr], -r0, lsl #18
    3bd8:	22010000 	andcs	r0, r1, #0
    3bdc:	00000080 	andeq	r0, r0, r0, lsl #1
    3be0:	0001e70a 	andeq	lr, r1, sl, lsl #14
    3be4:	01910b00 	orrseq	r0, r1, r0, lsl #22
    3be8:	24010000 	strcs	r0, [r1], #-0
    3bec:	0000020e 	andeq	r0, r0, lr, lsl #4
    3bf0:	442c0305 	strtmi	r0, [ip], #-773	; 0xfffffcfb
    3bf4:	040c0001 	streq	r0, [ip], #-1
    3bf8:	000001f2 	strdeq	r0, [r0], -r2
    3bfc:	0002080d 	andeq	r0, r2, sp, lsl #16
    3c00:	16dd0e00 	ldrbne	r0, [sp], r0, lsl #28
    3c04:	80010000 	andhi	r0, r1, r0
    3c08:	00013de0 	andeq	r3, r1, r0, ror #27
    3c0c:	00000058 	andeq	r0, r0, r8, asr r0
    3c10:	02539c01 	subseq	r9, r3, #256	; 0x100
    3c14:	450f0000 	strmi	r0, [pc, #-0]	; 3c1c <_start-0x43e4>
    3c18:	01000016 	tsteq	r0, r6, lsl r0
    3c1c:	00025380 	andeq	r5, r2, r0, lsl #7
    3c20:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3c24:	00154c10 	andseq	r4, r5, r0, lsl ip
    3c28:	c0820100 	addgt	r0, r2, r0, lsl #2
    3c2c:	02000001 	andeq	r0, r0, #1
    3c30:	80107491 	mulshi	r0, r1, r4
    3c34:	01000007 	tsteq	r0, r7
    3c38:	0001c083 	andeq	ip, r1, r3, lsl #1
    3c3c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3c40:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3c44:	000006d8 	ldrdeq	r0, [r0], -r8
    3c48:	0017a90e 	andseq	sl, r7, lr, lsl #18
    3c4c:	28630100 	stmdacs	r3!, {r8}^
    3c50:	b800013c 	stmdalt	r0, {r2, r3, r4, r5, r8}
    3c54:	01000001 	tsteq	r0, r1
    3c58:	0002a89c 	muleq	r2, ip, r8
    3c5c:	16450f00 	strbne	r0, [r5], -r0, lsl #30
    3c60:	63010000 	movwvs	r0, #4096	; 0x1000
    3c64:	00000253 	andeq	r0, r0, r3, asr r2
    3c68:	0f6c9102 	svceq	0x006c9102
    3c6c:	00000171 	andeq	r0, r0, r1, ror r1
    3c70:	00216301 	eoreq	r6, r1, r1, lsl #6
    3c74:	91020000 	mrsls	r0, (UNDEF: 2)
    3c78:	154c106b 	strbne	r1, [ip, #-107]	; 0xffffff95
    3c7c:	65010000 	strvs	r0, [r1, #-0]
    3c80:	000001c0 	andeq	r0, r0, r0, asr #3
    3c84:	10749102 	rsbsne	r9, r4, r2, lsl #2
    3c88:	00000780 	andeq	r0, r0, r0, lsl #15
    3c8c:	01c06601 	biceq	r6, r0, r1, lsl #12
    3c90:	91020000 	mrsls	r0, (UNDEF: 2)
    3c94:	f70e0070 			; <UNDEFINED> instruction: 0xf70e0070
    3c98:	01000016 	tsteq	r0, r6, lsl r0
    3c9c:	013a7846 	teqeq	sl, r6, asr #16
    3ca0:	0001b000 	andeq	fp, r1, r0
    3ca4:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    3ca8:	0f000002 	svceq	0x00000002
    3cac:	00001645 	andeq	r1, r0, r5, asr #12
    3cb0:	02534601 	subseq	r4, r3, #1048576	; 0x100000
    3cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cb8:	01710f6c 	cmneq	r1, ip, ror #30
    3cbc:	46010000 	strmi	r0, [r1], -r0
    3cc0:	00000021 	andeq	r0, r0, r1, lsr #32
    3cc4:	106b9102 	rsbne	r9, fp, r2, lsl #2
    3cc8:	0000154c 	andeq	r1, r0, ip, asr #10
    3ccc:	01c04801 	biceq	r4, r0, r1, lsl #16
    3cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    3cd4:	07801074 			; <UNDEFINED> instruction: 0x07801074
    3cd8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    3cdc:	000001c0 	andeq	r0, r0, r0, asr #3
    3ce0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3ce4:	00164c11 	andseq	r4, r6, r1, lsl ip
    3ce8:	1e420100 	dvfnes	f0, f2, f0
    3cec:	28000003 	stmdacs	r0, {r0, r1}
    3cf0:	5000013a 	andpl	r0, r0, sl, lsr r1
    3cf4:	01000000 	mrseq	r0, (UNDEF: 0)
    3cf8:	00031e9c 	muleq	r3, ip, lr
    3cfc:	16450f00 	strbne	r0, [r5], -r0, lsl #30
    3d00:	42010000 	andmi	r0, r1, #0
    3d04:	00000253 	andeq	r0, r0, r3, asr r2
    3d08:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3d0c:	69050412 	stmdbvs	r5, {r1, r4, sl}
    3d10:	0e00746e 	cdpeq	4, 0, cr7, cr0, cr14, {3}
    3d14:	00001834 	andeq	r1, r0, r4, lsr r8
    3d18:	39703701 	ldmdbcc	r0!, {r0, r8, r9, sl, ip, sp}^
    3d1c:	00b80001 	adcseq	r0, r8, r1
    3d20:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d24:	00000373 	andeq	r0, r0, r3, ror r3
    3d28:	0016450f 	andseq	r4, r6, pc, lsl #10
    3d2c:	53370100 	teqpl	r7, #0, 2
    3d30:	02000002 	andeq	r0, r0, #2
    3d34:	1a0f6c91 	bne	3def80 <__bss_end+0x3c9430>
    3d38:	01000017 	tsteq	r0, r7, lsl r0
    3d3c:	00025337 	andeq	r5, r2, r7, lsr r3
    3d40:	68910200 	ldmvs	r1, {r9}
    3d44:	00078010 	andeq	r8, r7, r0, lsl r0
    3d48:	c0380100 	eorsgt	r0, r8, r0, lsl #2
    3d4c:	02000001 	andeq	r0, r0, #1
    3d50:	4c107491 	cfldrsmi	mvf7, [r0], {145}	; 0x91
    3d54:	01000015 	tsteq	r0, r5, lsl r0
    3d58:	0001c039 	andeq	ip, r1, r9, lsr r0
    3d5c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3d60:	16551300 	ldrbne	r1, [r5], -r0, lsl #6
    3d64:	33010000 	movwcc	r0, #4096	; 0x1000
    3d68:	0001393c 	andeq	r3, r1, ip, lsr r9
    3d6c:	00000034 	andeq	r0, r0, r4, lsr r0
    3d70:	03a59c01 			; <UNDEFINED> instruction: 0x03a59c01
    3d74:	450f0000 	strmi	r0, [pc, #-0]	; 3d7c <_start-0x4284>
    3d78:	01000016 	tsteq	r0, r6, lsl r0
    3d7c:	00025333 	andeq	r5, r2, r3, lsr r3
    3d80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3d84:	72696414 	rsbvc	r6, r9, #20, 8	; 0x14000000
    3d88:	63330100 	teqvs	r3, #0, 2
    3d8c:	02000000 	andeq	r0, r0, #0
    3d90:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    3d94:	00001728 	andeq	r1, r0, r8, lsr #14
    3d98:	38602701 	stmdacc	r0!, {r0, r8, r9, sl, sp}^
    3d9c:	00dc0001 	sbcseq	r0, ip, r1
    3da0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3da4:	0016450f 	andseq	r4, r6, pc, lsl #10
    3da8:	53270100 			; <UNDEFINED> instruction: 0x53270100
    3dac:	02000002 	andeq	r0, r0, #2
    3db0:	950f6491 	strls	r6, [pc, #-1169]	; 3927 <_start-0x46d9>
    3db4:	01000017 	tsteq	r0, r7, lsl r0
    3db8:	00025327 	andeq	r5, r2, r7, lsr #6
    3dbc:	60910200 	addsvs	r0, r1, r0, lsl #4
    3dc0:	00078010 	andeq	r8, r7, r0, lsl r0
    3dc4:	1e290100 	sufnee	f0, f1, f0
    3dc8:	02000003 	andeq	r0, r0, #3
    3dcc:	76167491 			; <UNDEFINED> instruction: 0x76167491
    3dd0:	01006c61 	tsteq	r0, r1, ror #24
    3dd4:	0001c02b 	andeq	ip, r1, fp, lsr #32
    3dd8:	70910200 	addsvc	r0, r1, r0, lsl #4
    3ddc:	00164010 	andseq	r4, r6, r0, lsl r0
    3de0:	1e2d0100 	sufnee	f0, f5, f0
    3de4:	02000003 	andeq	r0, r0, #3
    3de8:	00006c91 	muleq	r0, r1, ip
    3dec:	00000ae4 	andeq	r0, r0, r4, ror #21
    3df0:	0cf60004 	ldcleq	0, cr0, [r6], #16
    3df4:	01040000 	mrseq	r0, (UNDEF: 4)
    3df8:	000000d6 	ldrdeq	r0, [r0], -r6
    3dfc:	0019190c 	andseq	r1, r9, ip, lsl #18
    3e00:	013e3800 	teqeq	lr, r0, lsl #16
    3e04:	0004ac00 	andeq	sl, r4, r0, lsl #24
    3e08:	00115c00 	andseq	r5, r1, r0, lsl #24
    3e0c:	0b690200 	bleq	1a44614 <__bss_end+0x1a2eac4>
    3e10:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    3e14:	00000031 	andeq	r0, r0, r1, lsr r0
    3e18:	00002103 	andeq	r2, r0, r3, lsl #2
    3e1c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3e20:	000006d8 	ldrdeq	r0, [r0], -r8
    3e24:	69050405 	stmdbvs	r5, {r0, r2, sl}
    3e28:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    3e2c:	01760508 	cmneq	r6, r8, lsl #10
    3e30:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    3e34:	0001a404 	andeq	sl, r1, r4, lsl #8
    3e38:	06010400 	streq	r0, [r1], -r0, lsl #8
    3e3c:	00000905 	andeq	r0, r0, r5, lsl #18
    3e40:	03080104 	movweq	r0, #33028	; 0x8104
    3e44:	04000009 	streq	r0, [r0], #-9
    3e48:	091f0502 	ldmdbeq	pc, {r1, r8, sl}	; <UNPREDICTABLE>
    3e4c:	02040000 	andeq	r0, r4, #0
    3e50:	0000b707 	andeq	fp, r0, r7, lsl #14
    3e54:	00620300 	rsbeq	r0, r2, r0, lsl #6
    3e58:	04040000 	streq	r0, [r4], #-0
    3e5c:	00017b05 	andeq	r7, r1, r5, lsl #22
    3e60:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3e64:	000006d3 	ldrdeq	r0, [r0], -r3
    3e68:	ce070804 	cdpgt	8, 0, cr0, cr7, cr4, {0}
    3e6c:	02000006 	andeq	r0, r0, #6
    3e70:	00000874 	andeq	r0, r0, r4, ror r8
    3e74:	008e2203 	addeq	r2, lr, r3, lsl #4
    3e78:	04060000 	streq	r0, [r6], #-0
    3e7c:	00000094 	muleq	r0, r4, r0
    3e80:	0009cd07 	andeq	ip, r9, r7, lsl #26
    3e84:	08e40200 	stmiaeq	r4!, {r9}^
    3e88:	2c040000 	stccs	0, cr0, [r4], {-0}
    3e8c:	0000006e 	andeq	r0, r0, lr, rrx
    3e90:	0009ee02 	andeq	lr, r9, r2, lsl #28
    3e94:	6e720400 	cdpvs	4, 7, cr0, cr2, cr0, {0}
    3e98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3e9c:	0000087c 	andeq	r0, r0, ip, ror r8
    3ea0:	31016502 	tstcc	r1, r2, lsl #10
    3ea4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3ea8:	daa60404 	ble	fe984ec0 <_estack+0xf6974ec0>
    3eac:	0a000000 	beq	3eb4 <_start-0x414c>
    3eb0:	0000086e 	andeq	r0, r0, lr, ror #16
    3eb4:	00afa804 	adceq	sl, pc, r4, lsl #16
    3eb8:	200a0000 	andcs	r0, sl, r0
    3ebc:	04000008 	streq	r0, [r0], #-8
    3ec0:	0000daa9 	andeq	sp, r0, r9, lsr #21
    3ec4:	540b0000 	strpl	r0, [fp], #-0
    3ec8:	ea000000 	b	3ed0 <_start-0x4130>
    3ecc:	0c000000 	stceq	0, cr0, [r0], {-0}
    3ed0:	000000ea 	andeq	r0, r0, sl, ror #1
    3ed4:	04040003 	streq	r0, [r4], #-3
    3ed8:	00016d07 	andeq	r6, r1, r7, lsl #26
    3edc:	04080d00 	streq	r0, [r8], #-3328	; 0xfffff300
    3ee0:	000112a3 	andeq	r1, r1, r3, lsr #5
    3ee4:	09c50e00 	stmibeq	r5, {r9, sl, fp}^
    3ee8:	a5040000 	strge	r0, [r4, #-0]
    3eec:	00000038 	andeq	r0, r0, r8, lsr r0
    3ef0:	09d40e00 	ldmibeq	r4, {r9, sl, fp}^
    3ef4:	aa040000 	bge	103efc <__bss_end+0xee3ac>
    3ef8:	000000bb 	strheq	r0, [r0], -fp
    3efc:	47020004 	strmi	r0, [r2, -r4]
    3f00:	04000009 	streq	r0, [r0], #-9
    3f04:	0000f1ab 	andeq	pc, r0, fp, lsr #3
    3f08:	07e30200 	strbeq	r0, [r3, r0, lsl #4]!
    3f0c:	af040000 	svcge	0x00040000
    3f10:	00000083 	andeq	r0, r0, r3, lsl #1
    3f14:	0406040f 	streq	r0, [r6], #-1039	; 0xfffffbf1
    3f18:	00000130 	andeq	r0, r0, r0, lsr r1
    3f1c:	0c080104 	stfeqs	f0, [r8], {4}
    3f20:	03000009 	movweq	r0, #9
    3f24:	00000130 	andeq	r0, r0, r0, lsr r1
    3f28:	000a3202 	andeq	r3, sl, r2, lsl #4
    3f2c:	75160500 	ldrvc	r0, [r6, #-1280]	; 0xfffffb00
    3f30:	10000000 	andne	r0, r0, r0
    3f34:	000007f4 	strdeq	r0, [r0], -r4
    3f38:	9a2f0518 	bls	bc53a0 <__bss_end+0xbaf850>
    3f3c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3f40:	00000968 	andeq	r0, r0, r8, ror #18
    3f44:	019a3105 	orrseq	r3, sl, r5, lsl #2
    3f48:	11000000 	mrsne	r0, (UNDEF: 0)
    3f4c:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    3f50:	00003832 	andeq	r3, r0, r2, lsr r8
    3f54:	b00e0400 	andlt	r0, lr, r0, lsl #8
    3f58:	05000009 	streq	r0, [r0, #-9]
    3f5c:	00003832 	andeq	r3, r0, r2, lsr r8
    3f60:	dd0e0800 	stcle	8, cr0, [lr, #-0]
    3f64:	05000007 	streq	r0, [r0, #-7]
    3f68:	00003832 	andeq	r3, r0, r2, lsr r8
    3f6c:	770e0c00 	strvc	r0, [lr, -r0, lsl #24]
    3f70:	0500000a 	streq	r0, [r0, #-10]
    3f74:	00003832 	andeq	r3, r0, r2, lsr r8
    3f78:	5f111000 	svcpl	0x00111000
    3f7c:	33050078 	movwcc	r0, #20600	; 0x5078
    3f80:	000001a0 	andeq	r0, r0, r0, lsr #3
    3f84:	04060014 	streq	r0, [r6], #-20	; 0xffffffec
    3f88:	00000147 	andeq	r0, r0, r7, asr #2
    3f8c:	00013c0b 	andeq	r3, r1, fp, lsl #24
    3f90:	0001b000 	andeq	fp, r1, r0
    3f94:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    3f98:	00000000 	andeq	r0, r0, r0
    3f9c:	00081b10 	andeq	r1, r8, r0, lsl fp
    3fa0:	37052400 	strcc	r2, [r5, -r0, lsl #8]
    3fa4:	00000229 	andeq	r0, r0, r9, lsr #4
    3fa8:	0007160e 	andeq	r1, r7, lr, lsl #12
    3fac:	38390500 	ldmdacc	r9!, {r8, sl}
    3fb0:	00000000 	andeq	r0, r0, r0
    3fb4:	0009fd0e 	andeq	pc, r9, lr, lsl #26
    3fb8:	383a0500 	ldmdacc	sl!, {r8, sl}
    3fbc:	04000000 	streq	r0, [r0], #-0
    3fc0:	00072b0e 	andeq	r2, r7, lr, lsl #22
    3fc4:	383b0500 	ldmdacc	fp!, {r8, sl}
    3fc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3fcc:	000b020e 	andeq	r0, fp, lr, lsl #4
    3fd0:	383c0500 	ldmdacc	ip!, {r8, sl}
    3fd4:	0c000000 	stceq	0, cr0, [r0], {-0}
    3fd8:	0008be0e 	andeq	fp, r8, lr, lsl #28
    3fdc:	383d0500 	ldmdacc	sp!, {r8, sl}
    3fe0:	10000000 	andne	r0, r0, r0
    3fe4:	00089e0e 	andeq	r9, r8, lr, lsl #28
    3fe8:	383e0500 	ldmdacc	lr!, {r8, sl}
    3fec:	14000000 	strne	r0, [r0], #-0
    3ff0:	000a7c0e 	andeq	r7, sl, lr, lsl #24
    3ff4:	383f0500 	ldmdacc	pc!, {r8, sl}	; <UNPREDICTABLE>
    3ff8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3ffc:	0009290e 	andeq	r2, r9, lr, lsl #18
    4000:	38400500 	stmdacc	r0, {r8, sl}^
    4004:	1c000000 	stcne	0, cr0, [r0], {-0}
    4008:	000ac90e 	andeq	ip, sl, lr, lsl #18
    400c:	38410500 	stmdacc	r1, {r8, sl}^
    4010:	20000000 	andcs	r0, r0, r0
    4014:	073a1200 	ldreq	r1, [sl, -r0, lsl #4]!
    4018:	01080000 	mrseq	r0, (UNDEF: 8)
    401c:	02694a05 	rsbeq	r4, r9, #20480	; 0x5000
    4020:	bc0e0000 	stclt	0, cr0, [lr], {-0}
    4024:	05000007 	streq	r0, [r0, #-7]
    4028:	0002694b 	andeq	r6, r2, fp, asr #18
    402c:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
    4030:	05000006 	streq	r0, [r0, #-6]
    4034:	0002694c 	andeq	r6, r2, ip, asr #18
    4038:	19138000 	ldmdbne	r3, {pc}
    403c:	0500000a 	streq	r0, [r0, #-10]
    4040:	00013c4e 	andeq	r3, r1, lr, asr #24
    4044:	13010000 	movwne	r0, #4096	; 0x1000
    4048:	0000075f 	andeq	r0, r0, pc, asr r7
    404c:	013c5105 	teqeq	ip, r5, lsl #2
    4050:	01040000 	mrseq	r0, (UNDEF: 4)
    4054:	01280b00 			; <UNDEFINED> instruction: 0x01280b00
    4058:	02790000 	rsbseq	r0, r9, #0
    405c:	ea0c0000 	b	304064 <__bss_end+0x2ee514>
    4060:	1f000000 	svcne	0x00000000
    4064:	08c71200 	stmiaeq	r7, {r9, ip}^
    4068:	01900000 	orrseq	r0, r0, r0
    406c:	02b75d05 	adcseq	r5, r7, #320	; 0x140
    4070:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
    4074:	05000009 	streq	r0, [r0, #-9]
    4078:	0002b75e 	andeq	fp, r2, lr, asr r7
    407c:	800e0000 	andhi	r0, lr, r0
    4080:	05000009 	streq	r0, [r0, #-9]
    4084:	0000385f 	andeq	r3, r0, pc, asr r8
    4088:	c40e0400 	strgt	r0, [lr], #-1024	; 0xfffffc00
    408c:	05000007 	streq	r0, [r0, #-7]
    4090:	0002bd61 	andeq	fp, r2, r1, ror #26
    4094:	3a0e0800 	bcc	38609c <__bss_end+0x37054c>
    4098:	05000007 	streq	r0, [r0, #-7]
    409c:	00022962 	andeq	r2, r2, r2, ror #18
    40a0:	06008800 	streq	r8, [r0], -r0, lsl #16
    40a4:	00027904 	andeq	r7, r2, r4, lsl #18
    40a8:	02cd0b00 	sbceq	r0, sp, #0, 22
    40ac:	02cd0000 	sbceq	r0, sp, #0
    40b0:	ea0c0000 	b	3040b8 <__bss_end+0x2ee568>
    40b4:	1f000000 	svcne	0x00000000
    40b8:	d3040600 	movwle	r0, #17920	; 0x4600
    40bc:	14000002 	strne	r0, [r0], #-2
    40c0:	00093310 	andeq	r3, r9, r0, lsl r3
    40c4:	75050800 	strvc	r0, [r5, #-2048]	; 0xfffff800
    40c8:	000002f9 	strdeq	r0, [r0], -r9
    40cc:	0007250e 	andeq	r2, r7, lr, lsl #10
    40d0:	f9760500 			; <UNDEFINED> instruction: 0xf9760500
    40d4:	00000002 	andeq	r0, r0, r2
    40d8:	00064a0e 	andeq	r4, r6, lr, lsl #20
    40dc:	38770500 	ldmdacc	r7!, {r8, sl}^
    40e0:	04000000 	streq	r0, [r0], #-0
    40e4:	54040600 	strpl	r0, [r4], #-1536	; 0xfffffa00
    40e8:	10000000 	andne	r0, r0, r0
    40ec:	00000952 	andeq	r0, r0, r2, asr r9
    40f0:	29b50568 	ldmibcs	r5!, {r3, r5, r6, r8, sl}
    40f4:	11000004 	tstne	r0, r4
    40f8:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    40fc:	0002f9b6 			; <UNDEFINED> instruction: 0x0002f9b6
    4100:	5f110000 	svcpl	0x00110000
    4104:	b7050072 	smlsdxlt	r5, r2, r0, r0
    4108:	00000038 	andeq	r0, r0, r8, lsr r0
    410c:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    4110:	38b80500 	ldmcc	r8!, {r8, sl}
    4114:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4118:	0007580e 	andeq	r5, r7, lr, lsl #16
    411c:	5bb90500 	blpl	fee45524 <_estack+0xf6e35524>
    4120:	0c000000 	stceq	0, cr0, [r0], {-0}
    4124:	0008370e 	andeq	r3, r8, lr, lsl #14
    4128:	5bba0500 	blpl	fee85530 <_estack+0xf6e75530>
    412c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4130:	66625f11 	uqadd16vs	r5, r2, r1
    4134:	d4bb0500 	ldrtle	r0, [fp], #1280	; 0x500
    4138:	10000002 	andne	r0, r0, r2
    413c:	0006e50e 	andeq	lr, r6, lr, lsl #10
    4140:	38bc0500 	ldmcc	ip!, {r8, sl}
    4144:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4148:	0007480e 	andeq	r4, r7, lr, lsl #16
    414c:	28c30500 	stmiacs	r3, {r8, sl}^
    4150:	1c000001 	stcne	0, cr0, [r0], {1}
    4154:	00080b0e 	andeq	r0, r8, lr, lsl #22
    4158:	84c50500 	strbhi	r0, [r5], #1280	; 0x500
    415c:	20000005 	andcs	r0, r0, r5
    4160:	0008970e 	andeq	r9, r8, lr, lsl #14
    4164:	aec70500 	cdpge	5, 12, cr0, cr7, cr0, {0}
    4168:	24000005 	strcs	r0, [r0], #-5
    416c:	0009dc0e 	andeq	sp, r9, lr, lsl #24
    4170:	d2ca0500 	sbcle	r0, sl, #0, 10
    4174:	28000005 	stmdacs	r0, {r0, r2}
    4178:	000ae30e 	andeq	lr, sl, lr, lsl #6
    417c:	eccb0500 	cfstr64	mvdx0, [fp], {0}
    4180:	2c000005 	stccs	0, cr0, [r0], {5}
    4184:	62755f11 	rsbsvs	r5, r5, #17, 30	; 0x44
    4188:	d4ce0500 	strble	r0, [lr], #1280	; 0x500
    418c:	30000002 	andcc	r0, r0, r2
    4190:	70755f11 	rsbsvc	r5, r5, r1, lsl pc
    4194:	f9cf0500 			; <UNDEFINED> instruction: 0xf9cf0500
    4198:	38000002 	stmdacc	r0, {r1}
    419c:	72755f11 	rsbsvc	r5, r5, #17, 30	; 0x44
    41a0:	38d00500 	ldmcc	r0, {r8, sl}^
    41a4:	3c000000 	stccc	0, cr0, [r0], {-0}
    41a8:	00071f0e 	andeq	r1, r7, lr, lsl #30
    41ac:	f2d30500 	vabal.s16	q8, d3, d0
    41b0:	40000005 	andmi	r0, r0, r5
    41b4:	000abb0e 	andeq	fp, sl, lr, lsl #22
    41b8:	02d40500 	sbcseq	r0, r4, #0, 10
    41bc:	43000006 	movwmi	r0, #6
    41c0:	626c5f11 	rsbvs	r5, ip, #17, 30	; 0x44
    41c4:	d4d70500 	ldrble	r0, [r7], #1280	; 0x500
    41c8:	44000002 	strmi	r0, [r0], #-2
    41cc:	00076e0e 	andeq	r6, r7, lr, lsl #28
    41d0:	38da0500 	ldmcc	sl, {r8, sl}^
    41d4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    41d8:	00077f0e 	andeq	r7, r7, lr, lsl #30
    41dc:	99db0500 	ldmibls	fp, {r8, sl}^
    41e0:	50000000 	andpl	r0, r0, r0
    41e4:	0006630e 	andeq	r6, r6, lr, lsl #6
    41e8:	47de0500 	ldrbmi	r0, [lr, r0, lsl #10]
    41ec:	54000004 	strpl	r0, [r0], #-4
    41f0:	0009ce0e 	andeq	ip, r9, lr, lsl #28
    41f4:	1de20500 	cfstr64ne	mvdx0, [r2]
    41f8:	58000001 	stmdapl	r0, {r0}
    41fc:	00095a0e 	andeq	r5, r9, lr, lsl #20
    4200:	12e40500 	rscne	r0, r4, #0, 10
    4204:	5c000001 	stcpl	0, cr0, [r0], {1}
    4208:	00088f0e 	andeq	r8, r8, lr, lsl #30
    420c:	38e50500 	stmiacc	r5!, {r8, sl}^
    4210:	64000000 	strvs	r0, [r0], #-0
    4214:	00381500 	eorseq	r1, r8, r0, lsl #10
    4218:	04470000 	strbeq	r0, [r7], #-0
    421c:	47160000 	ldrmi	r0, [r6, -r0]
    4220:	16000004 	strne	r0, [r0], -r4
    4224:	00000128 	andeq	r0, r0, r8, lsr #2
    4228:	00012a16 	andeq	r2, r1, r6, lsl sl
    422c:	00381600 	eorseq	r1, r8, r0, lsl #12
    4230:	06000000 	streq	r0, [r0], -r0
    4234:	00045204 	andeq	r5, r4, r4, lsl #4
    4238:	04470300 	strbeq	r0, [r7], #-768	; 0xfffffd00
    423c:	b8170000 	ldmdalt	r7, {}	; <UNPREDICTABLE>
    4240:	28000009 	stmdacs	r0, {r0, r3}
    4244:	02390504 	eorseq	r0, r9, #4, 10	; 0x1000000
    4248:	00000584 	andeq	r0, r0, r4, lsl #11
    424c:	00091818 	andeq	r1, r9, r8, lsl r8
    4250:	023b0500 	eorseq	r0, fp, #0, 10
    4254:	00000038 	andeq	r0, r0, r8, lsr r0
    4258:	07671800 	strbeq	r1, [r7, -r0, lsl #16]!
    425c:	40050000 	andmi	r0, r5, r0
    4260:	00065902 	andeq	r5, r6, r2, lsl #18
    4264:	27180400 	ldrcs	r0, [r8, -r0, lsl #8]
    4268:	05000008 	streq	r0, [r0, #-8]
    426c:	06590240 	ldrbeq	r0, [r9], -r0, asr #4
    4270:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    4274:	000007ec 	andeq	r0, r0, ip, ror #15
    4278:	59024005 	stmdbpl	r2, {r0, r2, lr}
    427c:	0c000006 	stceq	0, cr0, [r0], {6}
    4280:	00097b18 	andeq	r7, r9, r8, lsl fp
    4284:	02420500 	subeq	r0, r2, #0, 10
    4288:	00000038 	andeq	r0, r0, r8, lsr r0
    428c:	06581810 			; <UNDEFINED> instruction: 0x06581810
    4290:	43050000 	movwmi	r0, #20480	; 0x5000
    4294:	00083b02 	andeq	r3, r8, r2, lsl #22
    4298:	97181400 	ldrls	r1, [r8, -r0, lsl #8]
    429c:	05000009 	streq	r0, [r0, #-9]
    42a0:	00380246 	eorseq	r0, r8, r6, asr #4
    42a4:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    42a8:	00000985 	andeq	r0, r0, r5, lsl #19
    42ac:	50024705 	andpl	r4, r2, r5, lsl #14
    42b0:	34000008 	strcc	r0, [r0], #-8
    42b4:	0008d918 	andeq	sp, r8, r8, lsl r9
    42b8:	02490500 	subeq	r0, r9, #0, 10
    42bc:	00000038 	andeq	r0, r0, r8, lsr r0
    42c0:	098d1838 	stmibeq	sp, {r3, r4, r5, fp, ip}
    42c4:	4b050000 	blmi	1442cc <__bss_end+0x12e77c>
    42c8:	00086102 	andeq	r6, r8, r2, lsl #2
    42cc:	66183c00 	ldrvs	r3, [r8], -r0, lsl #24
    42d0:	05000008 	streq	r0, [r0, #-8]
    42d4:	019a024e 	orrseq	r0, sl, lr, asr #4
    42d8:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    42dc:	00000811 	andeq	r0, r0, r1, lsl r8
    42e0:	38024f05 	stmdacc	r2, {r0, r2, r8, r9, sl, fp, lr}
    42e4:	44000000 	strmi	r0, [r0], #-0
    42e8:	000afd18 	andeq	pc, sl, r8, lsl sp	; <UNPREDICTABLE>
    42ec:	02500500 	subseq	r0, r0, #0, 10
    42f0:	0000019a 	muleq	r0, sl, r1
    42f4:	08eb1848 	stmiaeq	fp!, {r3, r6, fp, ip}^
    42f8:	51050000 	mrspl	r0, (UNDEF: 5)
    42fc:	00086702 	andeq	r6, r8, r2, lsl #14
    4300:	2f184c00 	svccs	0x00184c00
    4304:	05000008 	streq	r0, [r0, #-8]
    4308:	00380254 	eorseq	r0, r8, r4, asr r2
    430c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    4310:	00000777 	andeq	r0, r0, r7, ror r7
    4314:	2a025505 	bcs	99730 <__bss_end+0x83be0>
    4318:	54000001 	strpl	r0, [r0], #-1
    431c:	00091118 	andeq	r1, r9, r8, lsl r1
    4320:	02780500 	rsbseq	r0, r8, #0, 10
    4324:	00000819 	andeq	r0, r0, r9, lsl r8
    4328:	08c71958 	stmiaeq	r7, {r3, r4, r6, r8, fp, ip}^
    432c:	7c050000 	stcvc	0, cr0, [r5], {-0}
    4330:	0002b702 	andeq	fp, r2, r2, lsl #14
    4334:	19014800 	stmdbne	r1, {fp, lr}
    4338:	00000844 	andeq	r0, r0, r4, asr #16
    433c:	79027d05 	stmdbvc	r2, {r0, r2, r8, sl, fp, ip, sp, lr}
    4340:	4c000002 	stcmi	0, cr0, [r0], {2}
    4344:	0a9f1901 	beq	fe7ca750 <_estack+0xf67ba750>
    4348:	81050000 	mrshi	r0, (UNDEF: 5)
    434c:	00087802 	andeq	r7, r8, r2, lsl #16
    4350:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    4354:	00000750 	andeq	r0, r0, r0, asr r7
    4358:	1e028605 	cfmadd32ne	mvax0, mvfx8, mvfx2, mvfx5
    435c:	e0000006 	and	r0, r0, r6
    4360:	07351902 	ldreq	r1, [r5, -r2, lsl #18]!
    4364:	87050000 	strhi	r0, [r5, -r0]
    4368:	00088402 	andeq	r8, r8, r2, lsl #8
    436c:	0002ec00 	andeq	lr, r2, r0, lsl #24
    4370:	04290406 	strteq	r0, [r9], #-1030	; 0xfffffbfa
    4374:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    4378:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    437c:	16000005 	strne	r0, [r0], -r5
    4380:	00000447 	andeq	r0, r0, r7, asr #8
    4384:	00012816 	andeq	r2, r1, r6, lsl r8
    4388:	05a81600 	streq	r1, [r8, #1536]!	; 0x600
    438c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    4390:	00000000 	andeq	r0, r0, r0
    4394:	01370406 	teqeq	r7, r6, lsl #8
    4398:	04060000 	streq	r0, [r6], #-0
    439c:	0000058a 	andeq	r0, r0, sl, lsl #11
    43a0:	0000a415 	andeq	sl, r0, r5, lsl r4
    43a4:	0005d200 	andeq	sp, r5, r0, lsl #4
    43a8:	04471600 	strbeq	r1, [r7], #-1536	; 0xfffffa00
    43ac:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    43b0:	16000001 	strne	r0, [r0], -r1
    43b4:	000000a4 	andeq	r0, r0, r4, lsr #1
    43b8:	00003816 	andeq	r3, r0, r6, lsl r8
    43bc:	04060000 	streq	r0, [r6], #-0
    43c0:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    43c4:	00003815 	andeq	r3, r0, r5, lsl r8
    43c8:	0005ec00 	andeq	lr, r5, r0, lsl #24
    43cc:	04471600 	strbeq	r1, [r7], #-1536	; 0xfffffa00
    43d0:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    43d4:	00000001 	andeq	r0, r0, r1
    43d8:	05d80406 	ldrbeq	r0, [r8, #1030]	; 0x406
    43dc:	540b0000 	strpl	r0, [fp], #-0
    43e0:	02000000 	andeq	r0, r0, #0
    43e4:	0c000006 	stceq	0, cr0, [r0], {6}
    43e8:	000000ea 	andeq	r0, r0, sl, ror #1
    43ec:	540b0002 	strpl	r0, [fp], #-2
    43f0:	12000000 	andne	r0, r0, #0
    43f4:	0c000006 	stceq	0, cr0, [r0], {6}
    43f8:	000000ea 	andeq	r0, r0, sl, ror #1
    43fc:	40080000 	andmi	r0, r8, r0
    4400:	05000009 	streq	r0, [r0, #-9]
    4404:	02ff011f 	rscseq	r0, pc, #-1073741817	; 0xc0000007
    4408:	861a0000 	ldrhi	r0, [sl], -r0
    440c:	0c00000a 	stceq	0, cr0, [r0], {10}
    4410:	53012305 	movwpl	r2, #4869	; 0x1305
    4414:	18000006 	stmdane	r0, {r1, r2}
    4418:	00000968 	andeq	r0, r0, r8, ror #18
    441c:	53012505 	movwpl	r2, #5381	; 0x1505
    4420:	00000006 	andeq	r0, r0, r6
    4424:	00083d18 	andeq	r3, r8, r8, lsl sp
    4428:	01260500 			; <UNDEFINED> instruction: 0x01260500
    442c:	00000038 	andeq	r0, r0, r8, lsr r0
    4430:	093a1804 	ldmdbeq	sl!, {r2, fp, ip}
    4434:	27050000 	strcs	r0, [r5, -r0]
    4438:	00065901 	andeq	r5, r6, r1, lsl #18
    443c:	06000800 	streq	r0, [r0], -r0, lsl #16
    4440:	00061e04 	andeq	r1, r6, r4, lsl #28
    4444:	12040600 	andne	r0, r4, #0, 12
    4448:	1a000006 	bne	4468 <_start-0x3b98>
    444c:	00000650 	andeq	r0, r0, r0, asr r6
    4450:	013f050e 	teqeq	pc, lr, lsl #10
    4454:	00000694 	muleq	r0, r4, r6
    4458:	0009bf18 	andeq	fp, r9, r8, lsl pc
    445c:	01400500 	cmpeq	r0, r0, lsl #10
    4460:	00000694 	muleq	r0, r4, r6
    4464:	0a061800 	beq	18a46c <__bss_end+0x17491c>
    4468:	41050000 	mrsmi	r0, (UNDEF: 5)
    446c:	00069401 	andeq	r9, r6, r1, lsl #8
    4470:	22180600 	andscs	r0, r8, #0, 12
    4474:	0500000a 	streq	r0, [r0, #-10]
    4478:	00620142 	rsbeq	r0, r2, r2, asr #2
    447c:	000c0000 	andeq	r0, ip, r0
    4480:	0000620b 	andeq	r6, r0, fp, lsl #4
    4484:	0006a400 	andeq	sl, r6, r0, lsl #8
    4488:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    448c:	00020000 	andeq	r0, r2, r0
    4490:	5905d01b 	stmdbpl	r5, {r0, r1, r3, r4, ip, lr, pc}
    4494:	0007a502 	andeq	sl, r7, r2, lsl #10
    4498:	0a5a1800 	beq	168a4a0 <__bss_end+0x1674950>
    449c:	5b050000 	blpl	1444a4 <__bss_end+0x12e954>
    44a0:	00003102 	andeq	r3, r0, r2, lsl #2
    44a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    44a8:	0500000a 	streq	r0, [r0, #-10]
    44ac:	012a025c 			; <UNDEFINED> instruction: 0x012a025c
    44b0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    44b4:	00000859 	andeq	r0, r0, r9, asr r8
    44b8:	a5025d05 	strge	r5, [r2, #-3333]	; 0xfffff2fb
    44bc:	08000007 	stmdaeq	r0, {r0, r1, r2}
    44c0:	000ad418 	andeq	sp, sl, r8, lsl r4
    44c4:	025e0500 	subseq	r0, lr, #0, 10
    44c8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    44cc:	07fc1824 	ldrbeq	r1, [ip, r4, lsr #16]!
    44d0:	5f050000 	svcpl	0x00050000
    44d4:	00003802 	andeq	r3, r0, r2, lsl #16
    44d8:	63184800 	tstvs	r8, #0, 16
    44dc:	05000009 	streq	r0, [r0, #-9]
    44e0:	007c0260 	rsbseq	r0, ip, r0, ror #4
    44e4:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    44e8:	00000aea 	andeq	r0, r0, sl, ror #21
    44ec:	5f026105 	svcpl	0x00026105
    44f0:	58000006 	stmdapl	r0, {r1, r2}
    44f4:	00096e18 	andeq	r6, r9, r8, lsl lr
    44f8:	02620500 	rsbeq	r0, r2, #0, 10
    44fc:	00000112 	andeq	r0, r0, r2, lsl r1
    4500:	0aef1868 	beq	ffbca6a8 <_estack+0xf7bba6a8>
    4504:	63050000 	movwvs	r0, #20480	; 0x5000
    4508:	00011202 	andeq	r1, r1, r2, lsl #4
    450c:	f5187000 			; <UNDEFINED> instruction: 0xf5187000
    4510:	05000008 	streq	r0, [r0, #-8]
    4514:	01120264 	tsteq	r2, r4, ror #4
    4518:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    451c:	00000a95 	muleq	r0, r5, sl
    4520:	b5026505 	strlt	r6, [r2, #-1285]	; 0xfffffafb
    4524:	80000007 	andhi	r0, r0, r7
    4528:	00084d18 	andeq	r4, r8, r8, lsl sp
    452c:	02660500 	rsbeq	r0, r6, #0, 10
    4530:	000007c5 	andeq	r0, r0, r5, asr #15
    4534:	0a3a1888 	beq	e8a75c <__bss_end+0xe74c0c>
    4538:	67050000 	strvs	r0, [r5, -r0]
    453c:	00003802 	andeq	r3, r0, r2, lsl #16
    4540:	ae18a000 	cdpge	0, 1, cr10, cr8, cr0, {0}
    4544:	05000007 	streq	r0, [r0, #-7]
    4548:	01120268 	tsteq	r2, r8, ror #4
    454c:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    4550:	00000707 	andeq	r0, r0, r7, lsl #14
    4554:	12026905 	andne	r6, r2, #81920	; 0x14000
    4558:	ac000001 	stcge	0, cr0, [r0], {1}
    455c:	00079d18 	andeq	r9, r7, r8, lsl sp
    4560:	026a0500 	rsbeq	r0, sl, #0, 10
    4564:	00000112 	andeq	r0, r0, r2, lsl r1
    4568:	066918b4 			; <UNDEFINED> instruction: 0x066918b4
    456c:	6b050000 	blvs	144574 <__bss_end+0x12ea24>
    4570:	00011202 	andeq	r1, r1, r2, lsl #4
    4574:	7818bc00 	ldmdavc	r8, {sl, fp, ip, sp, pc}
    4578:	05000006 	streq	r0, [r0, #-6]
    457c:	0112026c 	tsteq	r2, ip, ror #4
    4580:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    4584:	00000916 	andeq	r0, r0, r6, lsl r9
    4588:	38026d05 	stmdacc	r2, {r0, r2, r8, sl, fp, sp, lr}
    458c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4590:	01300b00 	teqeq	r0, r0, lsl #22
    4594:	07b50000 	ldreq	r0, [r5, r0]!
    4598:	ea0c0000 	b	3045a0 <__bss_end+0x2eea50>
    459c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    45a0:	01300b00 	teqeq	r0, r0, lsl #22
    45a4:	07c50000 	strbeq	r0, [r5, r0]
    45a8:	ea0c0000 	b	3045b0 <__bss_end+0x2eea60>
    45ac:	07000000 	streq	r0, [r0, -r0]
    45b0:	01300b00 	teqeq	r0, r0, lsl #22
    45b4:	07d50000 	ldrbeq	r0, [r5, r0]
    45b8:	ea0c0000 	b	3045c0 <__bss_end+0x2eea70>
    45bc:	17000000 	strne	r0, [r0, -r0]
    45c0:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    45c4:	07f90272 			; <UNDEFINED> instruction: 0x07f90272
    45c8:	b7180000 	ldrlt	r0, [r8, -r0]
    45cc:	05000008 	streq	r0, [r0, #-8]
    45d0:	07f90275 			; <UNDEFINED> instruction: 0x07f90275
    45d4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    45d8:	00000a8c 	andeq	r0, r0, ip, lsl #21
    45dc:	09027605 	stmdbeq	r2, {r0, r2, r9, sl, ip, sp, lr}
    45e0:	78000008 	stmdavc	r0, {r3}
    45e4:	02f90b00 	rscseq	r0, r9, #0, 22
    45e8:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    45ec:	ea0c0000 	b	3045f4 <__bss_end+0x2eeaa4>
    45f0:	1d000000 	stcne	0, cr0, [r0, #-0]
    45f4:	00310b00 	eorseq	r0, r1, r0, lsl #22
    45f8:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    45fc:	ea0c0000 	b	304604 <__bss_end+0x2eeab4>
    4600:	1d000000 	stcne	0, cr0, [r0, #-0]
    4604:	05f01c00 	ldrbeq	r1, [r0, #3072]!	; 0xc00
    4608:	083b0257 	ldmdaeq	fp!, {r0, r1, r2, r4, r6, r9}
    460c:	b81d0000 	ldmdalt	sp, {}	; <UNPREDICTABLE>
    4610:	05000009 	streq	r0, [r0, #-9]
    4614:	06a4026e 	strteq	r0, [r4], lr, ror #4
    4618:	c11d0000 	tstgt	sp, r0
    461c:	0500000a 	streq	r0, [r0, #-10]
    4620:	07d50277 			; <UNDEFINED> instruction: 0x07d50277
    4624:	0b000000 	bleq	462c <_start-0x39d4>
    4628:	00000130 	andeq	r0, r0, r0, lsr r1
    462c:	0000084b 	andeq	r0, r0, fp, asr #16
    4630:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    4634:	07001800 	streq	r1, [r0, -r0, lsl #16]
    4638:	000006ee 	andeq	r0, r0, lr, ror #13
    463c:	084b0406 	stmdaeq	fp, {r1, r2, sl}^
    4640:	611e0000 	tstvs	lr, r0
    4644:	16000008 	strne	r0, [r0], -r8
    4648:	00000447 	andeq	r0, r0, r7, asr #8
    464c:	56040600 	strpl	r0, [r4], -r0, lsl #12
    4650:	06000008 	streq	r0, [r0], -r8
    4654:	00019a04 	andeq	r9, r1, r4, lsl #20
    4658:	08781e00 	ldmdaeq	r8!, {r9, sl, fp, ip}^
    465c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    4660:	00000000 	andeq	r0, r0, r0
    4664:	087e0406 	ldmdaeq	lr!, {r1, r2, sl}^
    4668:	04060000 	streq	r0, [r6], #-0
    466c:	0000086d 	andeq	r0, r0, sp, ror #16
    4670:	0006120b 	andeq	r1, r6, fp, lsl #4
    4674:	00089400 	andeq	r9, r8, r0, lsl #8
    4678:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    467c:	00020000 	andeq	r0, r2, r0
    4680:	000a4e1f 	andeq	r4, sl, pc, lsl lr
    4684:	02fe0500 	rscseq	r0, lr, #0, 10
    4688:	00000447 	andeq	r0, r0, r7, asr #8
    468c:	000a471f 	andeq	r4, sl, pc, lsl r7
    4690:	02ff0500 	rscseq	r0, pc, #0, 10
    4694:	0000044d 	andeq	r0, r0, sp, asr #8
    4698:	0008cf20 	andeq	ip, r8, r0, lsr #30
    469c:	2a630600 	bcs	18c5ea4 <__bss_end+0x18b0354>
    46a0:	21000001 	tstcs	r0, r1
    46a4:	000018a4 	andeq	r1, r0, r4, lsr #17
    46a8:	5c011000 	stcpl	0, cr1, [r1], {-0}
    46ac:	000008db 	ldrdeq	r0, [r0], -fp
    46b0:	0018db0a 	andseq	sp, r8, sl, lsl #22
    46b4:	e25f0100 	subs	r0, pc, #0, 2
    46b8:	0a000008 	beq	46e0 <_start-0x3920>
    46bc:	00001901 	andeq	r1, r0, r1, lsl #18
    46c0:	08e76301 	stmiaeq	r7!, {r0, r8, r9, sp, lr}^
    46c4:	04000000 	streq	r0, [r0], #-0
    46c8:	01a90408 			; <UNDEFINED> instruction: 0x01a90408
    46cc:	db220000 	blle	8846d4 <__bss_end+0x86eb84>
    46d0:	0b000008 	bleq	46f8 <_start-0x3908>
    46d4:	00000054 	andeq	r0, r0, r4, asr r0
    46d8:	000008f8 	strdeq	r0, [r0], -r8
    46dc:	0000ea23 	andeq	lr, r0, r3, lsr #20
    46e0:	000fff00 	andeq	pc, pc, r0, lsl #30
    46e4:	001a2224 	andseq	r2, sl, r4, lsr #4
    46e8:	b7640100 	strblt	r0, [r4, -r0, lsl #2]!
    46ec:	05000008 	streq	r0, [r0, #-8]
    46f0:	014b4003 	cmpeq	fp, r3
    46f4:	198a1000 	stmibne	sl, {ip}
    46f8:	01080000 	mrseq	r0, (UNDEF: 8)
    46fc:	00092e68 	andeq	r2, r9, r8, ror #28
    4700:	188c0e00 	stmne	ip, {r9, sl, fp}
    4704:	6a010000 	bvs	4470c <__bss_end+0x2ebbc>
    4708:	0000092e 	andeq	r0, r0, lr, lsr #18
    470c:	18810e00 	stmne	r1, {r9, sl, fp}
    4710:	6b010000 	blvs	44718 <__bss_end+0x2ebc8>
    4714:	00000021 	andeq	r0, r0, r1, lsr #32
    4718:	04060004 	streq	r0, [r6], #-4
    471c:	00000909 	andeq	r0, r0, r9, lsl #18
    4720:	001a0102 	andseq	r0, sl, r2, lsl #2
    4724:	096c0100 	stmdbeq	ip!, {r8}^
    4728:	24000009 	strcs	r0, [r0], #-9
    472c:	000019dd 	ldrdeq	r1, [r0], -sp
    4730:	00698201 	rsbeq	r8, r9, r1, lsl #4
    4734:	03050000 	movweq	r0, #20480	; 0x5000
    4738:	00014430 	andeq	r4, r1, r0, lsr r4
    473c:	00186b24 	andseq	r6, r8, r4, lsr #22
    4740:	2c850100 	stfcss	f0, [r5], {0}
    4744:	05000000 	streq	r0, [r0, #-0]
    4748:	01443403 	cmpeq	r4, r3, lsl #8
    474c:	18af2400 	stmiane	pc!, {sl, sp}	; <UNPREDICTABLE>
    4750:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    4754:	00000934 	andeq	r0, r0, r4, lsr r9
    4758:	5b400305 	blpl	1005374 <__bss_end+0xfef824>
    475c:	0c240001 	stceq	0, cr0, [r4], #-4
    4760:	0100001a 	tsteq	r0, sl, lsl r0
    4764:	00098388 	andeq	r8, r9, r8, lsl #7
    4768:	48030500 	stmdami	r3, {r8, sl}
    476c:	0600015b 			; <UNDEFINED> instruction: 0x0600015b
    4770:	00093404 	andeq	r3, r9, r4, lsl #8
    4774:	18ed2400 	stmiane	sp!, {sl, sp}^
    4778:	8c010000 	stchi	0, cr0, [r1], {-0}
    477c:	00000021 	andeq	r0, r0, r1, lsr #32
    4780:	47640305 	strbmi	r0, [r4, -r5, lsl #6]!
    4784:	f7250001 			; <UNDEFINED> instruction: 0xf7250001
    4788:	01000019 	tsteq	r0, r9, lsl r0
    478c:	00002191 	muleq	r0, r1, r1
    4790:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    4794:	2600015b 			; <UNDEFINED> instruction: 0x2600015b
    4798:	000019ac 	andeq	r1, r0, ip, lsr #19
    479c:	90013401 	andls	r3, r1, r1, lsl #8
    47a0:	54000141 	strpl	r0, [r0], #-321	; 0xfffffebf
    47a4:	01000001 	tsteq	r0, r1
    47a8:	0009ef9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    47ac:	1a122700 	bne	48e3b4 <__bss_end+0x478864>
    47b0:	34010000 	strcc	r0, [r1], #-0
    47b4:	00098301 	andeq	r8, r9, r1, lsl #6
    47b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    47bc:	000a2728 	andeq	r2, sl, r8, lsr #14
    47c0:	01360100 	teqeq	r6, r0, lsl #2
    47c4:	00000983 	andeq	r0, r0, r3, lsl #19
    47c8:	29749102 	ldmdbcs	r4!, {r1, r8, ip, pc}^
    47cc:	00637570 	rsbeq	r7, r3, r0, ror r5
    47d0:	f9013701 			; <UNDEFINED> instruction: 0xf9013701
    47d4:	02000002 	andeq	r0, r0, #2
    47d8:	26007091 			; <UNDEFINED> instruction: 0x26007091
    47dc:	000018c3 	andeq	r1, r0, r3, asr #17
    47e0:	b8011301 	stmdalt	r1, {r0, r8, r9, ip}
    47e4:	d8000140 	stmdale	r0, {r6, r8}
    47e8:	01000000 	mrseq	r0, (UNDEF: 0)
    47ec:	000a249c 	muleq	sl, ip, r4
    47f0:	19082800 	stmdbne	r8, {fp, sp}
    47f4:	15010000 	strne	r0, [r1, #-0]
    47f8:	00098301 	andeq	r8, r9, r1, lsl #6
    47fc:	70910200 	addsvc	r0, r1, r0, lsl #4
    4800:	0018e228 	andseq	lr, r8, r8, lsr #4
    4804:	01160100 	tsteq	r6, r0, lsl #2
    4808:	000002f9 	strdeq	r0, [r0], -r9
    480c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4810:	0019c72a 	andseq	ip, r9, sl, lsr #14
    4814:	010d0100 	mrseq	r0, (UNDEF: 29)
    4818:	000140a0 	andeq	r4, r1, r0, lsr #1
    481c:	00000018 	andeq	r0, r0, r8, lsl r0
    4820:	972b9c01 	strls	r9, [fp, -r1, lsl #24]!
    4824:	01000019 	tsteq	r0, r9, lsl r0
    4828:	00210107 	eoreq	r0, r1, r7, lsl #2
    482c:	407c0000 	rsbsmi	r0, ip, r0
    4830:	00240001 	eoreq	r0, r4, r1
    4834:	9c010000 	stcls	0, cr0, [r1], {-0}
    4838:	0019ed2c 	andseq	lr, r9, ip, lsr #26
    483c:	00ee0100 	rsceq	r0, lr, r0, lsl #2
    4840:	7c000140 	stfvcs	f0, [r0], {64}	; 0x40
    4844:	01000000 	mrseq	r0, (UNDEF: 0)
    4848:	000a8b9c 	muleq	sl, ip, fp
    484c:	76702d00 	ldrbtvc	r2, [r0], -r0, lsl #26
    4850:	28ee0100 	stmiacs	lr!, {r8}^
    4854:	02000001 	andeq	r0, r0, #1
    4858:	702e6c91 	mlavc	lr, r1, ip, r6
    485c:	01006375 	tsteq	r0, r5, ror r3
    4860:	0002f9f0 	strdeq	pc, [r2], -r0
    4864:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4868:	00187a24 	andseq	r7, r8, r4, lsr #20
    486c:	83f10100 	mvnshi	r0, #0, 2
    4870:	02000009 	andeq	r0, r0, #9
    4874:	2f007091 	svccs	0x00007091
    4878:	000018b6 			; <UNDEFINED> instruction: 0x000018b6
    487c:	01289201 			; <UNDEFINED> instruction: 0x01289201
    4880:	3e380000 	cdpcc	0, 3, cr0, cr8, cr0, {0}
    4884:	01c80001 	biceq	r0, r8, r1
    4888:	9c010000 	stcls	0, cr0, [r1], {-0}
    488c:	0018cf30 	andseq	ip, r8, r0, lsr pc
    4890:	21920100 	orrscs	r0, r2, r0, lsl #2
    4894:	02000000 	andeq	r0, r0, #0
    4898:	9c246491 	cfstrsls	mvf6, [r4], #-580	; 0xfffffdbc
    489c:	01000018 	tsteq	r0, r8, lsl r0
    48a0:	00098394 	muleq	r9, r4, r3
    48a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    48a8:	00185b24 	andseq	r5, r8, r4, lsr #22
    48ac:	83940100 	orrshi	r0, r4, #0, 2
    48b0:	02000009 	andeq	r0, r0, #9
    48b4:	72247091 	eorvc	r7, r4, #145	; 0x91
    48b8:	01000019 	tsteq	r0, r9, lsl r0
    48bc:	00098394 	muleq	r9, r4, r3
    48c0:	68910200 	ldmvs	r1, {r9}
    48c4:	00198124 	andseq	r8, r9, r4, lsr #2
    48c8:	28950100 	ldmcs	r5, {r8}
    48cc:	02000001 	andeq	r0, r0, #1
    48d0:	00006c91 	muleq	r0, r1, ip
    48d4:	00000176 	andeq	r0, r0, r6, ror r1
    48d8:	0f9a0004 	svceq	0x009a0004
    48dc:	01040000 	mrseq	r0, (UNDEF: 4)
    48e0:	000000d6 	ldrdeq	r0, [r0], -r6
    48e4:	001a3f0c 	andseq	r3, sl, ip, lsl #30
    48e8:	0142fc00 	cmpeq	r2, r0, lsl #24	; <UNPREDICTABLE>
    48ec:	00012000 	andeq	r2, r1, r0
    48f0:	00137a00 	andseq	r7, r3, r0, lsl #20
    48f4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    48f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    48fc:	d8070403 	stmdale	r7, {r0, r1, sl}
    4900:	03000006 	movweq	r0, #6
    4904:	01760508 	cmneq	r6, r8, lsl #10
    4908:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    490c:	0001a404 	andeq	sl, r1, r4, lsl #8
    4910:	03040400 	movweq	r0, #17408	; 0x4400
    4914:	06d30704 	ldrbeq	r0, [r3], r4, lsl #14
    4918:	04030000 	streq	r0, [r3], #-0
    491c:	00017b05 	andeq	r7, r1, r5, lsl #22
    4920:	06010300 	streq	r0, [r1], -r0, lsl #6
    4924:	00000905 	andeq	r0, r0, r5, lsl #18
    4928:	b7070203 	strlt	r0, [r7, -r3, lsl #4]
    492c:	03000000 	movweq	r0, #0
    4930:	016d0704 	cmneq	sp, r4, lsl #14
    4934:	85050000 	strhi	r0, [r5, #-0]
    4938:	0200001a 	andeq	r0, r0, #26
    493c:	00006d2b 	andeq	r6, r0, fp, lsr #26
    4940:	08010300 	stmdaeq	r1, {r8, r9}
    4944:	00000903 	andeq	r0, r0, r3, lsl #18
    4948:	1f050203 	svcne	0x00050203
    494c:	03000009 	movweq	r0, #9
    4950:	06ce0708 	strbeq	r0, [lr], r8, lsl #14
    4954:	87050000 	strhi	r0, [r5, -r0]
    4958:	0300001a 	movweq	r0, #26
    495c:	00006218 	andeq	r6, r0, r8, lsl r2
    4960:	00820600 	addeq	r0, r2, r0, lsl #12
    4964:	82070000 	andhi	r0, r7, #0
    4968:	a2000000 	andge	r0, r0, #0
    496c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4970:	0000005b 	andeq	r0, r0, fp, asr r0
    4974:	28090005 	stmdacs	r9, {r0, r2}
    4978:	0100001a 	tsteq	r0, sl, lsl r0
    497c:	00009209 	andeq	r9, r0, r9, lsl #4
    4980:	68030500 	stmdavs	r3, {r8, sl}
    4984:	07000147 	streq	r0, [r0, -r7, asr #2]
    4988:	0000008d 	andeq	r0, r0, sp, lsl #1
    498c:	000000c3 	andeq	r0, r0, r3, asr #1
    4990:	00005b08 	andeq	r5, r0, r8, lsl #22
    4994:	06000300 	streq	r0, [r0], -r0, lsl #6
    4998:	000000b3 	strheq	r0, [r0], -r3
    499c:	001a7909 	andseq	r7, sl, r9, lsl #18
    49a0:	c30e0100 	movwgt	r0, #57600	; 0xe100
    49a4:	05000000 	streq	r0, [r0, #-0]
    49a8:	01443803 	cmpeq	r4, r3, lsl #16
    49ac:	1a350900 	bne	d46db4 <__bss_end+0xd31264>
    49b0:	0f010000 	svceq	0x00010000
    49b4:	000000c3 	andeq	r0, r0, r3, asr #1
    49b8:	443c0305 	ldrtmi	r0, [ip], #-773	; 0xfffffcfb
    49bc:	b3090001 	movwlt	r0, #36865	; 0x9001
    49c0:	0100001a 	tsteq	r0, sl, lsl r0
    49c4:	0000c310 	andeq	ip, r0, r0, lsl r3
    49c8:	40030500 	andmi	r0, r3, r0, lsl #10
    49cc:	09000144 	stmdbeq	r0, {r2, r6, r8}
    49d0:	00001a8f 	andeq	r1, r0, pc, lsl #21
    49d4:	00c31301 	sbceq	r1, r3, r1, lsl #6
    49d8:	03050000 	movweq	r0, #20480	; 0x5000
    49dc:	00014444 	andeq	r4, r1, r4, asr #8
    49e0:	001aa20a 	andseq	sl, sl, sl, lsl #4
    49e4:	84350100 	ldrthi	r0, [r5], #-256	; 0xffffff00
    49e8:	98000143 	stmdals	r0, {r0, r1, r6, r8}
    49ec:	01000000 	mrseq	r0, (UNDEF: 0)
    49f0:	1aad0b9c 	bne	feb47868 <_estack+0xf6b37868>
    49f4:	20010000 	andcs	r0, r1, r0
    49f8:	00014340 	andeq	r4, r1, r0, asr #6
    49fc:	00000044 	andeq	r0, r0, r4, asr #32
    4a00:	014d9c01 	cmpeq	sp, r1, lsl #24
    4a04:	8e0c0000 	cdphi	0, 0, cr0, cr12, cr0, {0}
    4a08:	01000000 	mrseq	r0, (UNDEF: 0)
    4a0c:	00003d20 	andeq	r3, r0, r0, lsr #26
    4a10:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4a14:	0100690d 	tsteq	r0, sp, lsl #18
    4a18:	00002122 	andeq	r2, r0, r2, lsr #2
    4a1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a20:	1aa70e00 	bne	fe9c8228 <_estack+0xf69b8228>
    4a24:	15010000 	strne	r0, [r1, #-0]
    4a28:	000142fc 	strdeq	r4, [r1], -ip
    4a2c:	00000044 	andeq	r0, r0, r4, asr #32
    4a30:	8e0c9c01 	cdphi	12, 0, cr9, cr12, cr1, {0}
    4a34:	01000000 	mrseq	r0, (UNDEF: 0)
    4a38:	00003d15 	andeq	r3, r0, r5, lsl sp
    4a3c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4a40:	0100690d 	tsteq	r0, sp, lsl #18
    4a44:	00002116 	andeq	r2, r0, r6, lsl r1
    4a48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
       c:	00171006 	andseq	r1, r7, r6
      10:	00240200 	eoreq	r0, r4, r0, lsl #4
      14:	0b3e0b0b 	bleq	f82c48 <__bss_end+0xf6d0f8>
      18:	00000803 	andeq	r0, r0, r3, lsl #16
      1c:	0b002403 	bleq	9030 <__module_entries_end+0xf8c>
      20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      24:	0400000e 	streq	r0, [r0], #-14
      28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      2c:	0b3b0b3a 	bleq	ec2d1c <__bss_end+0xead1cc>
      30:	00001349 	andeq	r1, r0, r9, asr #6
      34:	0b000f05 	bleq	3c50 <_start-0x43b0>
      38:	0013490b 	andseq	r4, r3, fp, lsl #18
      3c:	01150600 	tsteq	r5, r0, lsl #12
      40:	13011927 	movwne	r1, #6439	; 0x1927
      44:	05070000 	streq	r0, [r7, #-0]
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	000f0800 	andeq	r0, pc, r0, lsl #16
      50:	00000b0b 	andeq	r0, r0, fp, lsl #22
      54:	03011309 	movweq	r1, #4873	; 0x1309
      58:	3a0b0b0e 	bcc	2c2c98 <__bss_end+0x2ad148>
      5c:	010b3b0b 	tsteq	fp, fp, lsl #22
      60:	0a000013 	beq	b4 <_start-0x7f4c>
      64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      68:	0b3b0b3a 	bleq	ec2d58 <__bss_end+0xead208>
      6c:	0b381349 	bleq	e04d98 <__bss_end+0xdef248>
      70:	350b0000 	strcc	r0, [fp, #-0]
      74:	00134900 	andseq	r4, r3, r0, lsl #18
      78:	00340c00 	eorseq	r0, r4, r0, lsl #24
      7c:	0b3a0e03 	bleq	e83890 <__bss_end+0xe6dd40>
      80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      84:	00001802 	andeq	r1, r0, r2, lsl #16
      88:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
      8c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      90:	0e03012e 	adfeqsp	f0, f3, #0.5
      94:	0b3b0b3a 	bleq	ec2d84 <__bss_end+0xead234>
      98:	01111927 	tsteq	r1, r7, lsr #18
      9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
      a4:	0f000013 	svceq	0x00000013
      a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
      ac:	0b3a0e03 	bleq	e838c0 <__bss_end+0xe6dd70>
      b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
      b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
      bc:	00130119 	andseq	r0, r3, r9, lsl r1
      c0:	00051000 	andeq	r1, r5, r0
      c4:	0b3a0e03 	bleq	e838d8 <__bss_end+0xe6dd88>
      c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      cc:	00001802 	andeq	r1, r0, r2, lsl #16
      d0:	3f002e11 	svccc	0x00002e11
      d4:	3a0e0319 	bcc	380d40 <__bss_end+0x36b1f0>
      d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
      e0:	97184006 	ldrls	r4, [r8, -r6]
      e4:	00001942 	andeq	r1, r0, r2, asr #18
      e8:	3f002e12 	svccc	0x00002e12
      ec:	3a0e0319 	bcc	380d58 <__bss_end+0x36b208>
      f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      f4:	11134919 	tstne	r3, r9, lsl r9
      f8:	40061201 	andmi	r1, r6, r1, lsl #4
      fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     100:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     104:	03193f01 	tsteq	r9, #1, 30
     108:	3b0b3a0e 	blcc	2ce948 <__bss_end+0x2b8df8>
     10c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     110:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     114:	97184006 	ldrls	r4, [r8, -r6]
     118:	00001942 	andeq	r1, r0, r2, asr #18
     11c:	01110100 	tsteq	r1, r0, lsl #2
     120:	0b130e25 	bleq	4c39bc <__bss_end+0x4ade6c>
     124:	01110e03 	tsteq	r1, r3, lsl #28
     128:	17100612 			; <UNDEFINED> instruction: 0x17100612
     12c:	24020000 	strcs	r0, [r2], #-0
     130:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     134:	0008030b 	andeq	r0, r8, fp, lsl #6
     138:	00240300 	eoreq	r0, r4, r0, lsl #6
     13c:	0b3e0b0b 	bleq	f82d70 <__bss_end+0xf6d220>
     140:	00000e03 	andeq	r0, r0, r3, lsl #28
     144:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     148:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     150:	0b3b0b3a 	bleq	ec2e40 <__bss_end+0xead2f0>
     154:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     158:	00001802 	andeq	r1, r0, r2, lsl #16
     15c:	3f002e06 	svccc	0x00002e06
     160:	3a0e0319 	bcc	380dcc <__bss_end+0x36b27c>
     164:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     168:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     16c:	97184006 	ldrls	r4, [r8, -r6]
     170:	00001942 	andeq	r1, r0, r2, asr #18
     174:	3f012e07 	svccc	0x00012e07
     178:	3a0e0319 	bcc	380de4 <__bss_end+0x36b294>
     17c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     180:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     184:	96184006 	ldrls	r4, [r8], -r6
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	0b080000 	bleq	200194 <__bss_end+0x1ea644>
     190:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     194:	00130106 	andseq	r0, r3, r6, lsl #2
     198:	00340900 	eorseq	r0, r4, r0, lsl #18
     19c:	0b3a0e03 	bleq	e839b0 <__bss_end+0xe6de60>
     1a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1a8:	0b0a0000 	bleq	2801b0 <__bss_end+0x26a660>
     1ac:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1b0:	0b000006 	bleq	1d0 <_start-0x7e30>
     1b4:	0b0b000f 	bleq	2c01f8 <__bss_end+0x2aa6a8>
     1b8:	00001349 	andeq	r1, r0, r9, asr #6
     1bc:	0000350c 	andeq	r3, r0, ip, lsl #10
     1c0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     1c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1c8:	0b3b0b3a 	bleq	ec2eb8 <__bss_end+0xead368>
     1cc:	01111927 	tsteq	r1, r7, lsr #18
     1d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     1d8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     1dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1e0:	0b3a0e03 	bleq	e839f4 <__bss_end+0xe6dea4>
     1e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1f0:	00000019 	andeq	r0, r0, r9, lsl r0
     1f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     1f8:	030b130e 	movweq	r1, #45838	; 0xb30e
     1fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     200:	00171006 	andseq	r1, r7, r6
     204:	00240200 	eoreq	r0, r4, r0, lsl #4
     208:	0b3e0b0b 	bleq	f82e3c <__bss_end+0xf6d2ec>
     20c:	00000803 	andeq	r0, r0, r3, lsl #16
     210:	0b002403 	bleq	9224 <__module_entries_end+0x1180>
     214:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     218:	0400000e 	streq	r0, [r0], #-14
     21c:	0b0b000f 	bleq	2c0260 <__bss_end+0x2aa710>
     220:	16050000 	strne	r0, [r5], -r0
     224:	3a0e0300 	bcc	380e2c <__bss_end+0x36b2dc>
     228:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     230:	13490035 	movtne	r0, #36917	; 0x9035
     234:	13070000 	movwne	r0, #28672	; 0x7000
     238:	0b0e0301 	bleq	380e44 <__bss_end+0x36b2f4>
     23c:	3b0b3a0b 	blcc	2cea70 <__bss_end+0x2b8f20>
     240:	0013010b 	andseq	r0, r3, fp, lsl #2
     244:	000d0800 	andeq	r0, sp, r0, lsl #16
     248:	0b3a0e03 	bleq	e83a5c <__bss_end+0xe6df0c>
     24c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     250:	00000b38 	andeq	r0, r0, r8, lsr fp
     254:	0b000f09 	bleq	3e80 <_start-0x4180>
     258:	0013490b 	andseq	r4, r3, fp, lsl #18
     25c:	00260a00 	eoreq	r0, r6, r0, lsl #20
     260:	00001349 	andeq	r1, r0, r9, asr #6
     264:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     268:	00130119 	andseq	r0, r3, r9, lsl r1
     26c:	00050c00 	andeq	r0, r5, r0, lsl #24
     270:	00001349 	andeq	r1, r0, r9, asr #6
     274:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     278:	00130113 	andseq	r0, r3, r3, lsl r1
     27c:	00210e00 	eoreq	r0, r1, r0, lsl #28
     280:	0b2f1349 	bleq	bc4fac <__bss_end+0xbaf45c>
     284:	340f0000 	strcc	r0, [pc], #-0	; 28c <_start-0x7d74>
     288:	3a0e0300 	bcc	380e90 <__bss_end+0x36b340>
     28c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     290:	00180213 	andseq	r0, r8, r3, lsl r2
     294:	00341000 	eorseq	r1, r4, r0
     298:	0b3a0e03 	bleq	e83aac <__bss_end+0xe6df5c>
     29c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2a0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     2a4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     2a8:	03193f01 	tsteq	r9, #1, 30
     2ac:	3b0b3a0e 	blcc	2ceaec <__bss_end+0x2b8f9c>
     2b0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     2b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2b8:	96184006 	ldrls	r4, [r8], -r6
     2bc:	13011942 	movwne	r1, #6466	; 0x1942
     2c0:	05120000 	ldreq	r0, [r2, #-0]
     2c4:	3a0e0300 	bcc	380ecc <__bss_end+0x36b37c>
     2c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     2cc:	00180213 	andseq	r0, r8, r3, lsl r2
     2d0:	00341300 	eorseq	r1, r4, r0, lsl #6
     2d4:	0b3a0e03 	bleq	e83ae8 <__bss_end+0xe6df98>
     2d8:	1349053b 	movtne	r0, #38203	; 0x953b
     2dc:	00001802 	andeq	r1, r0, r2, lsl #16
     2e0:	03012e14 	movweq	r2, #7700	; 0x1e14
     2e4:	3b0b3a0e 	blcc	2ceb24 <__bss_end+0x2b8fd4>
     2e8:	11192705 	tstne	r9, r5, lsl #14
     2ec:	40061201 	andmi	r1, r6, r1, lsl #4
     2f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2f4:	00001301 	andeq	r1, r0, r1, lsl #6
     2f8:	3f012e15 	svccc	0x00012e15
     2fc:	3a0e0319 	bcc	380f68 <__bss_end+0x36b418>
     300:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     304:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     308:	96184006 	ldrls	r4, [r8], -r6
     30c:	13011942 	movwne	r1, #6466	; 0x1942
     310:	0b160000 	bleq	580318 <__bss_end+0x56a7c8>
     314:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     318:	17000006 	strne	r0, [r0, -r6]
     31c:	0e03012e 	adfeqsp	f0, f3, #0.5
     320:	0b3b0b3a 	bleq	ec3010 <__bss_end+0xead4c0>
     324:	01111927 	tsteq	r1, r7, lsr #18
     328:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     32c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     330:	18000013 	stmdane	r0, {r0, r1, r4}
     334:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     338:	0b3a0e03 	bleq	e83b4c <__bss_end+0xe6dffc>
     33c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     340:	06120111 			; <UNDEFINED> instruction: 0x06120111
     344:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     348:	00130119 	andseq	r0, r3, r9, lsl r1
     34c:	00051900 	andeq	r1, r5, r0, lsl #18
     350:	0b3a0e03 	bleq	e83b64 <__bss_end+0xe6e014>
     354:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     358:	00001802 	andeq	r1, r0, r2, lsl #16
     35c:	3f012e1a 	svccc	0x00012e1a
     360:	3a0e0319 	bcc	380fcc <__bss_end+0x36b47c>
     364:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     368:	11134919 	tstne	r3, r9, lsl r9
     36c:	40061201 	andmi	r1, r6, r1, lsl #4
     370:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     374:	01000000 	mrseq	r0, (UNDEF: 0)
     378:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     37c:	0e030b13 	vmoveq.32	d3[0], r0
     380:	06120111 			; <UNDEFINED> instruction: 0x06120111
     384:	00001710 	andeq	r1, r0, r0, lsl r7
     388:	0b002402 	bleq	9398 <__module_entries_end+0x12f4>
     38c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     390:	0300000e 	movweq	r0, #14
     394:	0b0b0024 	bleq	2c042c <__bss_end+0x2aa8dc>
     398:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     39c:	35040000 	strcc	r0, [r4, #-0]
     3a0:	00134900 	andseq	r4, r3, r0, lsl #18
     3a4:	00160500 	andseq	r0, r6, r0, lsl #10
     3a8:	0b3a0e03 	bleq	e83bbc <__bss_end+0xe6e06c>
     3ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b0:	0f060000 	svceq	0x00060000
     3b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     3b8:	07000013 	smladeq	r0, r3, r0, r0
     3bc:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
     3c0:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c4:	03001608 	movweq	r1, #1544	; 0x608
     3c8:	3b0b3a0e 	blcc	2cec08 <__bss_end+0x2b90b8>
     3cc:	00134905 	andseq	r4, r3, r5, lsl #18
     3d0:	01170900 	tsteq	r7, r0, lsl #18
     3d4:	0b3a0b0b 	bleq	e83008 <__bss_end+0xe6d4b8>
     3d8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     3dc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     3e0:	3a0e0300 	bcc	380fe8 <__bss_end+0x36b498>
     3e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3e8:	0b000013 	bleq	43c <_start-0x7bc4>
     3ec:	13490101 	movtne	r0, #37121	; 0x9101
     3f0:	00001301 	andeq	r1, r0, r1, lsl #6
     3f4:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
     3f8:	000b2f13 	andeq	r2, fp, r3, lsl pc
     3fc:	01130d00 	tsteq	r3, r0, lsl #26
     400:	0b3a0b0b 	bleq	e83034 <__bss_end+0xe6d4e4>
     404:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     408:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     40c:	3a0e0300 	bcc	381014 <__bss_end+0x36b4c4>
     410:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     414:	000b3813 	andeq	r3, fp, r3, lsl r8
     418:	000f0f00 	andeq	r0, pc, r0, lsl #30
     41c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     420:	49002610 	stmdbmi	r0, {r4, r9, sl, sp}
     424:	11000013 	tstne	r0, r3, lsl r0
     428:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     42c:	0b3a0b0b 	bleq	e83060 <__bss_end+0xe6d510>
     430:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     434:	0d120000 	ldceq	0, cr0, [r2, #-0]
     438:	3a080300 	bcc	201040 <__bss_end+0x1eb4f0>
     43c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     440:	000b3813 	andeq	r3, fp, r3, lsl r8
     444:	01131300 	tsteq	r3, r0, lsl #6
     448:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     44c:	0b3b0b3a 	bleq	ec313c <__bss_end+0xead5ec>
     450:	00001301 	andeq	r1, r0, r1, lsl #6
     454:	03000d14 	movweq	r0, #3348	; 0xd14
     458:	3b0b3a0e 	blcc	2cec98 <__bss_end+0x2b9148>
     45c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     460:	15000005 	strne	r0, [r0, #-5]
     464:	19270015 	stmdbne	r7!, {r0, r2, r4}
     468:	15160000 	ldrne	r0, [r6, #-0]
     46c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     470:	00130113 	andseq	r0, r3, r3, lsl r1
     474:	00051700 	andeq	r1, r5, r0, lsl #14
     478:	00001349 	andeq	r1, r0, r9, asr #6
     47c:	03011318 	movweq	r1, #4888	; 0x1318
     480:	3a050b0e 	bcc	1430c0 <__bss_end+0x12d570>
     484:	01053b0b 	tsteq	r5, fp, lsl #22
     488:	19000013 	stmdbne	r0, {r0, r1, r4}
     48c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     490:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     494:	0b381349 	bleq	e051c0 <__bss_end+0xdef670>
     498:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
     49c:	3a0e0300 	bcc	3810a4 <__bss_end+0x36b554>
     4a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a4:	00053813 	andeq	r3, r5, r3, lsl r8
     4a8:	01131b00 	tsteq	r3, r0, lsl #22
     4ac:	0b0b0e03 	bleq	2c3cc0 <__bss_end+0x2ae170>
     4b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4b4:	00001301 	andeq	r1, r0, r1, lsl #6
     4b8:	0b01131c 	bleq	45130 <__bss_end+0x2f5e0>
     4bc:	3b0b3a0b 	blcc	2cecf0 <__bss_end+0x2b91a0>
     4c0:	00130105 	andseq	r0, r3, r5, lsl #2
     4c4:	01171d00 	tsteq	r7, r0, lsl #26
     4c8:	0b3a0b0b 	bleq	e830fc <__bss_end+0xe6d5ac>
     4cc:	1301053b 	movwne	r0, #5435	; 0x153b
     4d0:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
     4d4:	3a0e0300 	bcc	3810dc <__bss_end+0x36b58c>
     4d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4dc:	1f000013 	svcne	0x00000013
     4e0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     4e4:	00001301 	andeq	r1, r0, r1, lsl #6
     4e8:	03003420 	movweq	r3, #1056	; 0x420
     4ec:	3b0b3a0e 	blcc	2ced2c <__bss_end+0x2b91dc>
     4f0:	3f134905 	svccc	0x00134905
     4f4:	00193c19 	andseq	r3, r9, r9, lsl ip
     4f8:	00342100 	eorseq	r2, r4, r0, lsl #2
     4fc:	0b3a0e03 	bleq	e83d10 <__bss_end+0xe6e1c0>
     500:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     504:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     508:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     50c:	03193f01 	tsteq	r9, #1, 30
     510:	3b0b3a0e 	blcc	2ced50 <__bss_end+0x2b9200>
     514:	1119270b 	tstne	r9, fp, lsl #14
     518:	40061201 	andmi	r1, r6, r1, lsl #4
     51c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     520:	00001301 	andeq	r1, r0, r1, lsl #6
     524:	03000523 	movweq	r0, #1315	; 0x523
     528:	3b0b3a0e 	blcc	2ced68 <__bss_end+0x2b9218>
     52c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     530:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
     534:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     538:	0b3b0b3a 	bleq	ec3228 <__bss_end+0xead6d8>
     53c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     540:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     544:	03193f01 	tsteq	r9, #1, 30
     548:	3b0b3a0e 	blcc	2ced88 <__bss_end+0x2b9238>
     54c:	1119270b 	tstne	r9, fp, lsl #14
     550:	40061201 	andmi	r1, r6, r1, lsl #4
     554:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     558:	01000000 	mrseq	r0, (UNDEF: 0)
     55c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     560:	0e030b13 	vmoveq.32	d3[0], r0
     564:	06120111 			; <UNDEFINED> instruction: 0x06120111
     568:	00001710 	andeq	r1, r0, r0, lsl r7
     56c:	03001602 	movweq	r1, #1538	; 0x602
     570:	3b0b3a0e 	blcc	2cedb0 <__bss_end+0x2b9260>
     574:	0013490b 	andseq	r4, r3, fp, lsl #18
     578:	00240300 	eoreq	r0, r4, r0, lsl #6
     57c:	0b3e0b0b 	bleq	f831b0 <__bss_end+0xf6d660>
     580:	00000e03 	andeq	r0, r0, r3, lsl #28
     584:	0b002404 	bleq	959c <__module_entries_end+0x14f8>
     588:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     58c:	05000008 	streq	r0, [r0, #-8]
     590:	13490035 	movtne	r0, #36917	; 0x9035
     594:	0f060000 	svceq	0x00060000
     598:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     59c:	07000013 	smladeq	r0, r3, r0, r0
     5a0:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
     5a4:	0000193c 	andeq	r1, r0, ip, lsr r9
     5a8:	03001608 	movweq	r1, #1544	; 0x608
     5ac:	3b0b3a0e 	blcc	2cedec <__bss_end+0x2b929c>
     5b0:	00134905 	andseq	r4, r3, r5, lsl #18
     5b4:	01170900 	tsteq	r7, r0, lsl #18
     5b8:	0b3a0b0b 	bleq	e831ec <__bss_end+0xe6d69c>
     5bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     5c0:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     5c4:	3a0e0300 	bcc	3811cc <__bss_end+0x36b67c>
     5c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5cc:	0b000013 	bleq	620 <_start-0x79e0>
     5d0:	13490101 	movtne	r0, #37121	; 0x9101
     5d4:	00001301 	andeq	r1, r0, r1, lsl #6
     5d8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
     5dc:	000b2f13 	andeq	r2, fp, r3, lsl pc
     5e0:	01130d00 	tsteq	r3, r0, lsl #26
     5e4:	0b3a0b0b 	bleq	e83218 <__bss_end+0xe6d6c8>
     5e8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     5ec:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     5f0:	3a0e0300 	bcc	3811f8 <__bss_end+0x36b6a8>
     5f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f8:	000b3813 	andeq	r3, fp, r3, lsl r8
     5fc:	000f0f00 	andeq	r0, pc, r0, lsl #30
     600:	00000b0b 	andeq	r0, r0, fp, lsl #22
     604:	49002610 	stmdbmi	r0, {r4, r9, sl, sp}
     608:	11000013 	tstne	r0, r3, lsl r0
     60c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     610:	0b3a0b0b 	bleq	e83244 <__bss_end+0xe6d6f4>
     614:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     618:	0d120000 	ldceq	0, cr0, [r2, #-0]
     61c:	3a080300 	bcc	201224 <__bss_end+0x1eb6d4>
     620:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     624:	000b3813 	andeq	r3, fp, r3, lsl r8
     628:	01131300 	tsteq	r3, r0, lsl #6
     62c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     630:	0b3b0b3a 	bleq	ec3320 <__bss_end+0xead7d0>
     634:	00001301 	andeq	r1, r0, r1, lsl #6
     638:	03000d14 	movweq	r0, #3348	; 0xd14
     63c:	3b0b3a0e 	blcc	2cee7c <__bss_end+0x2b932c>
     640:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     644:	15000005 	strne	r0, [r0, #-5]
     648:	19270015 	stmdbne	r7!, {r0, r2, r4}
     64c:	15160000 	ldrne	r0, [r6, #-0]
     650:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     654:	00130113 	andseq	r0, r3, r3, lsl r1
     658:	00051700 	andeq	r1, r5, r0, lsl #14
     65c:	00001349 	andeq	r1, r0, r9, asr #6
     660:	03011318 	movweq	r1, #4888	; 0x1318
     664:	3a050b0e 	bcc	1432a4 <__bss_end+0x12d754>
     668:	01053b0b 	tsteq	r5, fp, lsl #22
     66c:	19000013 	stmdbne	r0, {r0, r1, r4}
     670:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     674:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     678:	0b381349 	bleq	e053a4 <__bss_end+0xdef854>
     67c:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
     680:	3a0e0300 	bcc	381288 <__bss_end+0x36b738>
     684:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     688:	00053813 	andeq	r3, r5, r3, lsl r8
     68c:	01131b00 	tsteq	r3, r0, lsl #22
     690:	0b0b0e03 	bleq	2c3ea4 <__bss_end+0x2ae354>
     694:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     698:	00001301 	andeq	r1, r0, r1, lsl #6
     69c:	0b01131c 	bleq	45314 <__bss_end+0x2f7c4>
     6a0:	3b0b3a0b 	blcc	2ceed4 <__bss_end+0x2b9384>
     6a4:	00130105 	andseq	r0, r3, r5, lsl #2
     6a8:	01171d00 	tsteq	r7, r0, lsl #26
     6ac:	0b3a0b0b 	bleq	e832e0 <__bss_end+0xe6d790>
     6b0:	1301053b 	movwne	r0, #5435	; 0x153b
     6b4:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
     6b8:	3a0e0300 	bcc	3812c0 <__bss_end+0x36b770>
     6bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6c0:	1f000013 	svcne	0x00000013
     6c4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     6c8:	00001301 	andeq	r1, r0, r1, lsl #6
     6cc:	03003420 	movweq	r3, #1056	; 0x420
     6d0:	3b0b3a0e 	blcc	2cef10 <__bss_end+0x2b93c0>
     6d4:	3f134905 	svccc	0x00134905
     6d8:	00193c19 	andseq	r3, r9, r9, lsl ip
     6dc:	00262100 	eoreq	r2, r6, r0, lsl #2
     6e0:	34220000 	strtcc	r0, [r2], #-0
     6e4:	3a0e0300 	bcc	3812ec <__bss_end+0x36b79c>
     6e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6ec:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6f0:	23000019 	movwcs	r0, #25
     6f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6f8:	0b3a0e03 	bleq	e83f0c <__bss_end+0xe6e3bc>
     6fc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     700:	01111349 	tsteq	r1, r9, asr #6
     704:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     708:	01194297 			; <UNDEFINED> instruction: 0x01194297
     70c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
     710:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     714:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     718:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     71c:	34250000 	strtcc	r0, [r5], #-0
     720:	3a0e0300 	bcc	381328 <__bss_end+0x36b7d8>
     724:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     728:	00180213 	andseq	r0, r8, r3, lsl r2
     72c:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     730:	0b3a0e03 	bleq	e83f44 <__bss_end+0xe6e3f4>
     734:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     738:	01111349 	tsteq	r1, r9, asr #6
     73c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     740:	01194296 			; <UNDEFINED> instruction: 0x01194296
     744:	27000013 	smladcs	r0, r3, r0, r0
     748:	0e03012e 	adfeqsp	f0, f3, #0.5
     74c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     750:	01111927 	tsteq	r1, r7, lsr #18
     754:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     758:	01194296 			; <UNDEFINED> instruction: 0x01194296
     75c:	28000013 	stmdacs	r0, {r0, r1, r4}
     760:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     764:	0b3a0e03 	bleq	e83f78 <__bss_end+0xe6e428>
     768:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     76c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     770:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     774:	00130119 	andseq	r0, r3, r9, lsl r1
     778:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
     77c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     780:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     784:	13491927 	movtne	r1, #39207	; 0x9927
     788:	06120111 			; <UNDEFINED> instruction: 0x06120111
     78c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     790:	00130119 	andseq	r0, r3, r9, lsl r1
     794:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     798:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     79c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7a0:	13491927 	movtne	r1, #39207	; 0x9927
     7a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7ac:	00000019 	andeq	r0, r0, r9, lsl r0
     7b0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     7b4:	030b130e 	movweq	r1, #45838	; 0xb30e
     7b8:	110e1b0e 	tstne	lr, lr, lsl #22
     7bc:	10061201 	andne	r1, r6, r1, lsl #4
     7c0:	02000017 	andeq	r0, r0, #23
     7c4:	0b0b0024 	bleq	2c085c <__bss_end+0x2aad0c>
     7c8:	0e030b3e 	vmoveq.16	d3[0], r0
     7cc:	26030000 	strcs	r0, [r3], -r0
     7d0:	00134900 	andseq	r4, r3, r0, lsl #18
     7d4:	00350400 	eorseq	r0, r5, r0, lsl #8
     7d8:	00001349 	andeq	r1, r0, r9, asr #6
     7dc:	0b002405 	bleq	97f8 <__module_entries_end+0x1754>
     7e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7e4:	06000008 	streq	r0, [r0], -r8
     7e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     7ec:	0b3b0b3a 	bleq	ec34dc <__bss_end+0xead98c>
     7f0:	00001349 	andeq	r1, r0, r9, asr #6
     7f4:	0b000f07 	bleq	4418 <_start-0x3be8>
     7f8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     7fc:	0b0b000f 	bleq	2c0840 <__bss_end+0x2aacf0>
     800:	00001349 	andeq	r1, r0, r9, asr #6
     804:	03001309 	movweq	r1, #777	; 0x309
     808:	00193c0e 	andseq	r3, r9, lr, lsl #24
     80c:	00160a00 	andseq	r0, r6, r0, lsl #20
     810:	0b3a0e03 	bleq	e84024 <__bss_end+0xe6e4d4>
     814:	1349053b 	movtne	r0, #38203	; 0x953b
     818:	170b0000 	strne	r0, [fp, -r0]
     81c:	3a0b0b01 	bcc	2c3428 <__bss_end+0x2ad8d8>
     820:	010b3b0b 	tsteq	fp, fp, lsl #22
     824:	0c000013 	stceq	0, cr0, [r0], {19}
     828:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     82c:	0b3b0b3a 	bleq	ec351c <__bss_end+0xead9cc>
     830:	00001349 	andeq	r1, r0, r9, asr #6
     834:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     838:	00130113 	andseq	r0, r3, r3, lsl r1
     83c:	00210e00 	eoreq	r0, r1, r0, lsl #28
     840:	0b2f1349 	bleq	bc556c <__bss_end+0xbafa1c>
     844:	130f0000 	movwne	r0, #61440	; 0xf000
     848:	3a0b0b01 	bcc	2c3454 <__bss_end+0x2ad904>
     84c:	010b3b0b 	tsteq	fp, fp, lsl #22
     850:	10000013 	andne	r0, r0, r3, lsl r0
     854:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     858:	0b3b0b3a 	bleq	ec3548 <__bss_end+0xead9f8>
     85c:	0b381349 	bleq	e05588 <__bss_end+0xdefa38>
     860:	13110000 	tstne	r1, #0
     864:	0b0e0301 	bleq	381470 <__bss_end+0x36b920>
     868:	3b0b3a0b 	blcc	2cf09c <__bss_end+0x2b954c>
     86c:	0013010b 	andseq	r0, r3, fp, lsl #2
     870:	000d1200 	andeq	r1, sp, r0, lsl #4
     874:	0b3a0803 	bleq	e82888 <__bss_end+0xe6cd38>
     878:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     87c:	00000b38 	andeq	r0, r0, r8, lsr fp
     880:	03011313 	movweq	r1, #4883	; 0x1313
     884:	3a050b0e 	bcc	1434c4 <__bss_end+0x12d974>
     888:	010b3b0b 	tsteq	fp, fp, lsl #22
     88c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     890:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     894:	0b3b0b3a 	bleq	ec3584 <__bss_end+0xeada34>
     898:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     89c:	15150000 	ldrne	r0, [r5, #-0]
     8a0:	00192700 	andseq	r2, r9, r0, lsl #14
     8a4:	01151600 	tsteq	r5, r0, lsl #12
     8a8:	13491927 	movtne	r1, #39207	; 0x9927
     8ac:	00001301 	andeq	r1, r0, r1, lsl #6
     8b0:	49000517 	stmdbmi	r0, {r0, r1, r2, r4, r8, sl}
     8b4:	18000013 	stmdane	r0, {r0, r1, r4}
     8b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     8bc:	0b3a050b 	bleq	e81cf0 <__bss_end+0xe6c1a0>
     8c0:	1301053b 	movwne	r0, #5435	; 0x153b
     8c4:	0d190000 	ldceq	0, cr0, [r9, #-0]
     8c8:	3a0e0300 	bcc	3814d0 <__bss_end+0x36b980>
     8cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d0:	000b3813 	andeq	r3, fp, r3, lsl r8
     8d4:	000d1a00 	andeq	r1, sp, r0, lsl #20
     8d8:	0b3a0e03 	bleq	e840ec <__bss_end+0xe6e59c>
     8dc:	1349053b 	movtne	r0, #38203	; 0x953b
     8e0:	00000538 	andeq	r0, r0, r8, lsr r5
     8e4:	0301131b 	movweq	r1, #4891	; 0x131b
     8e8:	3a0b0b0e 	bcc	2c3528 <__bss_end+0x2ad9d8>
     8ec:	01053b0b 	tsteq	r5, fp, lsl #22
     8f0:	1c000013 	stcne	0, cr0, [r0], {19}
     8f4:	0b0b0113 	bleq	2c0d48 <__bss_end+0x2ab1f8>
     8f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8fc:	00001301 	andeq	r1, r0, r1, lsl #6
     900:	0b01171d 	bleq	4657c <__bss_end+0x30a2c>
     904:	3b0b3a0b 	blcc	2cf138 <__bss_end+0x2b95e8>
     908:	00130105 	andseq	r0, r3, r5, lsl #2
     90c:	000d1e00 	andeq	r1, sp, r0, lsl #28
     910:	0b3a0e03 	bleq	e84124 <__bss_end+0xe6e5d4>
     914:	1349053b 	movtne	r0, #38203	; 0x953b
     918:	151f0000 	ldrne	r0, [pc, #-0]	; 920 <_start-0x76e0>
     91c:	01192701 	tsteq	r9, r1, lsl #14
     920:	20000013 	andcs	r0, r0, r3, lsl r0
     924:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     928:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     92c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     930:	0000193c 	andeq	r1, r0, ip, lsr r9
     934:	03003421 	movweq	r3, #1057	; 0x421
     938:	3b0b3a0e 	blcc	2cf178 <__bss_end+0x2b9628>
     93c:	3f13490b 	svccc	0x0013490b
     940:	00193c19 	andseq	r3, r9, r9, lsl ip
     944:	00342200 	eorseq	r2, r4, r0, lsl #4
     948:	0b3a0e03 	bleq	e8415c <__bss_end+0xe6e60c>
     94c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     950:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     954:	34230000 	strtcc	r0, [r3], #-0
     958:	3a0e0300 	bcc	381560 <__bss_end+0x36ba10>
     95c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     960:	00180213 	andseq	r0, r8, r3, lsl r2
     964:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     968:	0b3a0e03 	bleq	e8417c <__bss_end+0xe6e62c>
     96c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     970:	06120111 			; <UNDEFINED> instruction: 0x06120111
     974:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     978:	00130119 	andseq	r0, r3, r9, lsl r1
     97c:	00052500 	andeq	r2, r5, r0, lsl #10
     980:	0b3a0e03 	bleq	e84194 <__bss_end+0xe6e644>
     984:	1349053b 	movtne	r0, #38203	; 0x953b
     988:	00001802 	andeq	r1, r0, r2, lsl #16
     98c:	03012e26 	movweq	r2, #7718	; 0x1e26
     990:	3b0b3a0e 	blcc	2cf1d0 <__bss_end+0x2b9680>
     994:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     998:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     99c:	96184006 	ldrls	r4, [r8], -r6
     9a0:	13011942 	movwne	r1, #6466	; 0x1942
     9a4:	34270000 	strtcc	r0, [r7], #-0
     9a8:	3a0e0300 	bcc	3815b0 <__bss_end+0x36ba60>
     9ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9b0:	00180213 	andseq	r0, r8, r3, lsl r2
     9b4:	010b2800 	tsteq	fp, r0, lsl #16
     9b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9bc:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
     9c0:	03193f00 	tsteq	r9, #0, 30
     9c4:	3b0b3a0e 	blcc	2cf204 <__bss_end+0x2b96b4>
     9c8:	11192705 	tstne	r9, r5, lsl #14
     9cc:	40061201 	andmi	r1, r6, r1, lsl #4
     9d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     9d4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     9d8:	03193f01 	tsteq	r9, #1, 30
     9dc:	3b0b3a0e 	blcc	2cf21c <__bss_end+0x2b96cc>
     9e0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     9e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9e8:	96184006 	ldrls	r4, [r8], -r6
     9ec:	13011942 	movwne	r1, #6466	; 0x1942
     9f0:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     9f4:	03193f01 	tsteq	r9, #1, 30
     9f8:	3b0b3a0e 	blcc	2cf238 <__bss_end+0x2b96e8>
     9fc:	11192705 	tstne	r9, r5, lsl #14
     a00:	40061201 	andmi	r1, r6, r1, lsl #4
     a04:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a08:	00001301 	andeq	r1, r0, r1, lsl #6
     a0c:	3f012e2c 	svccc	0x00012e2c
     a10:	3a0e0319 	bcc	38167c <__bss_end+0x36bb2c>
     a14:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a18:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a1c:	96184006 	ldrls	r4, [r8], -r6
     a20:	13011942 	movwne	r1, #6466	; 0x1942
     a24:	0b2d0000 	bleq	b40a2c <__bss_end+0xb2aedc>
     a28:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     a2c:	00130106 	andseq	r0, r3, r6, lsl #2
     a30:	002e2e00 	eoreq	r2, lr, r0, lsl #28
     a34:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a3c:	13491927 	movtne	r1, #39207	; 0x9927
     a40:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a44:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a48:	2f000019 	svccs	0x00000019
     a4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a50:	0b3a0e03 	bleq	e84264 <__bss_end+0xe6e714>
     a54:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a58:	01111349 	tsteq	r1, r9, asr #6
     a5c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a60:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a64:	30000013 	andcc	r0, r0, r3, lsl r0
     a68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a6c:	0b3a0e03 	bleq	e84280 <__bss_end+0xe6e730>
     a70:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a74:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     a7c:	00000019 	andeq	r0, r0, r9, lsl r0
     a80:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     a84:	030b130e 	movweq	r1, #45838	; 0xb30e
     a88:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     a8c:	00171006 	andseq	r1, r7, r6
     a90:	00160200 	andseq	r0, r6, r0, lsl #4
     a94:	0b3a0e03 	bleq	e842a8 <__bss_end+0xe6e758>
     a98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a9c:	0f030000 	svceq	0x00030000
     aa0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     aa4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     aa8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     aac:	00001301 	andeq	r1, r0, r1, lsl #6
     ab0:	49000505 	stmdbmi	r0, {r0, r2, r8, sl}
     ab4:	06000013 			; <UNDEFINED> instruction: 0x06000013
     ab8:	0b0b0024 	bleq	2c0b50 <__bss_end+0x2ab000>
     abc:	0e030b3e 	vmoveq.16	d3[0], r0
     ac0:	26070000 	strcs	r0, [r7], -r0
     ac4:	00134900 	andseq	r4, r3, r0, lsl #18
     ac8:	000f0800 	andeq	r0, pc, r0, lsl #16
     acc:	00000b0b 	andeq	r0, r0, fp, lsl #22
     ad0:	0b011309 	bleq	456fc <__bss_end+0x2fbac>
     ad4:	3b0b3a0b 	blcc	2cf308 <__bss_end+0x2b97b8>
     ad8:	0013010b 	andseq	r0, r3, fp, lsl #2
     adc:	000d0a00 	andeq	r0, sp, r0, lsl #20
     ae0:	0b3a0e03 	bleq	e842f4 <__bss_end+0xe6e7a4>
     ae4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ae8:	00000b38 	andeq	r0, r0, r8, lsr fp
     aec:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     af0:	00130113 	andseq	r0, r3, r3, lsl r1
     af4:	00210c00 	eoreq	r0, r1, r0, lsl #24
     af8:	0b2f1349 	bleq	bc5824 <__bss_end+0xbafcd4>
     afc:	340d0000 	strcc	r0, [sp], #-0
     b00:	3a0e0300 	bcc	381708 <__bss_end+0x36bbb8>
     b04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b08:	00180213 	andseq	r0, r8, r3, lsl r2
     b0c:	00350e00 	eorseq	r0, r5, r0, lsl #28
     b10:	00001349 	andeq	r1, r0, r9, asr #6
     b14:	3f012e0f 	svccc	0x00012e0f
     b18:	3a0e0319 	bcc	381784 <__bss_end+0x36bc34>
     b1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b20:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     b24:	97184006 	ldrls	r4, [r8, -r6]
     b28:	13011942 	movwne	r1, #6466	; 0x1942
     b2c:	05100000 	ldreq	r0, [r0, #-0]
     b30:	3a080300 	bcc	201738 <__bss_end+0x1ebbe8>
     b34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b38:	00180213 	andseq	r0, r8, r3, lsl r2
     b3c:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     b40:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b44:	0b3b0b3a 	bleq	ec3834 <__bss_end+0xeadce4>
     b48:	01111927 	tsteq	r1, r7, lsr #18
     b4c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b50:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b54:	12000013 	andne	r0, r0, #19
     b58:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b5c:	0b3b0b3a 	bleq	ec384c <__bss_end+0xeadcfc>
     b60:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b64:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     b68:	03193f00 	tsteq	r9, #0, 30
     b6c:	3b0b3a0e 	blcc	2cf3ac <__bss_end+0x2b985c>
     b70:	1119270b 	tstne	r9, fp, lsl #14
     b74:	40061201 	andmi	r1, r6, r1, lsl #4
     b78:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b7c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     b80:	3a0e0301 	bcc	38178c <__bss_end+0x36bc3c>
     b84:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b88:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     b8c:	96184006 	ldrls	r4, [r8], -r6
     b90:	00001942 	andeq	r1, r0, r2, asr #18
     b94:	11010b15 	tstne	r1, r5, lsl fp
     b98:	00061201 	andeq	r1, r6, r1, lsl #4
     b9c:	00341600 	eorseq	r1, r4, r0, lsl #12
     ba0:	0b3a0803 	bleq	e82bb4 <__bss_end+0xe6d064>
     ba4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ba8:	00001802 	andeq	r1, r0, r2, lsl #16
     bac:	01110100 	tsteq	r1, r0, lsl #2
     bb0:	0b130e25 	bleq	4c444c <__bss_end+0x4ae8fc>
     bb4:	01110e03 	tsteq	r1, r3, lsl #28
     bb8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     bbc:	04020000 	streq	r0, [r2], #-0
     bc0:	0b0e0301 	bleq	3817cc <__bss_end+0x36bc7c>
     bc4:	3a13490b 	bcc	4d2ff8 <__bss_end+0x4bd4a8>
     bc8:	010b3b0b 	tsteq	fp, fp, lsl #22
     bcc:	03000013 	movweq	r0, #19
     bd0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     bd4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     bd8:	0b002404 	bleq	9bf0 <__module_entries_end+0x1b4c>
     bdc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     be0:	0500000e 	streq	r0, [r0, #-14]
     be4:	0b0b0113 	bleq	2c1038 <__bss_end+0x2ab4e8>
     be8:	0b3b0b3a 	bleq	ec38d8 <__bss_end+0xeadd88>
     bec:	00001301 	andeq	r1, r0, r1, lsl #6
     bf0:	03000d06 	movweq	r0, #3334	; 0xd06
     bf4:	3b0b3a0e 	blcc	2cf434 <__bss_end+0x2b98e4>
     bf8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     bfc:	0700000b 	streq	r0, [r0, -fp]
     c00:	13490101 	movtne	r0, #37121	; 0x9101
     c04:	00001301 	andeq	r1, r0, r1, lsl #6
     c08:	49002108 	stmdbmi	r0, {r3, r8, sp}
     c0c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     c10:	00160900 	andseq	r0, r6, r0, lsl #18
     c14:	0b3a0e03 	bleq	e84428 <__bss_end+0xe6e8d8>
     c18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c1c:	350a0000 	strcc	r0, [sl, #-0]
     c20:	00134900 	andseq	r4, r3, r0, lsl #18
     c24:	00340b00 	eorseq	r0, r4, r0, lsl #22
     c28:	0b3a0e03 	bleq	e8443c <__bss_end+0xe6e8ec>
     c2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c30:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     c34:	0f0c0000 	svceq	0x000c0000
     c38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c3c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     c40:	13490026 	movtne	r0, #36902	; 0x9026
     c44:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     c48:	03193f01 	tsteq	r9, #1, 30
     c4c:	3b0b3a0e 	blcc	2cf48c <__bss_end+0x2b993c>
     c50:	1119270b 	tstne	r9, fp, lsl #14
     c54:	40061201 	andmi	r1, r6, r1, lsl #4
     c58:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c5c:	00001301 	andeq	r1, r0, r1, lsl #6
     c60:	0300050f 	movweq	r0, #1295	; 0x50f
     c64:	3b0b3a0e 	blcc	2cf4a4 <__bss_end+0x2b9954>
     c68:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c6c:	10000018 	andne	r0, r0, r8, lsl r0
     c70:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c74:	0b3b0b3a 	bleq	ec3964 <__bss_end+0xeade14>
     c78:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c7c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     c80:	03193f01 	tsteq	r9, #1, 30
     c84:	3b0b3a0e 	blcc	2cf4c4 <__bss_end+0x2b9974>
     c88:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c90:	97184006 	ldrls	r4, [r8, -r6]
     c94:	13011942 	movwne	r1, #6466	; 0x1942
     c98:	24120000 	ldrcs	r0, [r2], #-0
     c9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ca0:	0008030b 	andeq	r0, r8, fp, lsl #6
     ca4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     ca8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     cac:	0b3b0b3a 	bleq	ec399c <__bss_end+0xeade4c>
     cb0:	01111927 	tsteq	r1, r7, lsr #18
     cb4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     cb8:	01194296 			; <UNDEFINED> instruction: 0x01194296
     cbc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     cc0:	08030005 	stmdaeq	r3, {r0, r2}
     cc4:	0b3b0b3a 	bleq	ec39b4 <__bss_end+0xeade64>
     cc8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ccc:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     cd0:	03193f01 	tsteq	r9, #1, 30
     cd4:	3b0b3a0e 	blcc	2cf514 <__bss_end+0x2b99c4>
     cd8:	1119270b 	tstne	r9, fp, lsl #14
     cdc:	40061201 	andmi	r1, r6, r1, lsl #4
     ce0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ce4:	34160000 	ldrcc	r0, [r6], #-0
     ce8:	3a080300 	bcc	2018f0 <__bss_end+0x1ebda0>
     cec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cf0:	00180213 	andseq	r0, r8, r3, lsl r2
     cf4:	11010000 	mrsne	r0, (UNDEF: 1)
     cf8:	130e2501 	movwne	r2, #58625	; 0xe501
     cfc:	110e030b 	tstne	lr, fp, lsl #6
     d00:	10061201 	andne	r1, r6, r1, lsl #4
     d04:	02000017 	andeq	r0, r0, #23
     d08:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     d0c:	0b3b0b3a 	bleq	ec39fc <__bss_end+0xeadeac>
     d10:	00001349 	andeq	r1, r0, r9, asr #6
     d14:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
     d18:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     d1c:	0b0b0024 	bleq	2c0db4 <__bss_end+0x2ab264>
     d20:	0e030b3e 	vmoveq.16	d3[0], r0
     d24:	24050000 	strcs	r0, [r5], #-0
     d28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     d2c:	0008030b 	andeq	r0, r8, fp, lsl #6
     d30:	000f0600 	andeq	r0, pc, r0, lsl #12
     d34:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     d38:	13070000 	movwne	r0, #28672	; 0x7000
     d3c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     d40:	08000019 	stmdaeq	r0, {r0, r3, r4}
     d44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     d48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d4c:	00001349 	andeq	r1, r0, r9, asr #6
     d50:	0b011709 	bleq	4697c <__bss_end+0x30e2c>
     d54:	3b0b3a0b 	blcc	2cf588 <__bss_end+0x2b9a38>
     d58:	0013010b 	andseq	r0, r3, fp, lsl #2
     d5c:	000d0a00 	andeq	r0, sp, r0, lsl #20
     d60:	0b3a0e03 	bleq	e84574 <__bss_end+0xe6ea24>
     d64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d68:	010b0000 	mrseq	r0, (UNDEF: 11)
     d6c:	01134901 	tsteq	r3, r1, lsl #18
     d70:	0c000013 	stceq	0, cr0, [r0], {19}
     d74:	13490021 	movtne	r0, #36897	; 0x9021
     d78:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d7c:	0b01130d 	bleq	459b8 <__bss_end+0x2fe68>
     d80:	3b0b3a0b 	blcc	2cf5b4 <__bss_end+0x2b9a64>
     d84:	0013010b 	andseq	r0, r3, fp, lsl #2
     d88:	000d0e00 	andeq	r0, sp, r0, lsl #28
     d8c:	0b3a0e03 	bleq	e845a0 <__bss_end+0xe6ea50>
     d90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d94:	00000b38 	andeq	r0, r0, r8, lsr fp
     d98:	0b000f0f 	bleq	49dc <_start-0x3624>
     d9c:	1000000b 	andne	r0, r0, fp
     da0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     da4:	0b3a0b0b 	bleq	e839d8 <__bss_end+0xe6de88>
     da8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     dac:	0d110000 	ldceq	0, cr0, [r1, #-0]
     db0:	3a080300 	bcc	2019b8 <__bss_end+0x1ebe68>
     db4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db8:	000b3813 	andeq	r3, fp, r3, lsl r8
     dbc:	01131200 	tsteq	r3, r0, lsl #4
     dc0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     dc4:	0b3b0b3a 	bleq	ec3ab4 <__bss_end+0xeadf64>
     dc8:	00001301 	andeq	r1, r0, r1, lsl #6
     dcc:	03000d13 	movweq	r0, #3347	; 0xd13
     dd0:	3b0b3a0e 	blcc	2cf610 <__bss_end+0x2b9ac0>
     dd4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     dd8:	14000005 	strne	r0, [r0], #-5
     ddc:	19270015 	stmdbne	r7!, {r0, r2, r4}
     de0:	15150000 	ldrne	r0, [r5, #-0]
     de4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     de8:	00130113 	andseq	r0, r3, r3, lsl r1
     dec:	00051600 	andeq	r1, r5, r0, lsl #12
     df0:	00001349 	andeq	r1, r0, r9, asr #6
     df4:	03011317 	movweq	r1, #4887	; 0x1317
     df8:	3a050b0e 	bcc	143a38 <__bss_end+0x12dee8>
     dfc:	01053b0b 	tsteq	r5, fp, lsl #22
     e00:	18000013 	stmdane	r0, {r0, r1, r4}
     e04:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     e08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e0c:	0b381349 	bleq	e05b38 <__bss_end+0xdeffe8>
     e10:	0d190000 	ldceq	0, cr0, [r9, #-0]
     e14:	3a0e0300 	bcc	381a1c <__bss_end+0x36becc>
     e18:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e1c:	00053813 	andeq	r3, r5, r3, lsl r8
     e20:	01131a00 	tsteq	r3, r0, lsl #20
     e24:	0b0b0e03 	bleq	2c4638 <__bss_end+0x2aeae8>
     e28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e2c:	00001301 	andeq	r1, r0, r1, lsl #6
     e30:	0b01131b 	bleq	45aa4 <__bss_end+0x2ff54>
     e34:	3b0b3a0b 	blcc	2cf668 <__bss_end+0x2b9b18>
     e38:	00130105 	andseq	r0, r3, r5, lsl #2
     e3c:	01171c00 	tsteq	r7, r0, lsl #24
     e40:	0b3a0b0b 	bleq	e83a74 <__bss_end+0xe6df24>
     e44:	1301053b 	movwne	r0, #5435	; 0x153b
     e48:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
     e4c:	3a0e0300 	bcc	381a54 <__bss_end+0x36bf04>
     e50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e54:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     e58:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     e5c:	00001301 	andeq	r1, r0, r1, lsl #6
     e60:	0300341f 	movweq	r3, #1055	; 0x41f
     e64:	3b0b3a0e 	blcc	2cf6a4 <__bss_end+0x2b9b54>
     e68:	3f134905 	svccc	0x00134905
     e6c:	00193c19 	andseq	r3, r9, r9, lsl ip
     e70:	00342000 	eorseq	r2, r4, r0
     e74:	0b3a0e03 	bleq	e84688 <__bss_end+0xe6eb38>
     e78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e7c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e80:	17210000 	strne	r0, [r1, -r0]!
     e84:	0b0e0301 	bleq	381a90 <__bss_end+0x36bf40>
     e88:	3b0b3a05 	blcc	2cf6a4 <__bss_end+0x2b9b54>
     e8c:	0013010b 	andseq	r0, r3, fp, lsl #2
     e90:	00352200 	eorseq	r2, r5, r0, lsl #4
     e94:	00001349 	andeq	r1, r0, r9, asr #6
     e98:	49002123 	stmdbmi	r0, {r0, r1, r5, r8, sp}
     e9c:	00052f13 	andeq	r2, r5, r3, lsl pc
     ea0:	00342400 	eorseq	r2, r4, r0, lsl #8
     ea4:	0b3a0e03 	bleq	e846b8 <__bss_end+0xe6eb68>
     ea8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     eac:	00001802 	andeq	r1, r0, r2, lsl #16
     eb0:	03003425 	movweq	r3, #1061	; 0x425
     eb4:	3b0b3a0e 	blcc	2cf6f4 <__bss_end+0x2b9ba4>
     eb8:	3f13490b 	svccc	0x0013490b
     ebc:	00180219 	andseq	r0, r8, r9, lsl r2
     ec0:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     ec4:	0b3a0e03 	bleq	e846d8 <__bss_end+0xe6eb88>
     ec8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     ecc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ed0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ed4:	00130119 	andseq	r0, r3, r9, lsl r1
     ed8:	00052700 	andeq	r2, r5, r0, lsl #14
     edc:	0b3a0e03 	bleq	e846f0 <__bss_end+0xe6eba0>
     ee0:	1349053b 	movtne	r0, #38203	; 0x953b
     ee4:	00001802 	andeq	r1, r0, r2, lsl #16
     ee8:	03003428 	movweq	r3, #1064	; 0x428
     eec:	3b0b3a0e 	blcc	2cf72c <__bss_end+0x2b9bdc>
     ef0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ef4:	29000018 	stmdbcs	r0, {r3, r4}
     ef8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     efc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f04:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     f08:	03193f00 	tsteq	r9, #0, 30
     f0c:	3b0b3a0e 	blcc	2cf74c <__bss_end+0x2b9bfc>
     f10:	11192705 	tstne	r9, r5, lsl #14
     f14:	40061201 	andmi	r1, r6, r1, lsl #4
     f18:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f1c:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     f20:	03193f00 	tsteq	r9, #0, 30
     f24:	3b0b3a0e 	blcc	2cf764 <__bss_end+0x2b9c14>
     f28:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     f2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f30:	97184006 	ldrls	r4, [r8, -r6]
     f34:	00001942 	andeq	r1, r0, r2, asr #18
     f38:	3f012e2c 	svccc	0x00012e2c
     f3c:	3a0e0319 	bcc	381ba8 <__bss_end+0x36c058>
     f40:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f44:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f48:	96184006 	ldrls	r4, [r8], -r6
     f4c:	13011942 	movwne	r1, #6466	; 0x1942
     f50:	052d0000 	streq	r0, [sp, #-0]!
     f54:	3a080300 	bcc	201b5c <__bss_end+0x1ec00c>
     f58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f5c:	00180213 	andseq	r0, r8, r3, lsl r2
     f60:	00342e00 	eorseq	r2, r4, r0, lsl #28
     f64:	0b3a0803 	bleq	e82f78 <__bss_end+0xe6d428>
     f68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f6c:	00001802 	andeq	r1, r0, r2, lsl #16
     f70:	3f012e2f 	svccc	0x00012e2f
     f74:	3a0e0319 	bcc	381be0 <__bss_end+0x36c090>
     f78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f7c:	11134919 	tstne	r3, r9, lsl r9
     f80:	40061201 	andmi	r1, r6, r1, lsl #4
     f84:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     f88:	05300000 	ldreq	r0, [r0, #-0]!
     f8c:	3a0e0300 	bcc	381b94 <__bss_end+0x36c044>
     f90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f94:	00180213 	andseq	r0, r8, r3, lsl r2
     f98:	11010000 	mrsne	r0, (UNDEF: 1)
     f9c:	130e2501 	movwne	r2, #58625	; 0xe501
     fa0:	110e030b 	tstne	lr, fp, lsl #6
     fa4:	10061201 	andne	r1, r6, r1, lsl #4
     fa8:	02000017 	andeq	r0, r0, #23
     fac:	0b0b0024 	bleq	2c1044 <__bss_end+0x2ab4f4>
     fb0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     fb4:	24030000 	strcs	r0, [r3], #-0
     fb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     fbc:	000e030b 	andeq	r0, lr, fp, lsl #6
     fc0:	000f0400 	andeq	r0, pc, r0, lsl #8
     fc4:	00000b0b 	andeq	r0, r0, fp, lsl #22
     fc8:	03001605 	movweq	r1, #1541	; 0x605
     fcc:	3b0b3a0e 	blcc	2cf80c <__bss_end+0x2b9cbc>
     fd0:	0013490b 	andseq	r4, r3, fp, lsl #18
     fd4:	00260600 	eoreq	r0, r6, r0, lsl #12
     fd8:	00001349 	andeq	r1, r0, r9, asr #6
     fdc:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
     fe0:	00130113 	andseq	r0, r3, r3, lsl r1
     fe4:	00210800 	eoreq	r0, r1, r0, lsl #16
     fe8:	0b2f1349 	bleq	bc5d14 <__bss_end+0xbb01c4>
     fec:	34090000 	strcc	r0, [r9], #-0
     ff0:	3a0e0300 	bcc	381bf8 <__bss_end+0x36c0a8>
     ff4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff8:	00180213 	andseq	r0, r8, r3, lsl r2
     ffc:	002e0a00 	eoreq	r0, lr, r0, lsl #20
    1000:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1004:	0b3b0b3a 	bleq	ec3cf4 <__bss_end+0xeae1a4>
    1008:	01111927 	tsteq	r1, r7, lsr #18
    100c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1010:	00194296 	mulseq	r9, r6, r2
    1014:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
    1018:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    101c:	0b3b0b3a 	bleq	ec3d0c <__bss_end+0xeae1bc>
    1020:	01111927 	tsteq	r1, r7, lsr #18
    1024:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1028:	01194296 			; <UNDEFINED> instruction: 0x01194296
    102c:	0c000013 	stceq	0, cr0, [r0], {19}
    1030:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1034:	0b3b0b3a 	bleq	ec3d24 <__bss_end+0xeae1d4>
    1038:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    103c:	340d0000 	strcc	r0, [sp], #-0
    1040:	3a080300 	bcc	201c48 <__bss_end+0x1ec0f8>
    1044:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1048:	00180213 	andseq	r0, r8, r3, lsl r2
    104c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
    1050:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1054:	0b3b0b3a 	bleq	ec3d44 <__bss_end+0xeae1f4>
    1058:	01111927 	tsteq	r1, r7, lsr #18
    105c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1060:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01ff0002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010344 	andeq	r0, r1, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03860002 	orreq	r0, r6, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07fa0002 	ldrbeq	r0, [sl, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00010d54 	andeq	r0, r1, r4, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	12a40002 	adcne	r0, r4, #2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  94:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	21eb0002 	mvncs	r0, r2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00011ba0 	andeq	r1, r1, r0, lsr #23
  b4:	00001920 	andeq	r1, r0, r0, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	37370002 	ldrcc	r0, [r7, -r2]!
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000134c0 	andeq	r3, r1, r0, asr #9
  d4:	000003a0 	andeq	r0, r0, r0, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	39ee0002 	stmibcc	lr!, {r1}^
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00013860 	andeq	r3, r1, r0, ror #16
  f4:	000005d8 	ldrdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	3dec0002 	stclcc	0, cr0, [ip, #8]!
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00013e38 	andeq	r3, r1, r8, lsr lr
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	48d40002 	ldmmi	r4, {r1}^
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	000142fc 	strdeq	r4, [r1], -ip
 134:	00000120 	andeq	r0, r0, r0, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000134 	andeq	r0, r0, r4, lsr r1
       4:	00d70002 	sbcseq	r0, r7, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	2f63762f 	svccs	0x0063762f
      24:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
      28:	6f6f6c72 	svcvs	0x006f6c72
      2c:	61722f70 	cmnvs	r2, r0, ror pc
      30:	2f697073 	svccs	0x00697073
      34:	70736152 	rsbsvc	r6, r3, r2, asr r1
      38:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      3c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
      40:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      44:	534f5452 	movtpl	r5, #62546	; 0xf452
      48:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
      4c:	4f545265 	svcmi	0x00545265
      50:	6f532f53 	svcvs	0x00532f53
      54:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      58:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
      5c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
      60:	43472f65 	movtmi	r2, #32613	; 0x7f65
      64:	61522f43 	cmpvs	r2, r3, asr #30
      68:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
      6c:	50797272 	rsbspl	r7, r9, r2, ror r2
      70:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
      74:	2f656d6f 	svccs	0x00656d6f
      78:	482f6376 	stmdami	pc!, {r1, r2, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
      7c:	72657079 	rsbvc	r7, r5, #121	; 0x79
      80:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
      84:	7361722f 	cmnvc	r1, #-268435454	; 0xf0000002
      88:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
      8c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      90:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      94:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
      98:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      9c:	2f534f54 	svccs	0x00534f54
      a0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      a4:	534f5452 	movtpl	r5, #62546	; 0xf452
      a8:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd81 <_estack+0xf7fefd81>
      ac:	2f656372 	svccs	0x00656372
      b0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      b4:	00656475 	rsbeq	r6, r5, r5, ror r4
      b8:	726f7000 	rsbvc	r7, pc, #0
      bc:	00632e74 	rsbeq	r2, r3, r4, ror lr
      c0:	70000001 	andvc	r0, r0, r1
      c4:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
      c8:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
      cc:	00020068 	andeq	r0, r2, r8, rrx
      d0:	726f7000 	rsbvc	r7, pc, #0
      d4:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
      d8:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
      dc:	00000100 	andeq	r0, r0, r0, lsl #2
      e0:	02050000 	andeq	r0, r5, #0
      e4:	00010000 	andeq	r0, r1, r0
      e8:	bd013603 	stclt	6, cr3, [r1, #-12]
      ec:	68836e4e 	stmvs	r3, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
      f0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      f4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      f8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      fc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     100:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     104:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     108:	6a676767 	bvs	19d9eac <__bss_end+0x19c435c>
     10c:	85686a67 	strbhi	r6, [r8, #-2663]!	; 0xfffff599
     110:	2f686ca1 	svccs	0x00686ca1
     114:	4d162202 	lfmmi	f2, 4, [r6, #-8]
     118:	4e2f3131 	mcrmi	1, 1, r3, cr15, cr1, {1}
     11c:	820a034d 	andhi	r0, sl, #872415233	; 0x34000001
     120:	6731319f 			; <UNDEFINED> instruction: 0x6731319f
     124:	0a036b88 	beq	daf4c <__bss_end+0xc53fc>
     128:	6767304a 	strbvs	r3, [r7, -sl, asr #32]!
     12c:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
     130:	022f4c84 	eoreq	r4, pc, #132, 24	; 0x8400
     134:	0101000e 	tsteq	r1, lr
     138:	000000ba 	strheq	r0, [r0], -sl
     13c:	00770002 	rsbseq	r0, r7, r2
     140:	01020000 	mrseq	r0, (UNDEF: 2)
     144:	000d0efb 	strdeq	r0, [sp], -fp
     148:	01010101 	tsteq	r1, r1, lsl #2
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	2f010000 	svccs	0x00010000
     154:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     158:	2f63762f 	svccs	0x0063762f
     15c:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     160:	6f6f6c72 	svcvs	0x006f6c72
     164:	61722f70 	cmnvs	r2, r0, ror pc
     168:	2f697073 	svccs	0x00697073
     16c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     170:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     174:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     178:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     17c:	534f5452 	movtpl	r5, #62546	; 0xf452
     180:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     184:	4f545265 	svcmi	0x00545265
     188:	6f532f53 	svcvs	0x00532f53
     18c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     190:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     194:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     198:	43472f65 	movtmi	r2, #32613	; 0x7f65
     19c:	61522f43 	cmpvs	r2, r3, asr #30
     1a0:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     1a4:	50797272 	rsbspl	r7, r9, r2, ror r2
     1a8:	70000069 	andvc	r0, r0, r9, rrx
     1ac:	6974726f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     1b0:	632e7273 			; <UNDEFINED> instruction: 0x632e7273
     1b4:	00000100 	andeq	r0, r0, r0, lsl #2
     1b8:	02050000 	andeq	r0, r5, #0
     1bc:	00010344 	andeq	r0, r1, r4, asr #6
     1c0:	52013303 	andpl	r3, r1, #201326592	; 0xc000000
     1c4:	342f2fa0 	strtcc	r2, [pc], #-4000	; 1cc <_start-0x7e34>
     1c8:	6c132402 	cfldrsvs	mvf2, [r3], {2}
     1cc:	16d60e03 	ldrbne	r0, [r6], r3, lsl #28
     1d0:	152c0231 	strne	r0, [ip, #-561]!	; 0xfffffdcf
     1d4:	13240231 			; <UNDEFINED> instruction: 0x13240231
     1d8:	13661603 	cmnne	r6, #3145728	; 0x300000
     1dc:	2f132c02 	svccs	0x00132c02
     1e0:	03132402 	tsteq	r3, #33554432	; 0x2000000
     1e4:	034c662a 	movteq	r6, #50730	; 0xc62a
     1e8:	a19f9e0a 	orrsge	r9, pc, sl, lsl #28
     1ec:	85a2854b 	strhi	r8, [r2, #1355]!	; 0x54b
     1f0:	000e02a6 	andeq	r0, lr, r6, lsr #5
     1f4:	02000101 	andeq	r0, r0, #1073741824	; 0x40000000
     1f8:	00020000 	andeq	r0, r2, r0
     1fc:	00000123 	andeq	r0, r0, r3, lsr #2
     200:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     204:	0101000d 	tsteq	r1, sp
     208:	00000101 	andeq	r0, r0, r1, lsl #2
     20c:	00000100 	andeq	r0, r0, r0, lsl #2
     210:	6f682f01 	svcvs	0x00682f01
     214:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     218:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     21c:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     220:	2f706f6f 	svccs	0x00706f6f
     224:	70736172 	rsbsvc	r6, r3, r2, ror r1
     228:	61522f69 	cmpvs	r2, r9, ror #30
     22c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     230:	50797272 	rsbspl	r7, r9, r2, ror r2
     234:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     238:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     23c:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     240:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     244:	2f534f54 	svccs	0x00534f54
     248:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     24c:	2f006563 	svccs	0x00006563
     250:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     254:	2f63762f 	svccs	0x0063762f
     258:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     25c:	6f6f6c72 	svcvs	0x006f6c72
     260:	61722f70 	cmnvs	r2, r0, ror pc
     264:	2f697073 	svccs	0x00697073
     268:	70736152 	rsbsvc	r6, r3, r2, asr r1
     26c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     270:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     274:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     278:	534f5452 	movtpl	r5, #62546	; 0xf452
     27c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     280:	4f545265 	svcmi	0x00545265
     284:	6f532f53 	svcvs	0x00532f53
     288:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     28c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     290:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     294:	6f682f00 	svcvs	0x00682f00
     298:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     29c:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     2a0:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     2a4:	2f706f6f 	svccs	0x00706f6f
     2a8:	70736172 	rsbsvc	r6, r3, r2, ror r1
     2ac:	61522f69 	cmpvs	r2, r9, ror #30
     2b0:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     2b4:	50797272 	rsbspl	r7, r9, r2, ror r2
     2b8:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     2bc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     2c0:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     2c4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     2c8:	2f534f54 	svccs	0x00534f54
     2cc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     2d0:	702f6563 	eorvc	r6, pc, r3, ror #10
     2d4:	6174726f 	cmnvs	r4, pc, ror #4
     2d8:	2f656c62 	svccs	0x00656c62
     2dc:	2f434347 	svccs	0x00434347
     2e0:	70736152 	rsbsvc	r6, r3, r2, asr r1
     2e4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     2e8:	00695079 	rsbeq	r5, r9, r9, ror r0
     2ec:	6f726300 	svcvs	0x00726300
     2f0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     2f4:	00632e65 	rsbeq	r2, r3, r5, ror #28
     2f8:	6c000001 	stcvs	0, cr0, [r0], {1}
     2fc:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     300:	00020068 	andeq	r0, r2, r8, rrx
     304:	726f7000 	rsbvc	r7, pc, #0
     308:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     30c:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     310:	00000300 	andeq	r0, r0, r0, lsl #6
     314:	756f7263 	strbvc	r7, [pc, #-611]!	; b9 <_start-0x7f47>
     318:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     31c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     320:	00000000 	andeq	r0, r0, r0
     324:	05f00205 	ldrbeq	r0, [r0, #517]!	; 0x205
     328:	8a030001 	bhi	c0334 <__bss_end+0xaa7e4>
     32c:	67bf0101 	ldrvs	r0, [pc, r1, lsl #2]!
     330:	3267846a 	rsbcc	r8, r7, #1778384896	; 0x6a000000
     334:	67674e68 	strbvs	r4, [r7, -r8, ror #28]!
     338:	87836967 	strhi	r6, [r3, r7, ror #18]
     33c:	00866967 	addeq	r6, r6, r7, ror #18
     340:	06010402 	streq	r0, [r1], -r2, lsl #8
     344:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     348:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     34c:	08060304 	stmdaeq	r6, {r2, r8, r9}
     350:	2f4d6a92 	svccs	0x004d6a92
     354:	a1a3a3be 			; <UNDEFINED> instruction: 0xa1a3a3be
     358:	2608a284 	strcs	sl, [r8], -r4, lsl #5
     35c:	dabc6af5 	ble	fef1af38 <_estack+0xf6f0af38>
     360:	83a0336a 	movhi	r3, #-1476395007	; 0xa8000001
     364:	0083a084 	addeq	sl, r3, r4, lsl #1
     368:	06010402 	streq	r0, [r1], -r2, lsl #8
     36c:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     370:	03068203 	movweq	r8, #25091	; 0x6203
     374:	03900873 	orrseq	r0, r0, #7536640	; 0x730000
     378:	69be820f 	ldmibvs	lr!, {r0, r1, r2, r3, r9, pc}
     37c:	a19f30d7 	ldrsbge	r3, [pc, r7]
     380:	6a836788 	bvs	fe0da1a8 <_estack+0xf60ca1a8>
     384:	31bda030 			; <UNDEFINED> instruction: 0x31bda030
     388:	858485a5 	strhi	r8, [r4, #1445]	; 0x5a5
     38c:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     390:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     394:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     398:	08650306 	stmdaeq	r5!, {r1, r2, r8, r9}^
     39c:	9e6e0390 	mcrls	3, 3, r0, cr14, cr0, {4}
     3a0:	83823103 	orrhi	r3, r2, #-1073741824	; 0xc0000000
     3a4:	31684008 	cmncc	r8, r8
     3a8:	03873031 	orreq	r3, r7, #49	; 0x31
     3ac:	0c039e79 	stceq	14, cr9, [r3], {121}	; 0x79
     3b0:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
     3b4:	02060104 	andeq	r0, r6, #4, 2
     3b8:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     3bc:	009e0304 	addseq	r0, lr, r4, lsl #6
     3c0:	06030402 	streq	r0, [r3], -r2, lsl #8
     3c4:	040200a1 	streq	r0, [r2], #-161	; 0xffffff5f
     3c8:	033e0803 	teqeq	lr, #196608	; 0x30000
     3cc:	0d034a74 	vstreq	s8, [r3, #-464]	; 0xfffffe30
     3d0:	0069a22e 	rsbeq	sl, r9, lr, lsr #4
     3d4:	68030402 	stmdavs	r3, {r1, sl}
     3d8:	03040200 	movweq	r0, #16896	; 0x4200
     3dc:	02001e08 	andeq	r1, r0, #8, 28	; 0x80
     3e0:	66060104 	strvs	r0, [r6], -r4, lsl #2
     3e4:	4b4b6b06 	blmi	12db004 <__bss_end+0x12c54b4>
     3e8:	0867674e 	stmdaeq	r7!, {r1, r2, r3, r6, r8, r9, sl, sp, lr}^
     3ec:	83838924 	orrhi	r8, r3, #36, 18	; 0x90000
     3f0:	4d6ad8a0 	stclmi	8, cr13, [sl, #-640]!	; 0xfffffd80
     3f4:	000a022f 	andeq	r0, sl, pc, lsr #4
     3f8:	028e0101 	addeq	r0, lr, #1073741824	; 0x40000000
     3fc:	00020000 	andeq	r0, r2, r0
     400:	00000240 	andeq	r0, r0, r0, asr #4
     404:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     408:	0101000d 	tsteq	r1, sp
     40c:	00000101 	andeq	r0, r0, r1, lsl #2
     410:	00000100 	andeq	r0, r0, r0, lsl #2
     414:	6f682f01 	svcvs	0x00682f01
     418:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     41c:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     420:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     424:	2f706f6f 	svccs	0x00706f6f
     428:	70736172 	rsbsvc	r6, r3, r2, ror r1
     42c:	61522f69 	cmpvs	r2, r9, ror #30
     430:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     434:	50797272 	rsbspl	r7, r9, r2, ror r2
     438:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     43c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     440:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     444:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     448:	2f534f54 	svccs	0x00534f54
     44c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     450:	2f006563 	svccs	0x00006563
     454:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     458:	2f63762f 	svccs	0x0063762f
     45c:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     460:	6f6f6c72 	svcvs	0x006f6c72
     464:	63672f70 	cmnvs	r7, #112, 30	; 0x1c0
     468:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     46c:	6f6e2d6d 	svcvs	0x006e2d6d
     470:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     474:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
     478:	30322d36 	eorscc	r2, r2, r6, lsr sp
     47c:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
     480:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
     484:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     488:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     48c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     490:	61652d65 	cmnvs	r5, r5, ror #26
     494:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     498:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     49c:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
     4a0:	2f007379 	svccs	0x00007379
     4a4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     4a8:	2f63762f 	svccs	0x0063762f
     4ac:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     4b0:	6f6f6c72 	svcvs	0x006f6c72
     4b4:	63672f70 	cmnvs	r7, #112, 30	; 0x1c0
     4b8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     4bc:	6f6e2d6d 	svcvs	0x006e2d6d
     4c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     4c4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
     4c8:	30322d36 	eorscc	r2, r2, r6, lsr sp
     4cc:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
     4d0:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
     4d4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     4d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     4dc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     4e0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     4e4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     4e8:	61652d65 	cmnvs	r5, r5, ror #26
     4ec:	362f6962 	strtcc	r6, [pc], -r2, ror #18
     4f0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
     4f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     4f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     4fc:	6f682f00 	svcvs	0x00682f00
     500:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     504:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     508:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     50c:	2f706f6f 	svccs	0x00706f6f
     510:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     514:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     518:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     51c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     520:	2d362d69 	ldccs	13, cr2, [r6, #-420]!	; 0xfffffe5c
     524:	37313032 			; <UNDEFINED> instruction: 0x37313032
     528:	2d31712d 	ldfcss	f7, [r1, #-180]!	; 0xffffff4c
     52c:	61647075 	smcvs	18181	; 0x4705
     530:	612f6574 			; <UNDEFINED> instruction: 0x612f6574
     534:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     538:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     53c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     540:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     544:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     548:	6f682f00 	svcvs	0x00682f00
     54c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     550:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     554:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     558:	2f706f6f 	svccs	0x00706f6f
     55c:	70736172 	rsbsvc	r6, r3, r2, ror r1
     560:	61522f69 	cmpvs	r2, r9, ror #30
     564:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     568:	50797272 	rsbspl	r7, r9, r2, ror r2
     56c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     570:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     574:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     578:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     57c:	2f534f54 	svccs	0x00534f54
     580:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     584:	702f6563 	eorvc	r6, pc, r3, ror #10
     588:	6174726f 	cmnvs	r4, pc, ror #4
     58c:	2f656c62 	svccs	0x00656c62
     590:	2f434347 	svccs	0x00434347
     594:	70736152 	rsbsvc	r6, r3, r2, asr r1
     598:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     59c:	00695079 	rsbeq	r5, r9, r9, ror r0
     5a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4ec <_start-0x7b14>
     5a4:	63762f65 	cmnvs	r6, #404	; 0x194
     5a8:	7079482f 	rsbsvc	r4, r9, pc, lsr #16
     5ac:	6f6c7265 	svcvs	0x006c7265
     5b0:	722f706f 	eorvc	r7, pc, #111	; 0x6f
     5b4:	69707361 	ldmdbvs	r0!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     5b8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     5bc:	72656270 	rsbvc	r6, r5, #112, 4
     5c0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     5c4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     5c8:	4f545265 	svcmi	0x00545265
     5cc:	72462f53 	subvc	r2, r6, #332	; 0x14c
     5d0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     5d4:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     5d8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5dc:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     5e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     5e4:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
     5e8:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     5ec:	00010063 	andeq	r0, r1, r3, rrx
     5f0:	636f6c00 	cmnvs	pc, #0, 24
     5f4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     5f8:	5f000002 	svcpl	0x00000002
     5fc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     600:	00682e73 	rsbeq	r2, r8, r3, ror lr
     604:	73000002 	movwvc	r0, #2
     608:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     60c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     610:	72000003 	andvc	r0, r0, #3
     614:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     618:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     61c:	74730000 	ldrbtvc	r0, [r3], #-0
     620:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
     624:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     628:	6f700000 	svcvs	0x00700000
     62c:	616d7472 	smcvs	55106	; 0xd742
     630:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     634:	00050068 	andeq	r0, r5, r8, rrx
     638:	73696c00 	cmnvc	r9, #0, 24
     63c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     640:	00000006 	andeq	r0, r0, r6
     644:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
     648:	0300010d 	movweq	r0, #269	; 0x10d
     64c:	860100cc 	strhi	r0, [r1], -ip, asr #1
     650:	84836a86 	strhi	r6, [r3], #2694	; 0xa86
     654:	67848667 	strvs	r8, [r4, r7, ror #12]
     658:	8368a586 	cmnhi	r8, #562036736	; 0x21800000
     65c:	69678383 	stmdbvs	r7!, {r0, r1, r7, r8, r9, pc}^
     660:	a3869f68 	orrge	r9, r6, #104, 30	; 0x1a0
     664:	68660903 	stmdavs	r6!, {r0, r1, r8, fp}^
     668:	00821403 	addeq	r1, r2, r3, lsl #8
     66c:	06030402 	streq	r0, [r3], -r2, lsl #8
     670:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     674:	c1066601 	tstgt	r6, r1, lsl #12
     678:	6a678383 	bvs	19e148c <__bss_end+0x19cb93c>
     67c:	85869f68 	strhi	r9, [r6, #3944]	; 0xf68
     680:	a069a29f 	mlsge	r9, pc, r2, sl	; <UNPREDICTABLE>
     684:	029f6785 	addseq	r6, pc, #34865152	; 0x2140000
     688:	01010008 	tsteq	r1, r8
     68c:	00000390 	muleq	r0, r0, r3
     690:	024b0002 	subeq	r0, fp, #2
     694:	01020000 	mrseq	r0, (UNDEF: 2)
     698:	000d0efb 	strdeq	r0, [sp], -fp
     69c:	01010101 	tsteq	r1, r1, lsl #2
     6a0:	01000000 	mrseq	r0, (UNDEF: 0)
     6a4:	2f010000 	svccs	0x00010000
     6a8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     6ac:	2f63762f 	svccs	0x0063762f
     6b0:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     6b4:	6f6f6c72 	svcvs	0x006f6c72
     6b8:	61722f70 	cmnvs	r2, r0, ror pc
     6bc:	2f697073 	svccs	0x00697073
     6c0:	70736152 	rsbsvc	r6, r3, r2, asr r1
     6c4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     6c8:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     6cc:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     6d0:	534f5452 	movtpl	r5, #62546	; 0xf452
     6d4:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     6d8:	4f545265 	svcmi	0x00545265
     6dc:	6f532f53 	svcvs	0x00532f53
     6e0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     6e4:	6f682f00 	svcvs	0x00682f00
     6e8:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     6ec:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     6f0:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     6f4:	2f706f6f 	svccs	0x00706f6f
     6f8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     6fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     700:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     704:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     708:	2d362d69 	ldccs	13, cr2, [r6, #-420]!	; 0xfffffe5c
     70c:	37313032 			; <UNDEFINED> instruction: 0x37313032
     710:	2d31712d 	ldfcss	f7, [r1, #-180]!	; 0xffffff4c
     714:	61647075 	smcvs	18181	; 0x4705
     718:	6c2f6574 	cfstr32vs	mvfx6, [pc], #-464	; 550 <_start-0x7ab0>
     71c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     720:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     724:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     728:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     72c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     730:	332e362f 			; <UNDEFINED> instruction: 0x332e362f
     734:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     738:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     73c:	2f006564 	svccs	0x00006564
     740:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     744:	2f63762f 	svccs	0x0063762f
     748:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     74c:	6f6f6c72 	svcvs	0x006f6c72
     750:	63672f70 	cmnvs	r7, #112, 30	; 0x1c0
     754:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     758:	6f6e2d6d 	svcvs	0x006e2d6d
     75c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     760:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
     764:	30322d36 	eorscc	r2, r2, r6, lsr sp
     768:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
     76c:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
     770:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     774:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     778:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     77c:	61652d65 	cmnvs	r5, r5, ror #26
     780:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     784:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     788:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
     78c:	2f007379 	svccs	0x00007379
     790:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     794:	2f63762f 	svccs	0x0063762f
     798:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     79c:	6f6f6c72 	svcvs	0x006f6c72
     7a0:	63672f70 	cmnvs	r7, #112, 30	; 0x1c0
     7a4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     7a8:	6f6e2d6d 	svcvs	0x006e2d6d
     7ac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     7b0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
     7b4:	30322d36 	eorscc	r2, r2, r6, lsr sp
     7b8:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
     7bc:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
     7c0:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     7c4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     7c8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     7cc:	61652d65 	cmnvs	r5, r5, ror #26
     7d0:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     7d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     7d8:	2f006564 	svccs	0x00006564
     7dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     7e0:	2f63762f 	svccs	0x0063762f
     7e4:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     7e8:	6f6f6c72 	svcvs	0x006f6c72
     7ec:	61722f70 	cmnvs	r2, r0, ror pc
     7f0:	2f697073 	svccs	0x00697073
     7f4:	70736152 	rsbsvc	r6, r3, r2, asr r1
     7f8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     7fc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     800:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     804:	534f5452 	movtpl	r5, #62546	; 0xf452
     808:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     80c:	4f545265 	svcmi	0x00545265
     810:	6f532f53 	svcvs	0x00532f53
     814:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     818:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     81c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     820:	43472f65 	movtmi	r2, #32613	; 0x7f65
     824:	61522f43 	cmpvs	r2, r3, asr #30
     828:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     82c:	50797272 	rsbspl	r7, r9, r2, ror r2
     830:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
     834:	2f656d6f 	svccs	0x00656d6f
     838:	482f6376 	stmdami	pc!, {r1, r2, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
     83c:	72657079 	rsbvc	r7, r5, #121	; 0x79
     840:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
     844:	7361722f 	cmnvc	r1, #-268435454	; 0xf0000002
     848:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     84c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     850:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     854:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     858:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     85c:	2f534f54 	svccs	0x00534f54
     860:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     864:	534f5452 	movtpl	r5, #62546	; 0xf452
     868:	756f532f 	strbvc	r5, [pc, #-815]!	; 541 <_start-0x7abf>
     86c:	2f656372 	svccs	0x00656372
     870:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     874:	00656475 	rsbeq	r6, r5, r5, ror r4
     878:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     87c:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
     880:	00000100 	andeq	r0, r0, r0, lsl #2
     884:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     888:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     88c:	00000200 	andeq	r0, r0, r0, lsl #4
     890:	6b636f6c 	blvs	18dc648 <__bss_end+0x18c6af8>
     894:	0300682e 	movweq	r6, #2094	; 0x82e
     898:	745f0000 	ldrbvc	r0, [pc], #-0	; 8a0 <_start-0x7760>
     89c:	73657079 	cmnvc	r5, #121	; 0x79
     8a0:	0300682e 	movweq	r6, #2094	; 0x82e
     8a4:	65720000 	ldrbvs	r0, [r2, #-0]!
     8a8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     8ac:	00030068 	andeq	r0, r3, r8, rrx
     8b0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     8b4:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     8b8:	00040068 	andeq	r0, r4, r8, rrx
     8bc:	726f7000 	rsbvc	r7, pc, #0
     8c0:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     8c4:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     8c8:	00000500 	andeq	r0, r0, r0, lsl #10
     8cc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     8d0:	0600682e 	streq	r6, [r0], -lr, lsr #16
     8d4:	61740000 	cmnvs	r4, r0
     8d8:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     8dc:	00000600 	andeq	r0, r0, r0, lsl #12
     8e0:	02050000 	andeq	r0, r5, #0
     8e4:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     8e8:	01029703 	tsteq	r2, r3, lsl #14
     8ec:	3d0830a1 	stccc	0, cr3, [r8, #-644]	; 0xfffffd7c
     8f0:	59088367 	stmdbpl	r8, {r0, r1, r2, r5, r6, r8, r9, pc}
     8f4:	846d6867 	strbthi	r6, [sp], #-2151	; 0xfffff799
     8f8:	858351d8 	strhi	r5, [r3, #472]	; 0x1d8
     8fc:	d96a2f32 	stmdble	sl!, {r1, r4, r5, r8, r9, sl, fp, sp}^
     900:	6a676851 	bvs	19daa4c <__bss_end+0x19c4efc>
     904:	67869fa0 	strvs	r9, [r6, r0, lsr #31]
     908:	516b6e67 	cmnpl	fp, r7, ror #28
     90c:	01d0032f 	bicseq	r0, r0, pc, lsr #6
     910:	0b03d766 	bleq	f66b0 <__bss_end+0xe0b60>
     914:	86bd324a 	ldrthi	r3, [sp], sl, asr #4
     918:	3232dc84 	eorscc	sp, r2, #132, 24	; 0x8400
     91c:	4c336a4e 			; <UNDEFINED> instruction: 0x4c336a4e
     920:	334e676a 	movtcc	r6, #59242	; 0xe76a
     924:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     928:	009e0601 	addseq	r0, lr, r1, lsl #12
     92c:	66030402 	strvs	r0, [r3], -r2, lsl #8
     930:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     934:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     938:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     93c:	31060604 	tstcc	r6, r4, lsl #12
     940:	51c1a1f4 	strdpl	sl, [r1, #20]
     944:	504b5084 	subpl	r5, fp, r4, lsl #1
     948:	0200334b 	andeq	r3, r0, #738197505	; 0x2c000001
     94c:	03310304 	teqeq	r1, #4, 6	; 0x10000000
     950:	036601d2 	cmneq	r6, #-2147483596	; 0x80000034
     954:	be4cd60c 	cdplt	6, 4, cr13, cr12, cr12, {0}
     958:	da848486 	ble	fe121b78 <_estack+0xf6111b78>
     95c:	82090368 	andhi	r0, r9, #104, 6	; 0xa0000001
     960:	2f4f6ba1 	svccs	0x004f6ba1
     964:	0d03d76a 	stceq	7, cr13, [r3, #-424]	; 0xfffffe58
     968:	6885324a 	stmvs	r5, {r1, r3, r6, r9, ip, sp}
     96c:	0d036b68 	vstreq	d6, [r3, #-416]	; 0xfffffe60
     970:	03d8849e 	bicseq	r8, r8, #-1644167168	; 0x9e000000
     974:	866a4a0a 	strbthi	r4, [sl], -sl, lsl #20
     978:	4e2f33d9 	mcrmi	3, 1, r3, cr15, cr9, {6}
     97c:	6a4c306a 	bvs	130cb2c <__bss_end+0x12f6fdc>
     980:	2f334e67 	svccs	0x00334e67
     984:	01040200 	mrseq	r0, R12_usr
     988:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     98c:	00660304 	rsbeq	r0, r6, r4, lsl #6
     990:	82040402 	andhi	r0, r4, #33554432	; 0x2000000
     994:	06040200 	streq	r0, [r4], -r0, lsl #4
     998:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     99c:	f4310606 			; <UNDEFINED> instruction: 0xf4310606
     9a0:	bb9e1103 	bllt	fe784db4 <_estack+0xf6774db4>
     9a4:	4b50844b 	blmi	1421ad8 <__bss_end+0x140bf88>
     9a8:	00304b4f 	eorseq	r4, r0, pc, asr #22
     9ac:	31030402 	tstcc	r3, r2, lsl #8
     9b0:	864dc16a 	strbhi	ip, [sp], -sl, ror #2
     9b4:	8484a367 	strhi	sl, [r4], #871	; 0x367
     9b8:	090368da 	stmdbeq	r3, {r1, r3, r4, r6, r7, fp, sp, lr}
     9bc:	506aa182 	rsbpl	sl, sl, r2, lsl #3
     9c0:	2f876a2f 	svccs	0x00876a2f
     9c4:	6a2f3067 	bvs	bccb68 <__bss_end+0xbb7018>
     9c8:	862f6887 	strthi	r6, [pc], -r7, lsl #17
     9cc:	034b8387 	movteq	r8, #45959	; 0xb387
     9d0:	03bb6622 			; <UNDEFINED> instruction: 0x03bb6622
     9d4:	d768820d 	strble	r8, [r8, -sp, lsl #4]!
     9d8:	d7a3bcd7 	sbfxle	fp, r7, #25, #4
     9dc:	9ff6bcf3 	svcls	0x00f6bcf3
     9e0:	d7849f6a 	strle	r9, [r4, sl, ror #30]
     9e4:	6ad884bc 	bvs	ff621cdc <_estack+0xf7611cdc>
     9e8:	86323189 	ldrthi	r3, [r2], -r9, lsl #3
     9ec:	710331da 	ldrdvc	r3, [r3, -sl]
     9f0:	9e13039e 	mrcls	3, 0, r0, cr3, cr14, {4}
     9f4:	30316832 	eorscc	r6, r1, r2, lsr r8
     9f8:	31d88430 	bicscc	r8, r8, r0, lsr r4
     9fc:	039e7703 	orrseq	r7, lr, #786432	; 0xc0000
     a00:	68329e0d 	ldmdavs	r2!, {r0, r2, r3, r9, sl, fp, ip, pc}
     a04:	2f856a2f 	svccs	0x00856a2f
     a08:	6a2f30d7 	bvs	bccd6c <__bss_end+0xbb721c>
     a0c:	862fd886 	strthi	sp, [pc], -r6, lsl #17
     a10:	21082f85 	smlabbcs	r8, r5, pc, r2	; <UNPREDICTABLE>
     a14:	866a2f30 	uqasxhi	r2, sl, r0
     a18:	022f2208 	eoreq	r2, pc, #8, 4	; 0x80000000
     a1c:	01010008 	tsteq	r1, r8
     a20:	000005ab 	andeq	r0, r0, fp, lsr #11
     a24:	02670002 	rsbeq	r0, r7, #2
     a28:	01020000 	mrseq	r0, (UNDEF: 2)
     a2c:	000d0efb 	strdeq	r0, [sp], -fp
     a30:	01010101 	tsteq	r1, r1, lsl #2
     a34:	01000000 	mrseq	r0, (UNDEF: 0)
     a38:	2f010000 	svccs	0x00010000
     a3c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     a40:	2f63762f 	svccs	0x0063762f
     a44:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     a48:	6f6f6c72 	svcvs	0x006f6c72
     a4c:	61722f70 	cmnvs	r2, r0, ror pc
     a50:	2f697073 	svccs	0x00697073
     a54:	70736152 	rsbsvc	r6, r3, r2, asr r1
     a58:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     a5c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     a60:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     a64:	534f5452 	movtpl	r5, #62546	; 0xf452
     a68:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     a6c:	4f545265 	svcmi	0x00545265
     a70:	6f532f53 	svcvs	0x00532f53
     a74:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     a78:	6f682f00 	svcvs	0x00682f00
     a7c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     a80:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     a84:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     a88:	2f706f6f 	svccs	0x00706f6f
     a8c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     a90:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     a94:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     a98:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     a9c:	2d362d69 	ldccs	13, cr2, [r6, #-420]!	; 0xfffffe5c
     aa0:	37313032 			; <UNDEFINED> instruction: 0x37313032
     aa4:	2d31712d 	ldfcss	f7, [r1, #-180]!	; 0xffffff4c
     aa8:	61647075 	smcvs	18181	; 0x4705
     aac:	6c2f6574 	cfstr32vs	mvfx6, [pc], #-464	; 8e4 <_start-0x771c>
     ab0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     ab4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     ab8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     abc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     ac0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     ac4:	332e362f 			; <UNDEFINED> instruction: 0x332e362f
     ac8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     acc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     ad0:	2f006564 	svccs	0x00006564
     ad4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     ad8:	2f63762f 	svccs	0x0063762f
     adc:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     ae0:	6f6f6c72 	svcvs	0x006f6c72
     ae4:	63672f70 	cmnvs	r7, #112, 30	; 0x1c0
     ae8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     aec:	6f6e2d6d 	svcvs	0x006e2d6d
     af0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     af4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
     af8:	30322d36 	eorscc	r2, r2, r6, lsr sp
     afc:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
     b00:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
     b04:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     b08:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     b0c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     b10:	61652d65 	cmnvs	r5, r5, ror #26
     b14:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     b18:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     b1c:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
     b20:	2f007379 	svccs	0x00007379
     b24:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     b28:	2f63762f 	svccs	0x0063762f
     b2c:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     b30:	6f6f6c72 	svcvs	0x006f6c72
     b34:	63672f70 	cmnvs	r7, #112, 30	; 0x1c0
     b38:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     b3c:	6f6e2d6d 	svcvs	0x006e2d6d
     b40:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     b44:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
     b48:	30322d36 	eorscc	r2, r2, r6, lsr sp
     b4c:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
     b50:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
     b54:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     b58:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     b5c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     b60:	61652d65 	cmnvs	r5, r5, ror #26
     b64:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     b68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     b6c:	2f006564 	svccs	0x00006564
     b70:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     b74:	2f63762f 	svccs	0x0063762f
     b78:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
     b7c:	6f6f6c72 	svcvs	0x006f6c72
     b80:	61722f70 	cmnvs	r2, r0, ror pc
     b84:	2f697073 	svccs	0x00697073
     b88:	70736152 	rsbsvc	r6, r3, r2, asr r1
     b8c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     b90:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     b94:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     b98:	534f5452 	movtpl	r5, #62546	; 0xf452
     b9c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     ba0:	4f545265 	svcmi	0x00545265
     ba4:	6f532f53 	svcvs	0x00532f53
     ba8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     bac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     bb0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     bb4:	6f682f00 	svcvs	0x00682f00
     bb8:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     bbc:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     bc0:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     bc4:	2f706f6f 	svccs	0x00706f6f
     bc8:	70736172 	rsbsvc	r6, r3, r2, ror r1
     bcc:	61522f69 	cmpvs	r2, r9, ror #30
     bd0:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     bd4:	50797272 	rsbspl	r7, r9, r2, ror r2
     bd8:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     bdc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     be0:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     be4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     be8:	2f534f54 	svccs	0x00534f54
     bec:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     bf0:	702f6563 	eorvc	r6, pc, r3, ror #10
     bf4:	6174726f 	cmnvs	r4, pc, ror #4
     bf8:	2f656c62 	svccs	0x00656c62
     bfc:	2f434347 	svccs	0x00434347
     c00:	70736152 	rsbsvc	r6, r3, r2, asr r1
     c04:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     c08:	00695079 	rsbeq	r5, r9, r9, ror r0
     c0c:	73617400 	cmnvc	r1, #0, 8
     c10:	632e736b 			; <UNDEFINED> instruction: 0x632e736b
     c14:	00000100 	andeq	r0, r0, r0, lsl #2
     c18:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     c1c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     c20:	00000200 	andeq	r0, r0, r0, lsl #4
     c24:	6b636f6c 	blvs	18dc9dc <__bss_end+0x18c6e8c>
     c28:	0300682e 	movweq	r6, #2094	; 0x82e
     c2c:	745f0000 	ldrbvc	r0, [pc], #-0	; c34 <_start-0x73cc>
     c30:	73657079 	cmnvc	r5, #121	; 0x79
     c34:	0300682e 	movweq	r6, #2094	; 0x82e
     c38:	65720000 	ldrbvs	r0, [r2, #-0]!
     c3c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     c40:	00030068 	andeq	r0, r3, r8, rrx
     c44:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     c48:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     c4c:	00040068 	andeq	r0, r4, r8, rrx
     c50:	6f727000 	svcvs	0x00727000
     c54:	6665646a 	strbtvs	r6, [r5], -sl, ror #8
     c58:	00682e73 	rsbeq	r2, r8, r3, ror lr
     c5c:	70000005 	andvc	r0, r0, r5
     c60:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
     c64:	6f726361 	svcvs	0x00726361
     c68:	0600682e 	streq	r6, [r0], -lr, lsr #16
     c6c:	72460000 	subvc	r0, r6, #0
     c70:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     c74:	682e534f 	stmdavs	lr!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
     c78:	00000500 	andeq	r0, r0, r0, lsl #10
     c7c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     c80:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c84:	61740000 	cmnvs	r4, r0
     c88:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     c8c:	00000500 	andeq	r0, r0, r0, lsl #10
     c90:	02050000 	andeq	r0, r5, #0
     c94:	00011ba0 	andeq	r1, r1, r0, lsr #23
     c98:	01039b03 	tsteq	r3, r3, lsl #22
     c9c:	a0d60903 	sbcsge	r0, r6, r3, lsl #18
     ca0:	d7661803 	strble	r1, [r6, -r3, lsl #16]!
     ca4:	03661403 	cmneq	r6, #50331648	; 0x3000000
     ca8:	6bddd60c 	blvs	ff7764e0 <_estack+0xf77664e0>
     cac:	869f306b 	ldrhi	r3, [pc], fp, rrx
     cb0:	84528768 	ldrbhi	r8, [r2], #-1896	; 0xfffff898
     cb4:	03bc6dbc 			; <UNDEFINED> instruction: 0x03bc6dbc
     cb8:	00a08209 	adceq	r8, r0, r9, lsl #4
     cbc:	06010402 	streq	r0, [r1], -r2, lsl #8
     cc0:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     cc4:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     cc8:	08060304 	stmdaeq	r6, {r2, r8, r9}
     ccc:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
     cd0:	4e4e4e03 	cdpmi	14, 4, cr4, cr14, cr3, {0}
     cd4:	33bc8668 			; <UNDEFINED> instruction: 0x33bc8668
     cd8:	8542082f 	strbhi	r0, [r2, #-2095]	; 0xfffff7d1
     cdc:	004ea032 	subeq	sl, lr, r2, lsr r0
     ce0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ce4:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     ce8:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     cec:	002e0404 	eoreq	r0, lr, r4, lsl #8
     cf0:	06040402 	streq	r0, [r4], -r2, lsl #8
     cf4:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
     cf8:	85848504 	strhi	r8, [r4, #1284]	; 0x504
     cfc:	31a2a2a3 			; <UNDEFINED> instruction: 0x31a2a2a3
     d00:	03316884 	teqeq	r1, #132, 16	; 0x840000
     d04:	4fa0f210 	svcmi	0x00a0f210
     d08:	00c1a031 	sbceq	sl, r1, r1, lsr r0
     d0c:	06010402 	streq	r0, [r1], -r2, lsl #8
     d10:	6ea0069e 	mcrvs	6, 5, r0, cr0, cr14, {4}
     d14:	01040200 	mrseq	r0, R12_usr
     d18:	a0069e06 	andge	r9, r6, r6, lsl #28
     d1c:	9f6d684f 	svcls	0x006d684f
     d20:	30684e4d 	rsbcc	r4, r8, sp, asr #28
     d24:	684d84a6 	stmdavs	sp, {r1, r2, r5, r7, sl, pc}^
     d28:	a32e0e03 			; <UNDEFINED> instruction: 0xa32e0e03
     d2c:	684f4c9f 	stmdavs	pc, {r0, r1, r2, r3, r4, r7, sl, fp, lr}^	; <UNPREDICTABLE>
     d30:	3286a630 	addcc	sl, r6, #48, 12	; 0x3000000
     d34:	01040200 	mrseq	r0, R12_usr
     d38:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     d3c:	00660204 	rsbeq	r0, r6, r4, lsl #4
     d40:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     d44:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     d48:	02002f06 	andeq	r2, r0, #6, 30
     d4c:	00680404 	rsbeq	r0, r8, r4, lsl #8
     d50:	30040402 	andcc	r0, r4, r2, lsl #8
     d54:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     d58:	4fa18a2f 	svcmi	0x00a18a2f
     d5c:	a0304d68 	eorsge	r4, r0, r8, ror #26
     d60:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
     d64:	00660601 	rsbeq	r0, r6, r1, lsl #12
     d68:	66020402 	strvs	r0, [r2], -r2, lsl #8
     d6c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     d70:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     d74:	0a030604 	beq	c258c <__bss_end+0xaca3c>
     d78:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     d7c:	84866a04 	strhi	r6, [r6], #2564	; 0xa04
     d80:	036a696c 	cmneq	sl, #108, 18	; 0x1b0000
     d84:	886a4a13 	stmdahi	sl!, {r0, r1, r4, r9, fp, lr}^
     d88:	00835d08 	addeq	r5, r3, r8, lsl #26
     d8c:	06010402 	streq	r0, [r1], -r2, lsl #8
     d90:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     d94:	08068203 	stmdaeq	r6, {r0, r1, r9, pc}
     d98:	2f326893 	svccs	0x00326893
     d9c:	a03285c2 	eorsge	r8, r2, r2, asr #11
     da0:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
     da4:	00660601 	rsbeq	r0, r6, r1, lsl #12
     da8:	66020402 	strvs	r0, [r2], -r2, lsl #8
     dac:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     db0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     db4:	00330604 	eorseq	r0, r3, r4, lsl #12
     db8:	85040402 	strhi	r0, [r4, #-1026]	; 0xfffffbfe
     dbc:	30a08584 	adccc	r8, r0, r4, lsl #11
     dc0:	15038568 	strne	r8, [r3, #-1384]	; 0xfffffa98
     dc4:	2e72032e 	cdpcs	3, 7, cr0, cr2, cr14, {1}
     dc8:	322a6ec0 	eorcc	r6, sl, #192, 28	; 0xc00
     dcc:	514b83de 	ldrdpl	r8, [fp, #-62]	; 0xffffffc2
     dd0:	4f84a4a1 	svcmi	0x0084a4a1
     dd4:	4e8ac22f 	cdpmi	2, 8, cr12, cr10, cr15, {1}
     dd8:	01040200 	mrseq	r0, R12_usr
     ddc:	a0066606 	andge	r6, r6, r6, lsl #12
     de0:	0083a430 	addeq	sl, r3, r0, lsr r4
     de4:	06010402 	streq	r0, [r1], -r2, lsl #8
     de8:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     dec:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     df0:	08060304 	stmdaeq	r6, {r2, r8, r9}
     df4:	3032da93 	mlascc	r2, r3, sl, sp
     df8:	83ba0903 			; <UNDEFINED> instruction: 0x83ba0903
     dfc:	a24c4c50 	subge	r4, ip, #80, 24	; 0x5000
     e00:	833d0884 	teqhi	sp, #132, 16	; 0x840000
     e04:	01040200 	mrseq	r0, R12_usr
     e08:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     e0c:	06820304 	streq	r0, [r2], r4, lsl #6
     e10:	2fa4b308 	svccs	0x00a4b308
     e14:	03f20d03 	mvnseq	r0, #3, 26	; 0xc0
     e18:	0d03660d 	stceq	6, cr6, [r3, #-52]	; 0xffffffcc
     e1c:	0a03ac08 	beq	ebe44 <__bss_end+0xd62f4>
     e20:	0367a066 	cmneq	r7, #102	; 0x66
     e24:	0d036609 	stceq	6, cr6, [r3, #-36]	; 0xffffffdc
     e28:	9f4eda2e 	svcls	0x004eda2e
     e2c:	4d6a2f67 	stclmi	15, cr2, [sl, #-412]!	; 0xfffffe64
     e30:	0368a29f 	cmneq	r8, #-268435447	; 0xf0000009
     e34:	a0304a0b 	eorsge	r4, r0, fp, lsl #20
     e38:	304e8484 	subcc	r8, lr, r4, lsl #9
     e3c:	00676767 	rsbeq	r6, r7, r7, ror #14
     e40:	06010402 	streq	r0, [r1], -r2, lsl #8
     e44:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     e48:	02006603 	andeq	r6, r0, #3145728	; 0x300000
     e4c:	08060304 	stmdaeq	r6, {r2, r8, r9}
     e50:	7503bc5c 	strvc	fp, [r3, #-3164]	; 0xfffff3a4
     e54:	8212034a 	andshi	r0, r2, #671088641	; 0x28000001
     e58:	9b2f3084 	blls	bcd070 <__bss_end+0xbb7520>
     e5c:	4f820b03 	svcmi	0x00820b03
     e60:	01040200 	mrseq	r0, R12_usr
     e64:	84066606 	strhi	r6, [r6], #-1542	; 0xfffff9fa
     e68:	3033674b 	eorscc	r6, r3, fp, asr #14
     e6c:	080e032f 	stmdaeq	lr, {r0, r1, r2, r3, r5, r8, r9}
     e70:	68306a58 	ldmdavs	r0!, {r3, r4, r6, r9, fp, sp, lr}
     e74:	6a862f30 	bvs	fe18cb3c <_estack+0xf617cb3c>
     e78:	a22f694b 	eorge	r6, pc, #1228800	; 0x12c000
     e7c:	ae034b4d 	vmlsge.f64	d4, d3, d13
     e80:	846c9e01 	strbthi	r9, [ip], #-3585	; 0xfffff1ff
     e84:	8209039f 	andhi	r0, r9, #2080374786	; 0x7c000002
     e88:	a0678367 	rsbge	r8, r7, r7, ror #6
     e8c:	879f8aa5 	ldrhi	r8, [pc, r5, lsr #21]
     e90:	0c040200 	sfmeq	f0, 4, [r4], {-0}
     e94:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     e98:	009e0204 	addseq	r0, lr, r4, lsl #4
     e9c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     ea0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     ea4:	02009008 	andeq	r9, r0, #8
     ea8:	00820504 	addeq	r0, r2, r4, lsl #10
     eac:	f2060402 	vshl.s8	d0, d2, d6
     eb0:	08040200 	stmdaeq	r4, {r9}
     eb4:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     eb8:	0200ba09 	andeq	fp, r0, #36864	; 0x9000
     ebc:	06820b04 	streq	r0, [r2], r4, lsl #22
     ec0:	1703b008 	strne	fp, [r3, -r8]
     ec4:	a296089e 	addsge	r0, r6, #10354688	; 0x9e0000
     ec8:	2f4f8668 	svccs	0x004f8668
     ecc:	878a2f67 	strhi	r2, [sl, r7, ror #30]
     ed0:	2f4f8668 	svccs	0x004f8668
     ed4:	8a2f3067 	bhi	bcd078 <__bss_end+0xbb7528>
     ed8:	4d8668a3 	stcmi	8, cr6, [r6, #652]	; 0x28c
     edc:	2f4dbe84 	svccs	0x004dbe84
     ee0:	03866788 	orreq	r6, r6, #136, 14	; 0x2200000
     ee4:	6e036633 	mcrvs	6, 0, r6, cr3, cr3, {1}
     ee8:	0d039b2e 	vstreq	d9, [r3, #-184]	; 0xffffff48
     eec:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
     ef0:	02060104 	andeq	r0, r6, #4, 2
     ef4:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     ef8:	069e0304 	ldreq	r0, [lr], r4, lsl #6
     efc:	032408a6 			; <UNDEFINED> instruction: 0x032408a6
     f00:	a3bf9e0b 			; <UNDEFINED> instruction: 0xa3bf9e0b
     f04:	ba12036b 	blt	481cb8 <__bss_end+0x46c168>
     f08:	9f2e7403 	svcls	0x002e7403
     f0c:	034a0b03 	movteq	r0, #43779	; 0xab03
     f10:	1103ba26 	tstne	r3, r6, lsr #20
     f14:	84848482 	strhi	r8, [r4], #1154	; 0x482
     f18:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     f1c:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     f20:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     f24:	a1b20806 			; <UNDEFINED> instruction: 0xa1b20806
     f28:	2f4d6adc 	svccs	0x004d6adc
     f2c:	838384f6 	orrhi	r8, r3, #-167772160	; 0xf6000000
     f30:	8434a4be 	ldrthi	sl, [r4], #-1214	; 0xfffffb42
     f34:	0402006b 	streq	r0, [r2], #-107	; 0xffffff95
     f38:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     f3c:	230868c0 	movwcs	r6, #35008	; 0x88c0
     f40:	6a4b3d08 	bvs	12d0368 <__bss_end+0x12ba818>
     f44:	a22f304d 	eorge	r3, pc, #77	; 0x4d
     f48:	3203674b 	andcc	r6, r3, #19660800	; 0x12c0000
     f4c:	1703899e 			; <UNDEFINED> instruction: 0x1703899e
     f50:	6703842e 	strvs	r8, [r3, -lr, lsr #8]
     f54:	4a3a032e 	bmi	e81c14 <__bss_end+0xe6c0c4>
     f58:	686abddb 	stmdavs	sl!, {r0, r1, r3, r4, r6, r7, r8, sl, fp, ip, sp, pc}^
     f5c:	86836d4d 	strhi	r6, [r3], sp, asr #26
     f60:	0a038369 	beq	e1d0c <__bss_end+0xcc1bc>
     f64:	66140366 	ldrvs	r0, [r4], -r6, ror #6
     f68:	69661703 	stmdbvs	r6!, {r0, r1, r8, r9, sl, ip}^
     f6c:	03040200 	movweq	r0, #16896	; 0x4200
     f70:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     f74:	001e0803 	andseq	r0, lr, r3, lsl #16
     f78:	06010402 	streq	r0, [r1], -r2, lsl #8
     f7c:	4b6b0666 	blmi	1ac291c <__bss_end+0x1aacdcc>
     f80:	50504e4b 	subspl	r4, r0, fp, asr #28
     f84:	5c086767 	stcpl	7, cr6, [r8], {103}	; 0x67
     f88:	d72f846d 	strle	r8, [pc, -sp, ror #8]!
     f8c:	83306a30 	teqhi	r0, #48, 20	; 0x30000
     f90:	30a09f83 	adccc	r9, r0, r3, lsl #31
     f94:	8484be4f 	strhi	fp, [r4], #3663	; 0xe4f
     f98:	f20f03a1 	vcgt.s8	d0, d31, d17
     f9c:	f72e7603 			; <UNDEFINED> instruction: 0xf72e7603
     fa0:	bff669a0 	svclt	0x00f669a0
     fa4:	02006b68 	andeq	r6, r0, #104, 22	; 0x1a000
     fa8:	66060104 	strvs	r0, [r6], -r4, lsl #2
     fac:	02040200 	andeq	r0, r4, #0, 4
     fb0:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     fb4:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     fb8:	4c060404 	cfstrsmi	mvf0, [r6], {4}
     fbc:	036b4b85 	cmneq	fp, #136192	; 0x21400
     fc0:	032fd60a 			; <UNDEFINED> instruction: 0x032fd60a
     fc4:	8a66019d 	bhi	1981640 <__bss_end+0x196baf0>
     fc8:	06024b83 	streq	r4, [r2], -r3, lsl #23
     fcc:	bc010100 	stflts	f0, [r1], {-0}
     fd0:	02000000 	andeq	r0, r0, #0
     fd4:	00006000 	andeq	r6, r0, r0
     fd8:	fb010200 	blx	417e2 <__bss_end+0x2bc92>
     fdc:	01000d0e 	tsteq	r0, lr, lsl #26
     fe0:	00010101 	andeq	r0, r1, r1, lsl #2
     fe4:	00010000 	andeq	r0, r1, r0
     fe8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     fec:	2f656d6f 	svccs	0x00656d6f
     ff0:	482f6376 	stmdami	pc!, {r1, r2, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
     ff4:	72657079 	rsbvc	r7, r5, #121	; 0x79
     ff8:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
     ffc:	7361722f 	cmnvc	r1, #-268435454	; 0xf0000002
    1000:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    1004:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1008:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    100c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1010:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1014:	2f534f54 	svccs	0x00534f54
    1018:	6f6d6544 	svcvs	0x006d6544
    101c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1020:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1024:	72690000 	rsbvc	r0, r9, #0
    1028:	00632e71 	rsbeq	r2, r3, r1, ror lr
    102c:	69000001 	stmdbvs	r0, {r0}
    1030:	682e7172 	stmdavs	lr!, {r1, r4, r5, r6, r8, ip, sp, lr}
    1034:	00000100 	andeq	r0, r0, r0, lsl #2
    1038:	02050000 	andeq	r0, r5, #0
    103c:	000134c0 	andeq	r3, r1, r0, asr #9
    1040:	9f011e03 	svcls	0x00011e03
    1044:	9f858531 	svcls	0x00858531
    1048:	73035b08 	movwvc	r5, #15112	; 0x3b08
    104c:	660f03d6 			; <UNDEFINED> instruction: 0x660f03d6
    1050:	674d4b8a 	strbvs	r4, [sp, -sl, lsl #23]
    1054:	67f567f5 			; <UNDEFINED> instruction: 0x67f567f5
    1058:	2f4b85d7 	svccs	0x004b85d7
    105c:	852f4b85 	strhi	r4, [pc, #-2949]!	; 4df <_start-0x7b21>
    1060:	832f67bb 			; <UNDEFINED> instruction: 0x832f67bb
    1064:	838530bb 	orrhi	r3, r5, #187	; 0xbb
    1068:	036767a0 	cmneq	r7, #160, 14	; 0x2800000
    106c:	7803ba0a 	stmdavc	r3, {r1, r3, r9, fp, ip, sp, pc}
    1070:	c067672e 	rsbgt	r6, r7, lr, lsr #14
    1074:	bc67672a 	stcllt	7, cr6, [r7], #-168	; 0xffffff58
    1078:	67a083bd 			; <UNDEFINED> instruction: 0x67a083bd
    107c:	d60a0367 	strle	r0, [sl], -r7, ror #6
    1080:	672e7803 	strvs	r7, [lr, -r3, lsl #16]!
    1084:	672adc67 	strvs	sp, [sl, -r7, ror #24]!
    1088:	0c02d867 	stceq	8, cr13, [r2], {103}	; 0x67
    108c:	c9010100 	stmdbgt	r1, {r8}
    1090:	02000000 	andeq	r0, r0, #0
    1094:	00006200 	andeq	r6, r0, r0, lsl #4
    1098:	fb010200 	blx	418a2 <__bss_end+0x2bd52>
    109c:	01000d0e 	tsteq	r0, lr, lsl #26
    10a0:	00010101 	andeq	r0, r1, r1, lsl #2
    10a4:	00010000 	andeq	r0, r1, r0
    10a8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    10ac:	2f656d6f 	svccs	0x00656d6f
    10b0:	482f6376 	stmdami	pc!, {r1, r2, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    10b4:	72657079 	rsbvc	r7, r5, #121	; 0x79
    10b8:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
    10bc:	7361722f 	cmnvc	r1, #-268435454	; 0xf0000002
    10c0:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    10c4:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    10c8:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    10cc:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    10d0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    10d4:	2f534f54 	svccs	0x00534f54
    10d8:	6f6d6544 	svcvs	0x006d6544
    10dc:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    10e0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    10e4:	70670000 	rsbvc	r0, r7, r0
    10e8:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    10ec:	00000100 	andeq	r0, r0, r0, lsl #2
    10f0:	6f697067 	svcvs	0x00697067
    10f4:	0100682e 	tsteq	r0, lr, lsr #16
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	38600205 	stmdacc	r0!, {r0, r2, r9}^
    1100:	26030001 	strcs	r0, [r3], -r1
    1104:	84a0a001 	strthi	sl, [r0], #1
    1108:	59083d08 	stmdbpl	r8, {r3, r8, sl, fp, ip, sp}
    110c:	bc833d08 	stclt	13, cr3, [r3], {8}
    1110:	9f6883bb 	svcls	0x006883bb
    1114:	0867a067 	stmdaeq	r7!, {r0, r1, r2, r5, r6, sp, pc}^
    1118:	3e082cb0 	mcrcc	12, 0, r2, cr8, cr0, {5}
    111c:	590883a0 	stmdbpl	r8, {r5, r7, r8, r9, pc}
    1120:	6883bba1 	stmvs	r3, {r0, r5, r7, r8, r9, fp, ip, sp, pc}
    1124:	ad085a08 	vstrge	s10, [r8, #-32]	; 0xffffffe0
    1128:	303d0830 	eorscc	r0, sp, r0, lsr r8
    112c:	0830ad08 	ldmdaeq	r0!, {r3, r8, sl, fp, sp, pc}
    1130:	ad08303d 	stcge	0, cr3, [r8, #-244]	; 0xffffff0c
    1134:	303d0830 	eorscc	r0, sp, r0, lsr r8
    1138:	bbbba130 	bllt	feee9600 <_estack+0xf6ed9600>
    113c:	085a0868 	ldmdaeq	sl, {r3, r5, r6, fp}^
    1140:	3d0830ad 	stccc	0, cr3, [r8, #-692]	; 0xfffffd4c
    1144:	30ad0830 	adccc	r0, sp, r0, lsr r8
    1148:	08303d08 	ldmdaeq	r0!, {r3, r8, sl, fp, ip, sp}
    114c:	3d0830ad 	stccc	0, cr3, [r8, #-692]	; 0xfffffd4c
    1150:	83a13030 			; <UNDEFINED> instruction: 0x83a13030
    1154:	029f689f 	addseq	r6, pc, #10420224	; 0x9f0000
    1158:	0101000a 	tsteq	r1, sl
    115c:	0000021a 	andeq	r0, r0, sl, lsl r2
    1160:	019e0002 	orrseq	r0, lr, r2
    1164:	01020000 	mrseq	r0, (UNDEF: 2)
    1168:	000d0efb 	strdeq	r0, [sp], -fp
    116c:	01010101 	tsteq	r1, r1, lsl #2
    1170:	01000000 	mrseq	r0, (UNDEF: 0)
    1174:	2f010000 	svccs	0x00010000
    1178:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    117c:	2f63762f 	svccs	0x0063762f
    1180:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
    1184:	6f6f6c72 	svcvs	0x006f6c72
    1188:	61722f70 	cmnvs	r2, r0, ror pc
    118c:	2f697073 	svccs	0x00697073
    1190:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1194:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1198:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    119c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    11a0:	534f5452 	movtpl	r5, #62546	; 0xf452
    11a4:	72462f2f 	subvc	r2, r6, #47, 30	; 0xbc
    11a8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    11ac:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
    11b0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    11b4:	6f702f65 	svcvs	0x00702f65
    11b8:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    11bc:	4d2f656c 	cfstr32mi	mvfx6, [pc, #-432]!	; 1014 <_start-0x6fec>
    11c0:	614d6d65 	cmpvs	sp, r5, ror #26
    11c4:	2f00676e 	svccs	0x0000676e
    11c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    11cc:	2f63762f 	svccs	0x0063762f
    11d0:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
    11d4:	6f6f6c72 	svcvs	0x006f6c72
    11d8:	63672f70 	cmnvs	r7, #112, 30	; 0x1c0
    11dc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    11e0:	6f6e2d6d 	svcvs	0x006e2d6d
    11e4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    11e8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    11ec:	30322d36 	eorscc	r2, r2, r6, lsr sp
    11f0:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
    11f4:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
    11f8:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    11fc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1200:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1204:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1208:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    120c:	61652d65 	cmnvs	r5, r5, ror #26
    1210:	362f6962 	strtcc	r6, [pc], -r2, ror #18
    1214:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1218:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    121c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1220:	6f682f00 	svcvs	0x00682f00
    1224:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1228:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    122c:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
    1230:	2f706f6f 	svccs	0x00706f6f
    1234:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    1238:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    123c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1240:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1244:	2d362d69 	ldccs	13, cr2, [r6, #-420]!	; 0xfffffe5c
    1248:	37313032 			; <UNDEFINED> instruction: 0x37313032
    124c:	2d31712d 	ldfcss	f7, [r1, #-180]!	; 0xffffff4c
    1250:	61647075 	smcvs	18181	; 0x4705
    1254:	612f6574 			; <UNDEFINED> instruction: 0x612f6574
    1258:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    125c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1260:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1264:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1268:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    126c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1270:	6f682f00 	svcvs	0x00682f00
    1274:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1278:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    127c:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
    1280:	2f706f6f 	svccs	0x00706f6f
    1284:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    1288:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    128c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1290:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1294:	2d362d69 	ldccs	13, cr2, [r6, #-420]!	; 0xfffffe5c
    1298:	37313032 			; <UNDEFINED> instruction: 0x37313032
    129c:	2d31712d 	ldfcss	f7, [r1, #-180]!	; 0xffffff4c
    12a0:	61647075 	smcvs	18181	; 0x4705
    12a4:	612f6574 			; <UNDEFINED> instruction: 0x612f6574
    12a8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    12ac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    12b0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    12b4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    12b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    12bc:	65680000 	strbvs	r0, [r8, #-0]!
    12c0:	345f7061 	ldrbcc	r7, [pc], #-97	; 12c8 <_start-0x6d38>
    12c4:	0100632e 	tsteq	r0, lr, lsr #6
    12c8:	74730000 	ldrbtvc	r0, [r3], #-0
    12cc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    12d0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    12d4:	6f6c0000 	svcvs	0x006c0000
    12d8:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    12dc:	00000300 	andeq	r0, r0, r0, lsl #6
    12e0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    12e4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    12e8:	00000300 	andeq	r0, r0, r0, lsl #6
    12ec:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    12f0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    12f4:	73000003 	movwvc	r0, #3
    12f8:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    12fc:	00682e62 	rsbeq	r2, r8, r2, ror #28
    1300:	00000004 	andeq	r0, r0, r4
    1304:	38020500 	stmdacc	r2, {r8, sl}
    1308:	0300013e 	movweq	r0, #318	; 0x13e
    130c:	84010192 	strhi	r0, [r1], #-402	; 0xfffffe6e
    1310:	3384324c 	orrcc	r3, r4, #76, 4	; 0xc0000004
    1314:	8685a268 	strhi	sl, [r5], r8, ror #4
    1318:	01040200 	mrseq	r0, R12_usr
    131c:	86066606 	strhi	r6, [r6], -r6, lsl #12
    1320:	4b30674b 	blmi	c1b054 <__bss_end+0xc05504>
    1324:	04020063 	streq	r0, [r2], #-99	; 0xffffff9d
    1328:	069e0601 	ldreq	r0, [lr], r1, lsl #12
    132c:	85a2a28a 	strhi	sl, [r2, #650]!	; 0x28a
    1330:	69bb86f7 	ldmibvs	fp!, {r0, r1, r2, r4, r5, r6, r7, r9, sl, pc}
    1334:	0c03da4d 			; <UNDEFINED> instruction: 0x0c03da4d
    1338:	da2fbc2e 	ble	bf03f8 <__bss_end+0xbda8a8>
    133c:	a16a4d83 	cmnge	sl, r3, lsl #27
    1340:	4cd7314c 	ldfmie	f3, [r7], {76}	; 0x4c
    1344:	4b4b8630 	blmi	12e2c0c <__bss_end+0x12cd0bc>
    1348:	03864ca2 	orreq	r4, r6, #41472	; 0xa200
    134c:	6a676609 	bvs	19dab78 <__bss_end+0x19c5028>
    1350:	83689f83 	cmnhi	r8, #524	; 0x20c
    1354:	859f4b86 	ldrhi	r4, [pc, #2950]	; 1ee2 <_start-0x611e>
    1358:	0088f6bb 			; <UNDEFINED> instruction: 0x0088f6bb
    135c:	06030402 	streq	r0, [r3], -r2, lsl #8
    1360:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1364:	a5066601 	strge	r6, [r6, #-1537]	; 0xfffff9ff
    1368:	4fd7d84b 	svcmi	0x00d7d84b
    136c:	f3bdf44b 	vcgt.f<illegal width 64>	<illegal reg q7.5>, <illegal reg q5.5>, #0
    1370:	8489a3be 	strhi	sl, [r9], #958	; 0x3be
    1374:	000c0268 	andeq	r0, ip, r8, ror #4
    1378:	016d0101 	cmneq	sp, r1, lsl #2
    137c:	00020000 	andeq	r0, r2, r0
    1380:	00000115 	andeq	r0, r0, r5, lsl r1
    1384:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1388:	0101000d 	tsteq	r1, sp
    138c:	00000101 	andeq	r0, r0, r1, lsl #2
    1390:	00000100 	andeq	r0, r0, r0, lsl #2
    1394:	6f682f01 	svcvs	0x00682f01
    1398:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    139c:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    13a0:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
    13a4:	2f706f6f 	svccs	0x00706f6f
    13a8:	70736172 	rsbsvc	r6, r3, r2, ror r1
    13ac:	61522f69 	cmpvs	r2, r9, ror #30
    13b0:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    13b4:	50797272 	rsbspl	r7, r9, r2, ror r2
    13b8:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    13bc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    13c0:	442f534f 	strtmi	r5, [pc], #-847	; 13c8 <_start-0x6c38>
    13c4:	006f6d65 	rsbeq	r6, pc, r5, ror #26
    13c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1314 <_start-0x6cec>
    13cc:	63762f65 	cmnvs	r6, #404	; 0x194
    13d0:	7079482f 	rsbsvc	r4, r9, pc, lsr #16
    13d4:	6f6c7265 	svcvs	0x006c7265
    13d8:	672f706f 	strvs	r7, [pc, -pc, rrx]!
    13dc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    13e0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    13e4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    13e8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    13ec:	322d362d 	eorcc	r3, sp, #47185920	; 0x2d00000
    13f0:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
    13f4:	752d3171 	strvc	r3, [sp, #-369]!	; 0xfffffe8f
    13f8:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
    13fc:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1400:	6f6e2d6d 	svcvs	0x006e2d6d
    1404:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1408:	2f696261 	svccs	0x00696261
    140c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1410:	2f656475 	svccs	0x00656475
    1414:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1418:	00656e69 	rsbeq	r6, r5, r9, ror #28
    141c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1368 <_start-0x6c98>
    1420:	63762f65 	cmnvs	r6, #404	; 0x194
    1424:	7079482f 	rsbsvc	r4, r9, pc, lsr #16
    1428:	6f6c7265 	svcvs	0x006c7265
    142c:	672f706f 	strvs	r7, [pc, -pc, rrx]!
    1430:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    1434:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1438:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    143c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1440:	322d362d 	eorcc	r3, sp, #47185920	; 0x2d00000
    1444:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
    1448:	752d3171 	strvc	r3, [sp, #-369]!	; 0xfffffe8f
    144c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
    1450:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1454:	6f6e2d6d 	svcvs	0x006e2d6d
    1458:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    145c:	2f696261 	svccs	0x00696261
    1460:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1464:	2f656475 	svccs	0x00656475
    1468:	00737973 	rsbseq	r7, r3, r3, ror r9
    146c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    1470:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1474:	5f000001 	svcpl	0x00000001
    1478:	61666564 	cmnvs	r6, r4, ror #10
    147c:	5f746c75 	svcpl	0x00746c75
    1480:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1484:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1488:	5f000002 	svcpl	0x00000002
    148c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1490:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1494:	00000300 	andeq	r0, r0, r0, lsl #6
    1498:	02050000 	andeq	r0, r5, #0
    149c:	000142fc 	strdeq	r4, [r1], -ip
    14a0:	83011403 	movwhi	r1, #5123	; 0x1403
    14a4:	01040200 	mrseq	r0, R12_usr
    14a8:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    14ac:	02006701 	andeq	r6, r0, #262144	; 0x40000
    14b0:	004b0104 	subeq	r0, fp, r4, lsl #2
    14b4:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    14b8:	01040200 	mrseq	r0, R12_usr
    14bc:	00843647 	addeq	r3, r4, r7, asr #12
    14c0:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    14c4:	01040200 	mrseq	r0, R12_usr
    14c8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    14cc:	02004b01 	andeq	r4, r0, #1024	; 0x400
    14d0:	00670104 	rsbeq	r0, r7, r4, lsl #2
    14d4:	47010402 	strmi	r0, [r1, -r2, lsl #8]
    14d8:	682e1203 	stmdavs	lr!, {r0, r1, r9, ip}
    14dc:	08910869 	ldmeq	r1, {r0, r3, r5, r6, fp}
    14e0:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    14e4:	0a023401 	beq	8e4f0 <__bss_end+0x789a0>
    14e8:	Address 0x00000000000014e8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <__bss_end+0x18c4a18>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	76727000 	ldrbtvc	r7, [r2], -r0
      1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
      20:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
      24:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      28:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
      2c:	00747075 	rsbseq	r7, r4, r5, ror r0
      30:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff7c <_estack+0xf7feff7c>
      34:	63762f65 	cmnvs	r6, #404	; 0x194
      38:	7079482f 	rsbsvc	r4, r9, pc, lsr #16
      3c:	6f6c7265 	svcvs	0x006c7265
      40:	722f706f 	eorvc	r7, pc, #111	; 0x6f
      44:	69707361 	ldmdbvs	r0!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      48:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
      4c:	72656270 	rsbvc	r6, r5, #112, 4
      50:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      54:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
      58:	4f545265 	svcmi	0x00545265
      5c:	72462f53 	subvc	r2, r6, #332	; 0x14c
      60:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
      64:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
      68:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
      6c:	6f702f65 	svcvs	0x00702f65
      70:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
      74:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
      78:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
      7c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      80:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      84:	702f6950 	eorvc	r6, pc, r0, asr r9	; <UNPREDICTABLE>
      88:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
      8c:	50700063 	rsbspl	r0, r0, r3, rrx
      90:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
      94:	4f787000 	svcmi	0x00787000
      98:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      9c:	546c616e 	strbtpl	r6, [ip], #-366	; 0xfffffe92
      a0:	5f00534f 	svcpl	0x0000534f
      a4:	324d4342 	subcc	r4, sp, #134217729	; 0x8000001
      a8:	5f353338 	svcpl	0x00353338
      ac:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
      b0:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
      b4:	73005347 	movwvc	r5, #839	; 0x347
      b8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
      bc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      c0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      c4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      c8:	64700074 	ldrbtvs	r0, [r0], #-116	; 0xffffff8c
      cc:	4b534154 	blmi	14d0624 <__bss_end+0x14baad4>
      d0:	444f435f 	strbmi	r4, [pc], #-863	; d8 <_start-0x7f28>
      d4:	4e470045 	cdpmi	0, 4, cr0, cr7, cr5, {2}
      d8:	31432055 	qdaddcc	r2, r5, r3
      dc:	2e362031 	mrccs	0, 1, r2, cr6, cr1, {1}
      e0:	20312e33 	eorscs	r2, r1, r3, lsr lr
      e4:	37313032 			; <UNDEFINED> instruction: 0x37313032
      e8:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
      ec:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
      f0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
      f4:	5b202965 	blpl	80a690 <__bss_end+0x7f4b40>
      f8:	2f4d5241 	svccs	0x004d5241
      fc:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
     100:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
     104:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
     108:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     10c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     110:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     114:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     118:	31353534 	teqcc	r5, r4, lsr r5
     11c:	2d205d32 	stccs	13, cr5, [r0, #-200]!	; 0xffffff38
     120:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     124:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     128:	7a36766d 	bvc	d9dae4 <__bss_end+0xd87f94>
     12c:	616d2d20 	cmnvs	sp, r0, lsr #26
     130:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     134:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     138:	2d207a36 	vstmdbcs	r0!, {s14-s67}
     13c:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     140:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     144:	7a36766d 	bvc	d9db00 <__bss_end+0xd87fb0>
     148:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     14c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     150:	50760067 	rsbspl	r0, r6, r7, rrx
     154:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     158:	6353646e 	cmpvs	r3, #1845493760	; 0x6e000000
     15c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     160:	0072656c 	rsbseq	r6, r2, ip, ror #10
     164:	63695476 	cmnvs	r9, #1979711488	; 0x76000000
     168:	5253496b 	subspl	r4, r3, #1753088	; 0x1ac000
     16c:	7a697300 	bvc	1a5cd74 <__bss_end+0x1a47224>
     170:	70797465 	rsbsvc	r7, r9, r5, ror #8
     174:	6f6c0065 	svcvs	0x006c0065
     178:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     17c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     180:	00746e69 	rsbseq	r6, r4, r9, ror #28
     184:	61507670 	cmpvs	r0, r0, ror r6
     188:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     18c:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     190:	65527000 	ldrbvs	r7, [r2, #-0]
     194:	70007367 	andvc	r7, r0, r7, ror #6
     198:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     19c:	7453664f 	ldrbvc	r6, [r3], #-1615	; 0xfffff9b1
     1a0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     1a4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     1a8:	756f6420 	strbvc	r6, [pc, #-1056]!	; fffffd90 <_estack+0xf7fefd90>
     1ac:	00656c62 	rsbeq	r6, r5, r2, ror #24
     1b0:	726f5078 	rsbvc	r5, pc, #120	; 0x78
     1b4:	61745374 	cmnvs	r4, r4, ror r3
     1b8:	63537472 	cmpvs	r3, #1912602624	; 0x72000000
     1bc:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     1c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     1c4:	6f507870 	svcvs	0x00507870
     1c8:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
     1cc:	61697469 	cmnvs	r9, r9, ror #8
     1d0:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
     1d4:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     1d8:	6c75006b 	ldclvs	0, cr0, [r5], #-428	; 0xfffffe54
     1dc:	706d6f43 	rsbvc	r6, sp, r3, asr #30
     1e0:	4d657261 	sfmmi	f7, 2, [r5, #-388]!	; 0xfffffe7c
     1e4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
     1e8:	6f507600 	svcvs	0x00507600
     1ec:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     1f0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
     1f4:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     1f8:	006c6163 	rsbeq	r6, ip, r3, ror #2
     1fc:	72436c75 	subvc	r6, r3, #29952	; 0x7500
     200:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     204:	654e6c61 	strbvs	r6, [lr, #-3169]	; 0xfffff39f
     208:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
     20c:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
     210:	2f656d6f 	svccs	0x00656d6f
     214:	482f6376 	stmdami	pc!, {r1, r2, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
     218:	72657079 	rsbvc	r7, r5, #121	; 0x79
     21c:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
     220:	7361722f 	cmnvc	r1, #-268435454	; 0xf0000002
     224:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     228:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     22c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     230:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     234:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     238:	2f534f54 	svccs	0x00534f54
     23c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     240:	534f5452 	movtpl	r5, #62546	; 0xf452
     244:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffff1d <_estack+0xf7feff1d>
     248:	2f656372 	svccs	0x00656372
     24c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     250:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     254:	4343472f 	movtmi	r4, #14127	; 0x372f
     258:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     25c:	72656270 	rsbvc	r6, r5, #112, 4
     260:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     264:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     268:	72736974 	rsbsvc	r6, r3, #116, 18	; 0x1d0000
     26c:	7600632e 	strvc	r6, [r0], -lr, lsr #6
     270:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     274:	74697845 	strbtvc	r7, [r9], #-2117	; 0xfffff7bb
     278:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     27c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     280:	6f507600 	svcvs	0x00507600
     284:	53497472 	movtpl	r7, #38002	; 0x9472
     288:	61745352 	cmnvs	r4, r2, asr r3
     28c:	69467472 	stmdbvs	r6, {r1, r4, r5, r6, sl, ip, sp, lr}^
     290:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     294:	006b7361 	rsbeq	r7, fp, r1, ror #6
     298:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     29c:	65695974 	strbvs	r5, [r9, #-2420]!	; 0xfffff68c
     2a0:	7250646c 	subsvc	r6, r0, #108, 8	; 0x6c000000
     2a4:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     2a8:	00726f73 	rsbseq	r6, r2, r3, ror pc
     2ac:	65724676 	ldrbvs	r4, [r2, #-1654]!	; 0xfffff98a
     2b0:	4f545265 	svcmi	0x00545265
     2b4:	53495f53 	movtpl	r5, #40787	; 0x9f53
     2b8:	5f670052 	svcpl	0x00670052
     2bc:	61745362 	cmnvs	r4, r2, ror #6
     2c0:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
     2c4:	43787000 	cmnmi	r8, #0
     2c8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     2cc:	4354746e 	cmpmi	r4, #1845493760	; 0x6e000000
     2d0:	78700042 	ldmdavc	r0!, {r1, r6}^
     2d4:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     2d8:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     2dc:	43524364 	cmpmi	r2, #100, 6	; 0x90000001
     2e0:	78700042 	ldmdavc	r0!, {r1, r6}^
     2e4:	706d6554 	rsbvc	r6, sp, r4, asr r5
     2e8:	6f437600 	svcvs	0x00437600
     2ec:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     2f0:	41656e69 	cmnmi	r5, r9, ror #28
     2f4:	6f546464 	svcvs	0x00546464
     2f8:	616c6544 	cmnvs	ip, r4, asr #10
     2fc:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
     300:	00747369 	rsbseq	r7, r4, r9, ror #6
     304:	6f437670 	svcvs	0x00437670
     308:	6961746e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     30c:	0072656e 	rsbseq	r6, r2, lr, ror #10
     310:	6f437870 	svcvs	0x00437870
     314:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     318:	46656e69 	strbtmi	r6, [r5], -r9, ror #28
     31c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     320:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     324:	73615078 	cmnvc	r1, #120	; 0x78
     328:	54646573 	strbtpl	r6, [r4], #-1395	; 0xfffffa8d
     32c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     330:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     334:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     338:	74497800 	strbvc	r7, [r9], #-2048	; 0xfffff800
     33c:	61566d65 	cmpvs	r6, r5, ror #26
     340:	0065756c 	rsbeq	r7, r5, ip, ror #10
     344:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     348:	6f54736b 	svcvs	0x0054736b
     34c:	616c6544 	cmnvs	ip, r4, asr #10
     350:	4c780079 	ldclmi	0, cr0, [r8], #-484	; 0xfffffe1c
     354:	45747369 	ldrbmi	r7, [r4, #-873]!	; 0xfffffc97
     358:	7000646e 	andvc	r6, r0, lr, ror #8
     35c:	6e774f76 	mrcvs	15, 3, r4, cr7, cr6, {3}
     360:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     364:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
     368:	6b636954 	blvs	18da8c0 <__bss_end+0x18c4d70>
     36c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     370:	43780074 	cmnmi	r8, #116	; 0x74
     374:	756f526f 	strbvc	r5, [pc, #-623]!	; 10d <_start-0x7ef3>
     378:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     37c:	6b636954 	blvs	18da8d4 <__bss_end+0x18c4d84>
     380:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     384:	4c780074 	ldclmi	0, cr0, [r8], #-464	; 0xfffffe30
     388:	5f545349 	svcpl	0x00545349
     38c:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     390:	43787000 	cmnmi	r8, #0
     394:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     398:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     39c:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     3a0:	6f43706f 	svcvs	0x0043706f
     3a4:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     3a8:	52656e69 	rsbpl	r6, r5, #1680	; 0x690
     3ac:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     3b0:	6f697250 	svcvs	0x00697250
     3b4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3b8:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
     3bc:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     3c0:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     3c4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3c8:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     3cc:	00317473 	eorseq	r7, r1, r3, ror r4
     3d0:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     3d4:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     3d8:	6f526f43 	svcvs	0x00526f43
     3dc:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3e0:	73694c65 	cmnvc	r9, #25856	; 0x6500
     3e4:	63003274 	movwvs	r3, #628	; 0x274
     3e8:	5243726f 	subpl	r7, r3, #-268435450	; 0xf0000006
     3ec:	70004243 	andvc	r4, r0, r3, asr #4
     3f0:	43524378 	cmpmi	r2, #120, 6	; 0xe0000001
     3f4:	78700042 	ldmdavc	r0!, {r1, r6}^
     3f8:	76657250 			; <UNDEFINED> instruction: 0x76657250
     3fc:	73756f69 	cmnvc	r5, #420	; 0x1a4
     400:	43787000 	cmnmi	r8, #0
     404:	756f526f 	strbvc	r5, [pc, #-623]!	; 19d <_start-0x7e63>
     408:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     40c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     410:	726f6300 	rsbvc	r6, pc, #0, 6
     414:	6f526f43 	svcvs	0x00526f43
     418:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     41c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     420:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 258 <_start-0x7da8>
     424:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     428:	4378006b 	cmnmi	r8, #107	; 0x6b
     42c:	756f526f 	strbvc	r5, [pc, #-623]!	; 1c5 <_start-0x7e3b>
     430:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     434:	6f6d6552 	svcvs	0x006d6552
     438:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
     43c:	76456d6f 	strbvc	r6, [r5], -pc, ror #26
     440:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
     444:	00747369 	rsbseq	r7, r4, r9, ror #6
     448:	65527870 	ldrbvs	r7, [r2, #-2160]	; 0xfffff790
     44c:	43796461 	cmnmi	r9, #1627389952	; 0x61000000
     450:	756f526f 	strbvc	r5, [pc, #-623]!	; 1e9 <_start-0x7e17>
     454:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     458:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     45c:	78750073 	ldmdavc	r5!, {r0, r1, r4, r5, r6}^
     460:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     464:	4d780078 	ldclmi	0, cr0, [r8, #-480]!	; 0xfffffe20
     468:	4c696e69 	stclmi	14, cr6, [r9], #-420	; 0xfffffe5c
     46c:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     470:	006d6574 	rsbeq	r6, sp, r4, ror r5
     474:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     478:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     47c:	7243656e 	subvc	r6, r3, #461373440	; 0x1b800000
     480:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     484:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
     488:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     48c:	49664f72 	stmdbmi	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, lr}^
     490:	736d6574 	cmnvc	sp, #116, 10	; 0x1d000000
     494:	43787000 	cmnmi	r8, #0
     498:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     49c:	6f43746e 	svcvs	0x0043746e
     4a0:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     4a4:	00656e69 	rsbeq	r6, r5, r9, ror #28
     4a8:	72507875 	subsvc	r7, r0, #7667712	; 0x750000
     4ac:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     4b0:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     4b4:	6f526f43 	svcvs	0x00526f43
     4b8:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     4bc:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
     4c0:	00656c64 	rsbeq	r6, r5, r4, ror #24
     4c4:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
     4c8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     4cc:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     4d0:	526f4379 	rsbpl	r4, pc, #-469762047	; 0xe4000001
     4d4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4d8:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     4dc:	70007473 	andvc	r7, r0, r3, ror r4
     4e0:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     4e4:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     4e8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     4ec:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     4f0:	4c780074 	ldclmi	0, cr0, [r8], #-464	; 0xfffffe30
     4f4:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     4f8:	006d6574 	rsbeq	r6, sp, r4, ror r5
     4fc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 448 <_start-0x7bb8>
     500:	63762f65 	cmnvs	r6, #404	; 0x194
     504:	7079482f 	rsbsvc	r4, r9, pc, lsr #16
     508:	6f6c7265 	svcvs	0x006c7265
     50c:	722f706f 	eorvc	r7, pc, #111	; 0x6f
     510:	69707361 	ldmdbvs	r0!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     514:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     518:	72656270 	rsbvc	r6, r5, #112, 4
     51c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     520:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     524:	4f545265 	svcmi	0x00545265
     528:	72462f53 	subvc	r2, r6, #332	; 0x14c
     52c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     530:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     534:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     538:	72632f65 	rsbvc	r2, r3, #404	; 0x194
     53c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     540:	632e656e 			; <UNDEFINED> instruction: 0x632e656e
     544:	6f437600 	svcvs	0x00437600
     548:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     54c:	53656e69 	cmnpl	r5, #1680	; 0x690
     550:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     554:	00656c75 	rsbeq	r6, r5, r5, ror ip
     558:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     55c:	576f5465 	strbpl	r5, [pc, -r5, ror #8]!
     560:	00656b61 	rsbeq	r6, r5, r1, ror #22
     564:	6f437870 	svcvs	0x00437870
     568:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     56c:	00656e69 	rsbeq	r6, r5, r9, ror #28
     570:	74537875 	ldrbvc	r7, [r3], #-2165	; 0xfffff78b
     574:	00657461 	rsbeq	r7, r5, r1, ror #8
     578:	764f7870 			; <UNDEFINED> instruction: 0x764f7870
     57c:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
     580:	6544776f 	strbvs	r7, [r4, #-1903]	; 0xfffff891
     584:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     588:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     58c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     590:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     594:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     598:	494e494d 	stmdbmi	lr, {r0, r2, r3, r6, r8, fp, lr}^
     59c:	53494c5f 	movtpl	r4, #40031	; 0x9c5f
     5a0:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
     5a4:	78004d45 	stmdavc	r0, {r0, r2, r6, r8, sl, fp, lr}
     5a8:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
     5ac:	44787000 	ldrbtmi	r7, [r8], #-0
     5b0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     5b4:	6f436465 	svcvs	0x00436465
     5b8:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     5bc:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     5c0:	00747369 	rsbseq	r7, r4, r9, ror #6
     5c4:	43767270 	cmnmi	r6, #112, 4
     5c8:	6b636568 	blvs	18d9b70 <__bss_end+0x18c4020>
     5cc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     5d0:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     5d4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     5d8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     5dc:	65477800 	strbvs	r7, [r7, #-2048]	; 0xfffff800
     5e0:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     5e4:	73694c63 	cmnvc	r9, #25344	; 0x6300
     5e8:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     5ec:	7270006d 	rsbsvc	r0, r0, #109	; 0x6d
     5f0:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
     5f4:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     5f8:	43657369 	cmnmi	r5, #-1543503871	; 0xa4000001
     5fc:	756f526f 	strbvc	r5, [pc, #-623]!	; 395 <_start-0x7c6b>
     600:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     604:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     608:	45780073 	ldrbmi	r0, [r8, #-115]!	; 0xffffff8d
     60c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     610:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     614:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     618:	76727000 	ldrbtvc	r7, [r2], -r0
     61c:	63656843 	cmnvs	r5, #4390912	; 0x430000
     620:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
     624:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     628:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     62c:	43726300 	cmnmi	r2, #0, 6
     630:	554f524f 	strbpl	r5, [pc, #-591]	; 3e9 <_start-0x7c17>
     634:	454e4954 	strbmi	r4, [lr, #-2388]	; 0xfffff6ac
     638:	444f435f 	strbmi	r4, [pc], #-863	; 640 <_start-0x79c0>
     63c:	645f0045 	ldrbvs	r0, [pc], #-69	; 644 <_start-0x79bc>
     640:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     644:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     648:	735f0065 	cmpvc	pc, #101	; 0x65
     64c:	00657a69 	rsbeq	r7, r5, r9, ror #20
     650:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
     654:	00383464 	eorseq	r3, r8, r4, ror #8
     658:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     65c:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     660:	5f007963 	svcpl	0x00007963
     664:	61746164 	cmnvs	r4, r4, ror #2
     668:	63775f00 	cmnvs	r7, #0, 30
     66c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 4ac <_start-0x7b54>
     670:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
     674:	00657461 	rsbeq	r7, r5, r1, ror #8
     678:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
     67c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 4bc <_start-0x7b44>
     680:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
     684:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     688:	6f682f00 	svcvs	0x00682f00
     68c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     690:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     694:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
     698:	2f706f6f 	svccs	0x00706f6f
     69c:	70736172 	rsbsvc	r6, r3, r2, ror r1
     6a0:	61522f69 	cmpvs	r2, r9, ror #30
     6a4:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     6a8:	50797272 	rsbspl	r7, r9, r2, ror r2
     6ac:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     6b0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     6b4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     6b8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     6bc:	2f534f54 	svccs	0x00534f54
     6c0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     6c4:	6c2f6563 	cfstr32vs	mvfx6, [pc], #-396	; 540 <_start-0x7ac0>
     6c8:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     6cc:	6f6c0063 	svcvs	0x006c0063
     6d0:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     6d4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     6d8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     6dc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     6e0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     6e4:	626c5f00 	rsbvs	r5, ip, #0, 30
     6e8:	7a697366 	bvc	1a5d488 <__bss_end+0x1a47938>
     6ec:	5f5f0065 	svcpl	0x005f0065
     6f0:	61636f6c 	cmnvs	r3, ip, ror #30
     6f4:	745f656c 	ldrbvc	r6, [pc], #-1388	; 6fc <_start-0x7904>
     6f8:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     6fc:	694c7765 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     700:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     704:	5f006d65 	svcpl	0x00006d65
     708:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     70c:	5f63776f 	svcpl	0x0063776f
     710:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     714:	5f5f0065 	svcpl	0x005f0065
     718:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
     71c:	5f006365 	svcpl	0x00006365
     720:	66756275 			; <UNDEFINED> instruction: 0x66756275
     724:	61625f00 	cmnvs	r2, r0, lsl #30
     728:	5f006573 	svcpl	0x00006573
     72c:	5f6d745f 	svcpl	0x006d745f
     730:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
     734:	735f5f00 	cmpvc	pc, #0, 30
     738:	6f5f0066 	svcvs	0x005f0066
     73c:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     740:	615f7469 	cmpvs	pc, r9, ror #8
     744:	00736772 	rsbseq	r6, r3, r2, ror r7
     748:	6f6f635f 	svcvs	0x006f635f
     74c:	0065696b 	rsbeq	r6, r5, fp, ror #18
     750:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
     754:	0065756c 	rsbeq	r7, r5, ip, ror #10
     758:	616c665f 	cmnvs	ip, pc, asr r6
     75c:	5f007367 	svcpl	0x00007367
     760:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
     764:	5f006178 	svcpl	0x00006178
     768:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     76c:	625f006e 	subsvs	r0, pc, #110	; 0x6e
     770:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     774:	5f00657a 	svcpl	0x0000657a
     778:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     77c:	5f006675 	svcpl	0x00006675
     780:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     784:	70007465 	andvc	r7, r0, r5, ror #8
     788:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     78c:	4c76006d 	ldclmi	0, cr0, [r6], #-436	; 0xfffffe4c
     790:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     794:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
     798:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
     79c:	626d5f00 	rsbvs	r5, sp, #0, 30
     7a0:	6f747273 	svcvs	0x00747273
     7a4:	5f736377 	svcpl	0x00736377
     7a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     7ac:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 620 <_start-0x79e0>
     7b0:	656c7262 	strbvs	r7, [ip, #-610]!	; 0xfffffd9e
     7b4:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
     7b8:	00657461 	rsbeq	r7, r5, r1, ror #8
     7bc:	616e665f 	cmnvs	lr, pc, asr r6
     7c0:	00736772 	rsbseq	r6, r3, r2, ror r7
     7c4:	736e665f 	cmnvc	lr, #99614720	; 0x5f00000
     7c8:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     7cc:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     7d0:	61697469 	cmnvs	r9, r9, ror #8
     7d4:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
     7d8:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     7dc:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     7e0:	5f006e67 	svcpl	0x00006e67
     7e4:	636f6c66 	cmnvs	pc, #26112	; 0x6600
     7e8:	00745f6b 	rsbseq	r5, r4, fp, ror #30
     7ec:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     7f0:	00727265 	rsbseq	r7, r2, r5, ror #4
     7f4:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
     7f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     7fc:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
     800:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
     804:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
     808:	5f006d61 	svcpl	0x00006d61
     80c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     810:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     814:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     818:	5f006b5f 	svcpl	0x00006b5f
     81c:	006d745f 	rsbeq	r7, sp, pc, asr r4
     820:	63775f5f 	cmnvs	r7, #380	; 0x17c
     824:	5f006268 	svcpl	0x00006268
     828:	6f647473 	svcvs	0x00647473
     82c:	5f007475 	svcpl	0x00007475
     830:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
     834:	5f006e65 	svcpl	0x00006e65
     838:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
     83c:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
     840:	0073626f 	rsbseq	r6, r3, pc, ror #4
     844:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
     848:	30746978 	rsbscc	r6, r4, r8, ror r9
     84c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     850:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
     854:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     858:	73615f00 	cmnvc	r1, #0, 30
     85c:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
     860:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
     864:	725f0066 	subsvc	r0, pc, #102	; 0x66
     868:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     86c:	5f5f0074 	svcpl	0x005f0074
     870:	00686377 	rsbeq	r6, r8, r7, ror r3
     874:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
     878:	00545f4b 	subseq	r5, r4, fp, asr #30
     87c:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
     880:	7600745f 			; <UNDEFINED> instruction: 0x7600745f
     884:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     888:	6f6d6552 	svcvs	0x006d6552
     88c:	5f006576 	svcpl	0x00006576
     890:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     894:	5f003273 	svcpl	0x00003273
     898:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
     89c:	5f5f0065 	svcpl	0x005f0065
     8a0:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     8a4:	00726165 	rsbseq	r6, r2, r5, ror #2
     8a8:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     8ac:	6f546d65 	svcvs	0x00546d65
     8b0:	6f6d6552 	svcvs	0x006d6552
     8b4:	5f006576 	svcpl	0x00006576
     8b8:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     8bc:	5f5f0066 	svcpl	0x005f0066
     8c0:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 6f8 <_start-0x7908>
     8c4:	5f006e6f 	svcpl	0x00006e6f
     8c8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
     8cc:	73007469 	movwvc	r7, #1129	; 0x469
     8d0:	706f6275 	rsbvc	r6, pc, r5, ror r2	; <UNPREDICTABLE>
     8d4:	67726174 			; <UNDEFINED> instruction: 0x67726174
     8d8:	735f5f00 	cmpvc	pc, #0, 30
     8dc:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
     8e0:	0074696e 	rsbseq	r6, r4, lr, ror #18
     8e4:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     8e8:	5f00745f 	svcpl	0x0000745f
     8ec:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     8f0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     8f4:	63775f00 	cmnvs	r7, #0, 30
     8f8:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     8fc:	6174735f 	cmnvs	r4, pc, asr r3
     900:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
     904:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     908:	2064656e 	rsbcs	r6, r4, lr, ror #10
     90c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     910:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
     914:	685f0077 	ldmdavs	pc, {r0, r1, r2, r4, r5, r6}^	; <UNPREDICTABLE>
     918:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     91c:	73006f6e 	movwvc	r6, #3950	; 0xf6e
     920:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     924:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     928:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 930 <_start-0x76d0>
     92c:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
     930:	5f007961 	svcpl	0x00007961
     934:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
     938:	695f0066 	ldmdbvs	pc, {r1, r2, r5, r6}^	; <UNPREDICTABLE>
     93c:	0073626f 	rsbseq	r6, r3, pc, ror #4
     940:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     944:	5f00454c 	svcpl	0x0000454c
     948:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
     94c:	5f657461 	svcpl	0x00657461
     950:	5f5f0074 	svcpl	0x005f0074
     954:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
     958:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 84c <_start-0x77b4>
     95c:	61747362 	cmnvs	r4, r2, ror #6
     960:	5f006574 	svcpl	0x00006574
     964:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     968:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     96c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 7a4 <_start-0x785c>
     970:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
     974:	6174735f 	cmnvs	r4, pc, asr r3
     978:	5f006574 	svcpl	0x00006574
     97c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     980:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     984:	6f6c5f00 	svcvs	0x006c5f00
     988:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     98c:	635f5f00 	cmpvs	pc, #0, 30
     990:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     994:	5f007075 	svcpl	0x00007075
     998:	70736e75 	rsbsvc	r6, r3, r5, ror lr
     99c:	66696365 	strbtvs	r6, [r9], -r5, ror #6
     9a0:	5f646569 	svcpl	0x00646569
     9a4:	61636f6c 	cmnvs	r3, ip, ror #30
     9a8:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     9ac:	006f666e 	rsbeq	r6, pc, lr, ror #12
     9b0:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     9b4:	00736477 	rsbseq	r6, r3, r7, ror r4
     9b8:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
     9bc:	5f00746e 	svcpl	0x0000746e
     9c0:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     9c4:	635f5f00 	cmpvs	pc, #0, 30
     9c8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     9cc:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
     9d0:	006b636f 	rsbeq	r6, fp, pc, ror #6
     9d4:	61765f5f 	cmnvs	r6, pc, asr pc
     9d8:	0065756c 	rsbeq	r7, r5, ip, ror #10
     9dc:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     9e0:	4c76006b 	ldclmi	0, cr0, [r6], #-428	; 0xfffffe54
     9e4:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     9e8:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
     9ec:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     9f0:	5f736f70 	svcpl	0x00736f70
     9f4:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     9f8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     9fc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a04 <_start-0x75fc>
     a00:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     a04:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; 854 <_start-0x77ac>
     a08:	00746c75 	rsbseq	r6, r4, r5, ror ip
     a0c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
     a10:	5f6b6f74 	svcpl	0x006b6f74
     a14:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     a18:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     a1c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     a20:	615f0073 	cmpvs	pc, r3, ror r0	; <UNPREDICTABLE>
     a24:	70006464 	andvc	r6, r0, r4, ror #8
     a28:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     a2c:	6f746172 	svcvs	0x00746172
     a30:	5f5f0072 	svcpl	0x005f0072
     a34:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
     a38:	675f0067 	ldrbvs	r0, [pc, -r7, rrx]
     a3c:	61647465 	cmnvs	r4, r5, ror #8
     a40:	655f6574 	ldrbvs	r6, [pc, #-1396]	; 4d4 <_start-0x7b2c>
     a44:	5f007272 	svcpl	0x00007272
     a48:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
     a4c:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     a50:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
     a54:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
     a58:	755f0072 	ldrbvc	r0, [pc, #-114]	; 9ee <_start-0x7612>
     a5c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     a60:	61725f64 	cmnvs	r2, r4, ror #30
     a64:	7600646e 	strvc	r6, [r0], -lr, ror #8
     a68:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     a6c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a70:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     a74:	5f006573 	svcpl	0x00006573
     a78:	00736477 	rsbseq	r6, r3, r7, ror r4
     a7c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     a80:	6164775f 	cmnvs	r4, pc, asr r7
     a84:	675f0079 			; <UNDEFINED> instruction: 0x675f0079
     a88:	0065756c 	rsbeq	r7, r5, ip, ror #10
     a8c:	616d6e5f 	cmnvs	sp, pc, asr lr
     a90:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     a94:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     a98:	625f6134 	subsvs	r6, pc, #52, 2
     a9c:	5f006675 	svcpl	0x00006675
     aa0:	5f676973 	svcpl	0x00676973
     aa4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     aa8:	61567800 	cmpvs	r6, r0, lsl #16
     aac:	4f65756c 	svcmi	0x0065756c
     ab0:	736e4966 	cmnvc	lr, #1671168	; 0x198000
     ab4:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     ab8:	5f006e6f 	svcpl	0x00006e6f
     abc:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
     ac0:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     ac4:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     ac8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ad0 <_start-0x7530>
     acc:	73695f6d 	cmnvc	r9, #436	; 0x1b4
     ad0:	00747364 	rsbseq	r7, r4, r4, ror #6
     ad4:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     ad8:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
     adc:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     ae0:	5f006675 	svcpl	0x00006675
     ae4:	736f6c63 	cmnvc	pc, #25344	; 0x6300
     ae8:	725f0065 	subsvc	r0, pc, #101	; 0x65
     aec:	5f003834 	svcpl	0x00003834
     af0:	6f74626d 	svcvs	0x0074626d
     af4:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
     af8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     afc:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
     b00:	5f5f0073 	svcpl	0x005f0073
     b04:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 93c <_start-0x76c4>
     b08:	00796164 	rsbseq	r6, r9, r4, ror #2
     b0c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     b10:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     b14:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     b18:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     b1c:	6f724664 	svcvs	0x00724664
     b20:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     b24:	51637500 	cmnpl	r3, r0, lsl #10
     b28:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     b2c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     b30:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     b34:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     b38:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     b3c:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
     b40:	72466c6c 	subvc	r6, r6, #108, 24	; 0x6c00
     b44:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     b48:	78750052 	ldmdavc	r5!, {r1, r4, r6}^
     b4c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     b50:	73654d65 	cmnvc	r5, #6464	; 0x1940
     b54:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     b58:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     b5c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     b60:	51787000 	cmnpl	r8, r0
     b64:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     b68:	7a697300 	bvc	1a5d770 <__bss_end+0x1a47c20>
     b6c:	00745f65 	rsbseq	r5, r4, r5, ror #30
     b70:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     b74:	73496575 	movtvc	r6, #38261	; 0x9575
     b78:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     b7c:	706d4565 	rsbvc	r4, sp, r5, ror #10
     b80:	72467974 	subvc	r7, r6, #116, 18	; 0x1d0000
     b84:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     b88:	54780052 	ldrbtpl	r0, [r8], #-82	; 0xffffffae
     b8c:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
     b90:	5176006b 	cmnpl	r6, fp, rrx
     b94:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     b98:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
     b9c:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     ba0:	6b736154 	blvs	1cd90f8 <__bss_end+0x1cc35a8>
     ba4:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     ba8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     bac:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
     bb0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     bb4:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     bb8:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     bbc:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
     bc0:	516f5461 	cmnpl	pc, r1, ror #8
     bc4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     bc8:	49547800 	ldmdbmi	r4, {fp, ip, sp, lr}^
     bcc:	4f5f454d 	svcmi	0x005f454d
     bd0:	78005455 	stmdavc	r0, {r0, r2, r4, r6, sl, ip, lr}
     bd4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     bd8:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     bdc:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     be0:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     be4:	00657669 	rsbeq	r7, r5, r9, ror #12
     be8:	65526370 	ldrbvs	r6, [r2, #-880]	; 0xfffffc90
     bec:	72466461 	subvc	r6, r6, #1627389952	; 0x61000000
     bf0:	70006d6f 	andvc	r6, r0, pc, ror #26
     bf4:	73497672 	movtvc	r7, #38514	; 0x9672
     bf8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     bfc:	6c754665 	ldclvs	6, cr4, [r5], #-404	; 0xfffffe6c
     c00:	4f78006c 	svcmi	0x0078006c
     c04:	66726576 			; <UNDEFINED> instruction: 0x66726576
     c08:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
     c0c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     c10:	53787500 	cmnpl	r8, #0, 10
     c14:	64657661 	strbtvs	r7, [r5], #-1633	; 0xfffff99f
     c18:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     c1c:	70757272 	rsbsvc	r7, r5, r2, ror r2
     c20:	61745374 	cmnvs	r4, r4, ror r3
     c24:	00737574 	rsbseq	r7, r3, r4, ror r5
     c28:	65486370 	strbvs	r6, [r8, #-880]	; 0xfffffc90
     c2c:	78006461 	stmdavc	r0, {r0, r5, r6, sl, sp, lr}
     c30:	7473754a 	ldrbtvc	r7, [r3], #-1354	; 0xfffffab6
     c34:	6b656550 	blvs	195a17c <__bss_end+0x194462c>
     c38:	00676e69 	rsbeq	r6, r7, r9, ror #28
     c3c:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     c40:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     c44:	6d456575 	cfstr64vs	mvdx6, [r5, #-468]	; 0xfffffe2c
     c48:	00797470 	rsbseq	r7, r9, r0, ror r4
     c4c:	65527875 	ldrbvs	r7, [r2, #-2165]	; 0xfffff78b
     c50:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
     c54:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     c58:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     c5c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     c60:	65536369 	ldrbvs	r6, [r3, #-873]	; 0xfffffc97
     c64:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     c68:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     c6c:	5474754f 	ldrbtpl	r7, [r4], #-1359	; 0xfffffab1
     c70:	00657079 	rsbeq	r7, r5, r9, ror r0
     c74:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; bc0 <_start-0x7440>
     c78:	63762f65 	cmnvs	r6, #404	; 0x194
     c7c:	7079482f 	rsbsvc	r4, r9, pc, lsr #16
     c80:	6f6c7265 	svcvs	0x006c7265
     c84:	722f706f 	eorvc	r7, pc, #111	; 0x6f
     c88:	69707361 	ldmdbvs	r0!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     c8c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     c90:	72656270 	rsbvc	r6, r5, #112, 4
     c94:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     c98:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     c9c:	4f545265 	svcmi	0x00545265
     ca0:	72462f53 	subvc	r2, r6, #332	; 0x14c
     ca4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     ca8:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     cac:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     cb0:	75712f65 	ldrbvc	r2, [r1, #-3941]!	; 0xfffff09b
     cb4:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
     cb8:	51780063 	cmnpl	r8, r3, rrx
     cbc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     cc0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     cc4:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     cc8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     ccc:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
     cd0:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     cd4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; bc4 <_start-0x743c>
     cd8:	00525349 	subseq	r5, r2, r9, asr #6
     cdc:	654c7875 	strbvs	r7, [ip, #-2165]	; 0xfffff78b
     ce0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     ce4:	4f637000 	svcmi	0x00637000
     ce8:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     cec:	526c616e 	rsbpl	r6, ip, #-2147483621	; 0x8000001b
     cf0:	50646165 	rsbpl	r6, r4, r5, ror #2
     cf4:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     cf8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     cfc:	69487870 	stmdbvs	r8, {r4, r5, r6, fp, ip, sp, lr}^
     d00:	72656867 	rsbvc	r6, r5, #6750208	; 0x670000
     d04:	6f697250 	svcvs	0x00697250
     d08:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     d0c:	6b736154 	blvs	1cd9264 <__bss_end+0x1cc3714>
     d10:	656b6f57 	strbvs	r6, [fp, #-3927]!	; 0xfffff0a9
     d14:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
     d18:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     d1c:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
     d20:	00687467 	rsbeq	r7, r8, r7, ror #8
     d24:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
     d28:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     d2c:	61737365 	cmnvs	r3, r5, ror #6
     d30:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     d34:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     d38:	7246676e 	subvc	r6, r6, #28835840	; 0x1b80000
     d3c:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     d40:	76700052 			; <UNDEFINED> instruction: 0x76700052
     d44:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     d48:	75516f54 	ldrbvc	r6, [r1, #-3924]	; 0xfffff0ac
     d4c:	00657565 	rsbeq	r7, r5, r5, ror #10
     d50:	45555178 	ldrbmi	r5, [r5, #-376]	; 0xfffffe88
     d54:	78004555 	stmdavc	r0, {r0, r2, r4, r6, r8, sl, lr}
     d58:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
     d5c:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
     d60:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
     d64:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0xffffff00
     d68:	65446575 	strbvs	r6, [r4, #-1397]	; 0xfffffa8b
     d6c:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
     d70:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     d74:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     d78:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0xfffff89b
     d7c:	00657565 	rsbeq	r7, r5, r5, ror #10
     d80:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     d84:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     d88:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     d8c:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
     d90:	00657461 	rsbeq	r7, r5, r1, ror #8
     d94:	43767270 	cmnmi	r6, #112, 4
     d98:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     d9c:	46617461 	strbtmi	r7, [r1], -r1, ror #8
     da0:	516d6f72 	smcpl	55026	; 0xd6f2
     da4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     da8:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
     dac:	61737365 	cmnvs	r3, r5, ror #6
     db0:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     db4:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     db8:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     dbc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     dc0:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     dc4:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     dc8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     dcc:	43780074 	cmnmi	r8, #116	; 0x74
     dd0:	5079706f 	rsbspl	r7, r9, pc, rrx
     dd4:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     dd8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     ddc:	55767270 	ldrbpl	r7, [r6, #-624]!	; 0xfffffd90
     de0:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     de4:	6575516b 	ldrbvs	r5, [r5, #-363]!	; 0xfffffe95
     de8:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     dec:	6f4c7852 	svcvs	0x004c7852
     df0:	70006b63 	andvc	r6, r0, r3, ror #22
     df4:	69615463 	stmdbvs	r1!, {r0, r1, r5, r6, sl, ip, lr}^
     df8:	5078006c 	rsbspl	r0, r8, ip, rrx
     dfc:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     e00:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     e04:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     e08:	6157736b 	cmpvs	r7, fp, ror #6
     e0c:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     e10:	536f5467 	cmnpl	pc, #1728053248	; 0x67000000
     e14:	00646e65 	rsbeq	r6, r4, r5, ror #28
     e18:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     e1c:	69536575 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     e20:	6e49657a 	mcrvs	5, 2, r6, cr9, cr10, {3}
     e24:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
     e28:	63700073 	cmnvs	r0, #115	; 0x73
     e2c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
     e30:	006f5465 	rsbeq	r5, pc, r5, ror #8
     e34:	74497875 	strbvc	r7, [r9], #-2165	; 0xfffff78b
     e38:	69536d65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
     e3c:	7800657a 	stmdavc	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
     e40:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     e44:	6e456e4f 	cdpvs	14, 4, cr6, cr5, cr15, {2}
     e48:	69726574 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     e4c:	7000676e 	andvc	r6, r0, lr, ror #14
     e50:	66754276 			; <UNDEFINED> instruction: 0x66754276
     e54:	00726566 	rsbseq	r6, r2, r6, ror #10
     e58:	61546370 	cmpvs	r4, r0, ror r3
     e5c:	614e6b73 	hvcvs	59059	; 0xe6b3
     e60:	7600656d 	strvc	r6, [r0], -sp, ror #10
     e64:	6b736154 	blvs	1cd93bc <__bss_end+0x1cc386c>
     e68:	53646e45 	cmnpl	r4, #1104	; 0x450
     e6c:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     e70:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     e74:	6b737400 	blvs	1cdde7c <__bss_end+0x1cc832c>
     e78:	6b736154 	blvs	1cd93d0 <__bss_end+0x1cc3880>
     e7c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     e80:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     e84:	6b636f6c 	blvs	18dcc3c <__bss_end+0x18c70ec>
     e88:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     e8c:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     e90:	754e7465 	strbvc	r7, [lr, #-1125]	; 0xfffffb9b
     e94:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     e98:	6154664f 	cmpvs	r4, pc, asr #12
     e9c:	00736b73 	rsbseq	r6, r3, r3, ror fp
     ea0:	6f547875 	svcvs	0x00547875
     ea4:	61655270 	smcvs	21792	; 0x5520
     ea8:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     eac:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     eb0:	75007974 	strvc	r7, [r0, #-2420]	; 0xfffff68c
     eb4:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     eb8:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
     ebc:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     ec0:	74654779 	strbtvc	r4, [r5], #-1913	; 0xfffff887
     ec4:	63537800 	cmpvs	r3, #0, 16
     ec8:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     ecc:	5272656c 	rsbspl	r6, r2, #108, 10	; 0x1b000000
     ed0:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     ed4:	7000676e 	andvc	r6, r0, lr, ror #14
     ed8:	61655278 	smcvs	21800	; 0x5528
     edc:	61547964 	cmpvs	r4, r4, ror #18
     ee0:	4c736b73 			; <UNDEFINED> instruction: 0x4c736b73
     ee4:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     ee8:	506c7500 	rsbpl	r7, ip, r0, lsl #10
     eec:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     ef0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     ef4:	54760073 	ldrbtpl	r0, [r6], #-115	; 0xffffff8d
     ef8:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     efc:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     f00:	754f656d 	strbvc	r6, [pc, #-1389]	; 99b <_start-0x7665>
     f04:	61745374 	cmnvs	r4, r4, ror r3
     f08:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
     f0c:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     f10:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     f14:	6f697250 	svcvs	0x00697250
     f18:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f1c:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
     f20:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     f24:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
     f28:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     f2c:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
     f30:	616c6544 	cmnvs	ip, r4, asr #10
     f34:	54646579 	strbtpl	r6, [r4], #-1401	; 0xfffffa87
     f38:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
     f3c:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     f40:	61547600 	cmpvs	r4, r0, lsl #12
     f44:	65536b73 	ldrbvs	r6, [r3, #-2931]	; 0xfffff48d
     f48:	70704174 	rsbsvc	r4, r0, r4, ror r1
     f4c:	6163696c 	cmnvs	r3, ip, ror #18
     f50:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     f54:	6b736154 	blvs	1cd94ac <__bss_end+0x1cc395c>
     f58:	00676154 	rsbeq	r6, r7, r4, asr r1
     f5c:	694d7875 	stmdbvs	sp, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
     f60:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     f64:	6b636954 	blvs	18db4bc <__bss_end+0x18c596c>
     f68:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     f6c:	6b736154 	blvs	1cd94c4 <__bss_end+0x1cc3974>
     f70:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
     f74:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
     f78:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
     f7c:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
     f80:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     f84:	00646572 	rsbeq	r6, r4, r2, ror r5
     f88:	63537875 	cmpvs	r3, #7667712	; 0x750000
     f8c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     f90:	5372656c 	cmnpl	r2, #108, 10	; 0x1b000000
     f94:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     f98:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     f9c:	55787000 	ldrbpl	r7, [r8, #-0]!
     fa0:	6f6c626e 	svcvs	0x006c626e
     fa4:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     fa8:	00424354 	subeq	r4, r2, r4, asr r3
     fac:	41767270 	cmnmi	r6, r0, ror r2
     fb0:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     fb4:	54657461 	strbtpl	r7, [r5], #-1121	; 0xfffffb9f
     fb8:	6e414243 	cdpvs	2, 4, cr4, cr1, cr3, {2}
     fbc:	61745364 	cmnvs	r4, r4, ror #6
     fc0:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     fc4:	70737553 	rsbsvc	r7, r3, r3, asr r5
     fc8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     fcc:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
     fd0:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     fd4:	54780074 	ldrbtpl	r0, [r8], #-116	; 0xffffff8c
     fd8:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     fdc:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fe0:	6f436b63 	svcvs	0x00436b63
     fe4:	46746e75 			; <UNDEFINED> instruction: 0x46746e75
     fe8:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     fec:	78005253 	stmdavc	r0, {r0, r1, r4, r6, r9, ip, lr}
     ff0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     ff4:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     ff8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     ffc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1000:	61547800 	cmpvs	r4, r0, lsl #16
    1004:	73496b73 	movtvc	r6, #39795	; 0x9b73
    1008:	6b736154 	blvs	1cd9560 <__bss_end+0x1cc3a10>
    100c:	70737553 	rsbsvc	r7, r3, r3, asr r5
    1010:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    1014:	72700064 	rsbsvc	r0, r0, #100	; 0x64
    1018:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    101c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1020:	54657369 	strbtpl	r7, [r5], #-873	; 0xfffffc97
    1024:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    1028:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
    102c:	61547800 	cmpvs	r4, r0, lsl #16
    1030:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    1034:	70704174 	rsbsvc	r4, r0, r4, ror r1
    1038:	6163696c 	cmnvs	r3, ip, ror #18
    103c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1040:	6b736154 	blvs	1cd9598 <__bss_end+0x1cc3a48>
    1044:	00676154 	rsbeq	r6, r7, r4, asr r1
    1048:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    104c:	6157736b 	cmpvs	r7, fp, ror #6
    1050:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    1054:	72655467 	rsbvc	r5, r5, #1728053248	; 0x67000000
    1058:	616e696d 	cmnvs	lr, sp, ror #18
    105c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1060:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
    1064:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
    1068:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
    106c:	54760064 	ldrbtpl	r0, [r6], #-100	; 0xffffff9c
    1070:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
    1074:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
    1078:	6c41646e 	cfstrdvs	mvd6, [r1], {110}	; 0x6e
    107c:	5478006c 	ldrbtpl	r0, [r8], #-108	; 0xffffff94
    1080:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1084:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1088:	73740065 	cmnvc	r4, #101	; 0x65
    108c:	4243546b 	submi	r5, r3, #1795162112	; 0x6b000000
    1090:	54787000 	ldrbtpl	r7, [r8], #-0
    1094:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    1098:	61576f54 	cmpvs	r7, r4, asr pc
    109c:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
    10a0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    10a4:	6544736b 	strbvs	r7, [r4, #-875]	; 0xfffffc95
    10a8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    10ac:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
    10b0:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    10b4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    10b8:	4f787000 	svcmi	0x00787000
    10bc:	66726576 			; <UNDEFINED> instruction: 0x66726576
    10c0:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xfffff094
    10c4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    10c8:	61546465 	cmpvs	r4, r5, ror #8
    10cc:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    10d0:	76007473 			; <UNDEFINED> instruction: 0x76007473
    10d4:	6b736154 	blvs	1cd962c <__bss_end+0x1cc3adc>
    10d8:	63616c50 	cmnvs	r1, #80, 24	; 0x5000
    10dc:	456e4f65 	strbmi	r4, [lr, #-3941]!	; 0xfffff09b
    10e0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    10e4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    10e8:	61547600 	cmpvs	r4, r0, lsl #12
    10ec:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
    10f0:	0079616c 	rsbseq	r6, r9, ip, ror #2
    10f4:	61547870 	cmpvs	r4, r0, ror r8
    10f8:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    10fc:	6b736154 	blvs	1cd9654 <__bss_end+0x1cc3b04>
    1100:	6f6d6552 	svcvs	0x006d6552
    1104:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    1108:	76456d6f 	strbvc	r6, [r5], -pc, ror #26
    110c:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    1110:	00747369 	rsbseq	r7, r4, r9, ror #6
    1114:	6f685378 	svcvs	0x00685378
    1118:	44646c75 	strbtmi	r6, [r4], #-3189	; 0xfffff38b
    111c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1120:	76727000 	ldrbtvc	r7, [r2], -r0
    1124:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    1128:	6b736154 	blvs	1cd9680 <__bss_end+0x1cc3b30>
    112c:	54647000 	strbtpl	r7, [r4], #-0
    1130:	5f4b5341 	svcpl	0x004b5341
    1134:	4b4f4f48 	blmi	13d4e5c <__bss_end+0x13bf30c>
    1138:	444f435f 	strbmi	r4, [pc], #-863	; 1140 <_start-0x6ec0>
    113c:	4c780045 	ldclmi	0, cr0, [r8], #-276	; 0xfffffeec
    1140:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    1144:	706d4573 	rsbvc	r4, sp, r3, ror r5
    1148:	70007974 	andvc	r7, r0, r4, ror r9
    114c:	6f6f4878 	svcvs	0x006f4878
    1150:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
    1154:	6f697463 	svcvs	0x00697463
    1158:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
    115c:	5477654e 	ldrbtpl	r6, [r7], #-1358	; 0xfffffab2
    1160:	70004243 	andvc	r4, r0, r3, asr #4
    1164:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1168:	646f436b 	strbtvs	r4, [pc], #-875	; 1170 <_start-0x6e90>
    116c:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
    1170:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    1174:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1178:	6f436b63 	svcvs	0x00436b63
    117c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1180:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
    1184:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    1188:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
    118c:	6b636f6c 	blvs	18dcf44 <__bss_end+0x18c73f4>
    1190:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1194:	53737500 	cmnpl	r3, #0, 10
    1198:	6b636174 	blvs	18d9770 <__bss_end+0x18c3c20>
    119c:	74706544 	ldrbtvc	r6, [r0], #-1348	; 0xfffffabc
    11a0:	54780068 	ldrbtpl	r0, [r8], #-104	; 0xffffff98
    11a4:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    11a8:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
    11ac:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
    11b0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    11b4:	70007974 	andvc	r7, r0, r4, ror r9
    11b8:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	; 0xfffffe74
    11bc:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    11c0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    11c4:	0074754f 	rsbseq	r7, r4, pc, asr #10
    11c8:	61547875 	cmpvs	r4, r5, ror r8
    11cc:	754e6b73 	strbvc	r6, [lr, #-2931]	; 0xfffff48d
    11d0:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    11d4:	61547600 	cmpvs	r4, r0, lsl #12
    11d8:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    11dc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    11e0:	65537974 	ldrbvs	r7, [r3, #-2420]	; 0xfffff68c
    11e4:	4d780074 	ldclmi	0, cr0, [r8, #-464]!	; 0xfffffe30
    11e8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    11ec:	67655279 			; <UNDEFINED> instruction: 0x67655279
    11f0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    11f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1140 <_start-0x6ec0>
    11f8:	63762f65 	cmnvs	r6, #404	; 0x194
    11fc:	7079482f 	rsbsvc	r4, r9, pc, lsr #16
    1200:	6f6c7265 	svcvs	0x006c7265
    1204:	722f706f 	eorvc	r7, pc, #111	; 0x6f
    1208:	69707361 	ldmdbvs	r0!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    120c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1210:	72656270 	rsbvc	r6, r5, #112, 4
    1214:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1218:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    121c:	4f545265 	svcmi	0x00545265
    1220:	72462f53 	subvc	r2, r6, #332	; 0x14c
    1224:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1228:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
    122c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1230:	61742f65 	cmnvs	r4, r5, ror #30
    1234:	2e736b73 	vmovcs.s8	r6, d3[7]
    1238:	4d780063 	ldclmi	0, cr0, [r8, #-396]!	; 0xfffffe74
    123c:	524f4d45 	subpl	r4, pc, #4416	; 0x1140
    1240:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
    1244:	4e4f4947 	vmlsmi.f16	s9, s30, s14	; <UNPREDICTABLE>
    1248:	6f682f00 	svcvs	0x00682f00
    124c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1250:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1254:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
    1258:	2f706f6f 	svccs	0x00706f6f
    125c:	70736172 	rsbsvc	r6, r3, r2, ror r1
    1260:	61522f69 	cmpvs	r2, r9, ror #30
    1264:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1268:	50797272 	rsbspl	r7, r9, r2, ror r2
    126c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1270:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1274:	7600534f 	strvc	r5, [r0], -pc, asr #6
    1278:	6b736154 	blvs	1cd97d0 <__bss_end+0x1cc3c80>
    127c:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
    1280:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    1284:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    1288:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    128c:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    1290:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1294:	54657369 	strbtpl	r7, [r5], #-873	; 0xfffffc97
    1298:	61564243 	cmpvs	r6, r3, asr #4
    129c:	62616972 	rsbvs	r6, r1, #1867776	; 0x1c8000
    12a0:	0073656c 	rsbseq	r6, r3, ip, ror #10
    12a4:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    12a8:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    12ac:	00657465 	rsbeq	r7, r5, r5, ror #8
    12b0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    12b4:	6c61436b 	stclvs	3, cr4, [r1], #-428	; 0xfffffe54
    12b8:	7070416c 	rsbsvc	r4, r0, ip, ror #2
    12bc:	6163696c 	cmnvs	r3, ip, ror #18
    12c0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    12c4:	6b736154 	blvs	1cd981c <__bss_end+0x1cc3ccc>
    12c8:	6b6f6f48 	blvs	1bdcff0 <__bss_end+0x1bc74a0>
    12cc:	61547800 	cmpvs	r4, r0, lsl #16
    12d0:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    12d4:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    12d8:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
    12dc:	00657461 	rsbeq	r7, r5, r1, ror #8
    12e0:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    12e4:	6977536b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6, r8, r9, ip, lr}^
    12e8:	43686374 	cmnmi	r8, #116, 6	; 0xd0000001
    12ec:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    12f0:	78007478 	stmdavc	r0, {r3, r4, r5, r6, sl, ip, sp, lr}
    12f4:	4f6d754e 	svcmi	0x006d754e
    12f8:	65764f66 	ldrbvs	r4, [r6, #-3942]!	; 0xfffff09a
    12fc:	6f6c6672 	svcvs	0x006c6672
    1300:	70007377 	andvc	r7, r0, r7, ror r3
    1304:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1308:	6761546b 	strbvs	r5, [r1, -fp, ror #8]!
    130c:	53787000 	cmnpl	r8, #0
    1310:	6b636174 	blvs	18d98e8 <__bss_end+0x18c3d98>
    1314:	61547800 	cmpvs	r4, r0, lsl #16
    1318:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    131c:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    1320:	006c6c41 	rsbeq	r6, ip, r1, asr #24
    1324:	65447870 	strbvs	r7, [r4, #-2160]	; 0xfffff790
    1328:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    132c:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    1330:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    1334:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    1338:	55706f54 	ldrbpl	r6, [r0, #-3924]!	; 0xfffff0ac
    133c:	50646573 	rsbpl	r6, r4, r3, ror r5
    1340:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1344:	00797469 	rsbseq	r7, r9, r9, ror #8
    1348:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    134c:	6568436b 	strbvs	r4, [r8, #-875]!	; 0xfffffc95
    1350:	6f466b63 	svcvs	0x00466b63
    1354:	6d695472 	cfstrdvs	mvd5, [r9, #-456]!	; 0xfffffe38
    1358:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
    135c:	54787000 	ldrbtpl	r7, [r8], #-0
    1360:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    1364:	7375536f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1368:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    136c:	50787000 	rsbspl	r7, r8, r0
    1370:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1374:	5773756f 	ldrbpl	r7, [r3, -pc, ror #10]!
    1378:	54656b61 	strbtpl	r6, [r5], #-2913	; 0xfffff49f
    137c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1380:	61547870 	cmpvs	r4, r0, ror r8
    1384:	6f546b73 	svcvs	0x00546b73
    1388:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    138c:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    1390:	6e654c6c 	cdpvs	12, 6, cr4, cr5, cr12, {3}
    1394:	49687467 	stmdbmi	r8!, {r0, r1, r2, r5, r6, sl, ip, sp, lr}^
    1398:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0xfffffd92
    139c:	78007365 	stmdavc	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    13a0:	6b736154 	blvs	1cd98f8 <__bss_end+0x1cc3da8>
    13a4:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    13a8:	7246656d 	subvc	r6, r6, #457179136	; 0x1b400000
    13ac:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    13b0:	54760052 	ldrbtpl	r0, [r6], #-82	; 0xffffffae
    13b4:	4d6b7361 	stclmi	3, cr7, [fp, #-388]!	; 0xfffffe7c
    13b8:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
    13bc:	65695964 	strbvs	r5, [r9, #-2404]!	; 0xfffff69c
    13c0:	7000646c 	andvc	r6, r0, ip, ror #8
    13c4:	74537875 	ldrbvc	r7, [r3], #-2165	; 0xfffff78b
    13c8:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    13cc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    13d0:	54760072 	ldrbtpl	r0, [r6], #-114	; 0xffffff8e
    13d4:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
    13d8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    13dc:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    13e0:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    13e4:	72700072 	rsbsvc	r0, r0, #114	; 0x72
    13e8:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
    13ec:	61546b63 	cmpvs	r4, r3, ror #22
    13f0:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
    13f4:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    13f8:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0xfffff892
    13fc:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    1400:	6f697461 	svcvs	0x00697461
    1404:	7670006e 	ldrbtvc	r0, [r0], -lr, rrx
    1408:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    140c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1410:	00737365 	rsbseq	r7, r3, r5, ror #6
    1414:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1418:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    141c:	6e557961 	vnmlavs.f16	s15, s10, s3	; <UNPREDICTABLE>
    1420:	006c6974 	rsbeq	r6, ip, r4, ror r9
    1424:	44767270 	ldrbtmi	r7, [r6], #-624	; 0xfffffd90
    1428:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    142c:	42435465 	submi	r5, r3, #1694498816	; 0x65000000
    1430:	61547600 	cmpvs	r4, r0, lsl #12
    1434:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    1438:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    143c:	41780064 	cmnmi	r8, r4, rrx
    1440:	6165726c 	cmnvs	r5, ip, ror #4
    1444:	69597964 	ldmdbvs	r9, {r2, r5, r6, r8, fp, ip, sp, lr}^
    1448:	65646c65 	strbvs	r6, [r4, #-3173]!	; 0xfffff39b
    144c:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
    1450:	61726150 	cmnvs	r2, r0, asr r1
    1454:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
    1458:	52780072 	rsbspl	r0, r8, #114	; 0x72
    145c:	6f696765 	svcvs	0x00696765
    1460:	7000736e 	andvc	r7, r0, lr, ror #6
    1464:	64417672 	strbvs	r7, [r1], #-1650	; 0xfffff98e
    1468:	72754364 	rsbsvc	r4, r5, #100, 6	; 0x90000001
    146c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1470:	6b736154 	blvs	1cd99c8 <__bss_end+0x1cc3e78>
    1474:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xfffff0ac
    1478:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    147c:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
    1480:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    1484:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1488:	4e746e65 	cdpmi	14, 7, cr6, cr4, cr5, {3}
    148c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    1490:	54664f72 	strbtpl	r4, [r6], #-3954	; 0xfffff08e
    1494:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    1498:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    149c:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    14a0:	6d657263 	sfmvs	f7, 2, [r5, #-396]!	; 0xfffffe74
    14a4:	00746e65 	rsbseq	r6, r4, r5, ror #28
    14a8:	43547870 	cmpmi	r4, #112, 16	; 0x700000
    14ac:	54760042 	ldrbtpl	r0, [r6], #-66	; 0xffffffbe
    14b0:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    14b4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    14b8:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    14bc:	61657243 	cmnvs	r5, r3, asr #4
    14c0:	54646574 	strbtpl	r6, [r4], #-1396	; 0xfffffa8c
    14c4:	006b7361 	rsbeq	r7, fp, r1, ror #6
    14c8:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    14cc:	31676e69 	cmncc	r7, r9, ror #28
    14d0:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    14d4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    14d8:	69440032 	stmdbvs	r4, {r1, r4, r5}^
    14dc:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    14e0:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    14e4:	42006369 	andmi	r6, r0, #-1543503871	; 0xa4000001
    14e8:	38324d43 	ldmdacc	r2!, {r0, r1, r6, r8, sl, fp, lr}
    14ec:	495f3533 	ldmdbmi	pc, {r0, r1, r4, r5, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    14f0:	5f43544e 	svcpl	0x0043544e
    14f4:	53474552 	movtpl	r4, #30034	; 0x7552
    14f8:	51494600 	cmppl	r9, r0, lsl #12
    14fc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    1500:	71726900 	cmnvc	r2, r0, lsl #18
    1504:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    1508:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    150c:	71726900 	cmnvc	r2, r0, lsl #18
    1510:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1514:	6c75006b 	ldclvs	0, cr0, [r5], #-428	; 0xfffffe54
    1518:	6b73614d 	blvs	1cd9a54 <__bss_end+0x1cc3f04>
    151c:	74536465 	ldrbvc	r6, [r3], #-1125	; 0xfffffb9b
    1520:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1524:	616e6500 	cmnvs	lr, r0, lsl #10
    1528:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
    152c:	6e657000 	cdpvs	0, 6, cr7, cr5, cr0, {0}
    1530:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1534:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
    1538:	52656c64 	rsbpl	r6, r5, #100, 24	; 0x6400
    153c:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
    1540:	71726900 	cmnvc	r2, r0, lsl #18
    1544:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    1548:	006b636f 	rsbeq	r6, fp, pc, ror #6
    154c:	6b73616d 	blvs	1cd9b08 <__bss_end+0x1cc3fb8>
    1550:	71726900 	cmnvc	r2, r0, lsl #18
    1554:	61736944 	cmnvs	r3, r4, asr #18
    1558:	00656c62 	rsbeq	r6, r5, r2, ror #24
    155c:	486e6670 	stmdami	lr!, {r4, r5, r6, r9, sl, sp, lr}^
    1560:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1564:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    1568:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    156c:	0032656c 	eorseq	r6, r2, ip, ror #10
    1570:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1574:	0032656c 	eorseq	r6, r2, ip, ror #10
    1578:	61736944 	cmnvs	r3, r4, asr #18
    157c:	31656c62 	cmncc	r5, r2, ror #24
    1580:	565f6700 	ldrbpl	r6, [pc], -r0, lsl #14
    1584:	6f746365 	svcvs	0x00746365
    1588:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    158c:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    1590:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
    1594:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1598:	5f4e4600 	svcpl	0x004e4600
    159c:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    15a0:	50555252 	subspl	r5, r5, r2, asr r2
    15a4:	41485f54 	cmpmi	r8, r4, asr pc
    15a8:	454c444e 	strbmi	r4, [ip, #-1102]	; 0xfffffbb2
    15ac:	4e490052 	mcrmi	0, 2, r0, cr9, cr2, {2}
    15b0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    15b4:	5f545055 	svcpl	0x00545055
    15b8:	54434556 	strbpl	r4, [r3], #-1366	; 0xfffffaaa
    15bc:	6900524f 	stmdbvs	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    15c0:	61487172 	hvcvs	34578	; 0x8712
    15c4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    15c8:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
    15cc:	2f656d6f 	svccs	0x00656d6f
    15d0:	482f6376 	stmdami	pc!, {r1, r2, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    15d4:	72657079 	rsbvc	r7, r5, #121	; 0x79
    15d8:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
    15dc:	7361722f 	cmnvc	r1, #-268435454	; 0xf0000002
    15e0:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    15e4:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    15e8:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    15ec:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    15f0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    15f4:	2f534f54 	svccs	0x00534f54
    15f8:	6f6d6544 	svcvs	0x006d6544
    15fc:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1600:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1604:	7172692f 	cmnvc	r2, pc, lsr #18
    1608:	4900632e 	stmdbmi	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    160c:	61425152 	cmpvs	r2, r2, asr r1
    1610:	00636973 	rsbeq	r6, r3, r3, ror r9
    1614:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1618:	6142656c 	cmpvs	r2, ip, ror #10
    161c:	00636973 	rsbeq	r6, r3, r3, ror r9
    1620:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1624:	0031656c 	eorseq	r6, r1, ip, ror #10
    1628:	45535047 	ldrbmi	r5, [r3, #-71]	; 0xffffffb9
    162c:	43420054 	movtmi	r0, #8276	; 0x2054
    1630:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
    1634:	50475f35 	subpl	r5, r7, r5, lsr pc
    1638:	525f4f49 	subspl	r4, pc, #292	; 0x124
    163c:	00534745 	subseq	r4, r3, r5, asr #14
    1640:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    1644:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1648:	006d754e 	rsbeq	r7, sp, lr, asr #10
    164c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1650:	6f697047 	svcvs	0x00697047
    1654:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    1658:	6f697047 	svcvs	0x00697047
    165c:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0xfffff6bc
    1660:	6f697463 	svcvs	0x00697463
    1664:	5047006e 	subpl	r0, r7, lr, rrx
    1668:	00524c43 	subseq	r4, r2, r3, asr #24
    166c:	45485047 	strbmi	r5, [r8, #-71]	; 0xffffffb9
    1670:	682f004e 	stmdavs	pc!, {r1, r2, r3, r6}	; <UNPREDICTABLE>
    1674:	2f656d6f 	svccs	0x00656d6f
    1678:	482f6376 	stmdami	pc!, {r1, r2, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    167c:	72657079 	rsbvc	r7, r5, #121	; 0x79
    1680:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
    1684:	7361722f 	cmnvc	r1, #-268435454	; 0xf0000002
    1688:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    168c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1690:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1694:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1698:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    169c:	2f534f54 	svccs	0x00534f54
    16a0:	6f6d6544 	svcvs	0x006d6544
    16a4:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    16a8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    16ac:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    16b0:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    16b4:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    16b8:	525f5443 	subspl	r5, pc, #1124073472	; 0x43000000
    16bc:	4e495349 	cdpmi	3, 4, cr5, cr9, cr9, {2}
    16c0:	53415f47 	movtpl	r5, #8007	; 0x1f47
    16c4:	00434e59 	subeq	r4, r3, r9, asr lr
    16c8:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    16cc:	465f5443 	ldrbmi	r5, [pc], -r3, asr #8
    16d0:	494c4c41 	stmdbmi	ip, {r0, r6, sl, fp, lr}^
    16d4:	415f474e 	cmpmi	pc, lr, asr #14
    16d8:	434e5953 	movtmi	r5, #59731	; 0xe953
    16dc:	656c4300 	strbvs	r4, [ip, #-768]!	; 0xfffffd00
    16e0:	70477261 	subvc	r7, r7, r1, ror #4
    16e4:	6e496f69 	cdpvs	15, 4, cr6, cr9, cr9, {3}
    16e8:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    16ec:	00747075 	rsbseq	r7, r4, r5, ror r0
    16f0:	46415047 	strbmi	r5, [r1], -r7, asr #32
    16f4:	45004e45 	strmi	r4, [r0, #-3653]	; 0xfffff1bb
    16f8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    16fc:	69704765 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, lr}^
    1700:	7465446f 	strbtvc	r4, [r5], #-1135	; 0xfffffb91
    1704:	00746365 	rsbseq	r6, r4, r5, ror #6
    1708:	55505047 	ldrbpl	r5, [r0, #-71]	; 0xffffffb9
    170c:	45440044 	strbmi	r0, [r4, #-68]	; 0xffffffbc
    1710:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    1714:	5059545f 	subspl	r5, r9, pc, asr r4
    1718:	69700045 	ldmdbvs	r0!, {r0, r2, r6}^
    171c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1720:	41504700 	cmpmi	r0, r0, lsl #14
    1724:	004e4552 	subeq	r4, lr, r2, asr r5
    1728:	47746553 			; <UNDEFINED> instruction: 0x47746553
    172c:	466f6970 			; <UNDEFINED> instruction: 0x466f6970
    1730:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
    1734:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1738:	4f495047 	svcmi	0x00495047
    173c:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    1740:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
    1744:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    1748:	5f4f4950 	svcpl	0x004f4950
    174c:	44004e49 	strmi	r4, [r0], #-3657	; 0xfffff1b7
    1750:	43455445 	movtmi	r5, #21573	; 0x5445
    1754:	49485f54 	stmdbmi	r8, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1758:	44004847 	strmi	r4, [r0], #-2119	; 0xfffff7b9
    175c:	43455445 	movtmi	r5, #21573	; 0x5445
    1760:	4f4e5f54 	svcmi	0x004e5f54
    1764:	4700454e 	strmi	r4, [r0, -lr, asr #10]
    1768:	4e454c50 	mcrmi	12, 2, r4, cr5, cr0, {2}
    176c:	50504700 	subspl	r4, r0, r0, lsl #14
    1770:	4c434455 	cfstrdmi	mvd4, [r3], {85}	; 0x55
    1774:	4544004b 	strbmi	r0, [r4, #-75]	; 0xffffffb5
    1778:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    177c:	5349525f 	movtpl	r5, #37471	; 0x925f
    1780:	00474e49 	subeq	r4, r7, r9, asr #28
    1784:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    1788:	4c5f5443 	cfldrdmi	mvd5, [pc], {67}	; 0x43
    178c:	4700574f 	strmi	r5, [r0, -pc, asr #14]
    1790:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
    1794:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
    1798:	6d754e63 	ldclvs	14, cr4, [r5, #-396]!	; 0xfffffe74
    179c:	52504700 	subspl	r4, r0, #0, 14
    17a0:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    17a4:	53444550 	movtpl	r4, #17744	; 0x4550
    17a8:	73694400 	cmnvc	r9, #0, 8
    17ac:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    17b0:	6f697047 	svcvs	0x00697047
    17b4:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    17b8:	47007463 	strmi	r7, [r0, -r3, ror #8]
    17bc:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0xfffff9b0
    17c0:	6552004c 	ldrbvs	r0, [r2, #-76]	; 0xffffffb4
    17c4:	76726573 			; <UNDEFINED> instruction: 0x76726573
    17c8:	315f6465 	cmpcc	pc, r5, ror #8
    17cc:	73655200 	cmnvc	r5, #0, 4
    17d0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    17d4:	00325f64 	eorseq	r5, r2, r4, ror #30
    17d8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    17dc:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    17e0:	5200335f 	andpl	r3, r0, #2080374785	; 0x7c000001
    17e4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    17e8:	5f646576 	svcpl	0x00646576
    17ec:	65520034 	ldrbvs	r0, [r2, #-52]	; 0xffffffcc
    17f0:	76726573 			; <UNDEFINED> instruction: 0x76726573
    17f4:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 1397 <_start-0x6c69>
    17f8:	73655200 	cmnvc	r5, #0, 4
    17fc:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1800:	00365f64 	eorseq	r5, r6, r4, ror #30
    1804:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1808:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    180c:	5200375f 	andpl	r3, r0, #24903680	; 0x17c0000
    1810:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1814:	5f646576 	svcpl	0x00646576
    1818:	65520038 	ldrbvs	r0, [r2, #-56]	; 0xffffffc8
    181c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1820:	395f6465 	ldmdbcc	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    1824:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1828:	5f544345 	svcpl	0x00544345
    182c:	4c4c4146 	stfmie	f4, [ip], {70}	; 0x46
    1830:	00474e49 	subeq	r4, r7, r9, asr #28
    1834:	47746553 			; <UNDEFINED> instruction: 0x47746553
    1838:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    183c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1840:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1844:	5200415f 	andpl	r4, r0, #-1073741801	; 0xc0000017
    1848:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    184c:	5f646576 	svcpl	0x00646576
    1850:	50470042 	subpl	r0, r7, r2, asr #32
    1854:	4f5f4f49 	svcmi	0x005f4f49
    1858:	70005455 	andvc	r5, r0, r5, asr r4
    185c:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0xffffff88
    1860:	756f6976 	strbvc	r6, [pc, #-2422]!	; ef2 <_start-0x710e>
    1864:	6f6c4273 	svcvs	0x006c4273
    1868:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    186c:	61746f54 	cmnvs	r4, r4, asr pc
    1870:	6165486c 	cmnvs	r5, ip, ror #16
    1874:	7a695370 	bvc	1a5663c <__bss_end+0x1a40aec>
    1878:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    187c:	6b6e694c 	blvs	1b9bdb4 <__bss_end+0x1b86264>
    1880:	6c427800 	mcrrvs	8, 0, r7, r2, cr0
    1884:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1888:	00657a69 	rsbeq	r7, r5, r9, ror #20
    188c:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    1890:	72467478 	subvc	r7, r6, #120, 8	; 0x78000000
    1894:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    1898:	006b636f 	rsbeq	r6, fp, pc, ror #6
    189c:	6c427870 	mcrrvs	8, 7, r7, r2, cr0
    18a0:	006b636f 	rsbeq	r6, fp, pc, ror #6
    18a4:	4f545278 	svcmi	0x00545278
    18a8:	45485f53 	strbmi	r5, [r8, #-3923]	; 0xfffff0ad
    18ac:	78005041 	stmdavc	r0, {r0, r6, ip, lr}
    18b0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    18b4:	76700074 			; <UNDEFINED> instruction: 0x76700074
    18b8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    18bc:	6c6c614d 	stfvse	f6, [ip], #-308	; 0xfffffecc
    18c0:	7000636f 	andvc	r6, r0, pc, ror #6
    18c4:	65487672 	strbvs	r7, [r8, #-1650]	; 0xfffff98e
    18c8:	6e497061 	cdpvs	0, 4, cr7, cr9, cr1, {3}
    18cc:	78007469 	stmdavc	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    18d0:	746e6157 	strbtvc	r6, [lr], #-343	; 0xfffffea9
    18d4:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    18d8:	6400657a 	strvs	r6, [r0], #-1402	; 0xfffffa86
    18dc:	6d6d7544 	cfstr64vs	mvdx7, [sp, #-272]!	; 0xfffffef0
    18e0:	75700079 	ldrbvc	r0, [r0, #-121]!	; 0xffffff87
    18e4:	61654863 	cmnvs	r5, r3, ror #16
    18e8:	646e4570 	strbtvs	r4, [lr], #-1392	; 0xfffffa90
    18ec:	72467800 	subvc	r7, r6, #0, 16
    18f0:	79426565 	stmdbvc	r2, {r0, r2, r5, r6, r8, sl, sp, lr}^
    18f4:	52736574 	rsbspl	r6, r3, #116, 10	; 0x1d000000
    18f8:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    18fc:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1900:	48637500 	stmdami	r3!, {r8, sl, ip, sp, lr}^
    1904:	00706165 	rsbseq	r6, r0, r5, ror #2
    1908:	69467870 	stmdbvs	r6, {r4, r5, r6, fp, ip, sp, lr}^
    190c:	46747372 			; <UNDEFINED> instruction: 0x46747372
    1910:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    1914:	6b636f6c 	blvs	18dd6cc <__bss_end+0x18c7b7c>
    1918:	6f682f00 	svcvs	0x00682f00
    191c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1920:	79482f63 	stmdbvc	r8, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1924:	6c726570 	cfldr64vs	mvdx6, [r2], #-448	; 0xfffffe40
    1928:	2f706f6f 	svccs	0x00706f6f
    192c:	70736172 	rsbsvc	r6, r3, r2, ror r1
    1930:	61522f69 	cmpvs	r2, r9, ror #30
    1934:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1938:	50797272 	rsbspl	r7, r9, r2, ror r2
    193c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1940:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1944:	2f2f534f 	svccs	0x002f534f
    1948:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    194c:	534f5452 	movtpl	r5, #62546	; 0xf452
    1950:	756f532f 	strbvc	r5, [pc, #-815]!	; 1629 <_start-0x69d7>
    1954:	2f656372 	svccs	0x00656372
    1958:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    195c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1960:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
    1964:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    1968:	6165682f 	cmnvs	r5, pc, lsr #16
    196c:	2e345f70 	mrccs	15, 1, r5, cr4, cr0, {3}
    1970:	78700063 	ldmdavc	r0!, {r0, r1, r5, r6}^
    1974:	4277654e 	rsbsmi	r6, r7, #327155712	; 0x13800000
    1978:	6b636f6c 	blvs	18dd730 <__bss_end+0x18c7be0>
    197c:	6b6e694c 	blvs	1b9beb4 <__bss_end+0x1b86364>
    1980:	52767000 	rsbspl	r7, r6, #0
    1984:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    1988:	5f41006e 	svcpl	0x0041006e
    198c:	434f4c42 	movtmi	r4, #64578	; 0xfc42
    1990:	494c5f4b 	stmdbmi	ip, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    1994:	78004b4e 	stmdavc	r0, {r1, r2, r3, r6, r8, r9, fp, lr}
    1998:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    199c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    19a0:	48656572 	stmdami	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    19a4:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    19a8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    19ac:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    19b0:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    19b4:	6f6c4274 	svcvs	0x006c4274
    19b8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    19bc:	72466f74 	subvc	r6, r6, #116, 30	; 0x1d0
    19c0:	694c6565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, sp, lr}^
    19c4:	76007473 			; <UNDEFINED> instruction: 0x76007473
    19c8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    19cc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    19d0:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    19d4:	6c426573 	cfstr64vs	mvdx6, [r2], {115}	; 0x73
    19d8:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    19dc:	61656800 	cmnvs	r5, r0, lsl #16
    19e0:	52545370 	subspl	r5, r4, #112, 6	; 0xc0000001
    19e4:	5f544355 	svcpl	0x00544355
    19e8:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    19ec:	6f507600 	svcvs	0x00507600
    19f0:	72467472 	subvc	r7, r6, #1912602624	; 0x72000000
    19f4:	61006565 	tstvs	r0, r5, ror #10
    19f8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    19fc:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    1a00:	6c427800 	mcrrvs	8, 0, r7, r2, cr0
    1a04:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1a08:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    1a0c:	6e457870 	mcrvs	8, 2, r7, cr5, cr0, {3}
    1a10:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
    1a14:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1a18:	496f546b 	stmdbmi	pc!, {r0, r1, r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1a1c:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    1a20:	48780074 	ldmdami	r8!, {r2, r4, r5, r6}^
    1a24:	00706165 	rsbseq	r6, r0, r5, ror #2
    1a28:	414d6375 	hvcmi	54837	; 0xd635
    1a2c:	64644143 	strbtvs	r4, [r4], #-323	; 0xfffffebd
    1a30:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1a34:	4e637500 	cdpmi	5, 6, cr7, cr3, cr0, {0}
    1a38:	614d7465 	cmpvs	sp, r5, ror #8
    1a3c:	2f006b73 	svccs	0x00006b73
    1a40:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1a44:	2f63762f 	svccs	0x0063762f
    1a48:	65707948 	ldrbvs	r7, [r0, #-2376]!	; 0xfffff6b8
    1a4c:	6f6f6c72 	svcvs	0x006f6c72
    1a50:	61722f70 	cmnvs	r2, r0, ror pc
    1a54:	2f697073 	svccs	0x00697073
    1a58:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1a5c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1a60:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1a64:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1a68:	534f5452 	movtpl	r5, #62546	; 0xf452
    1a6c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1a70:	616d2f6f 	cmnvs	sp, pc, ror #30
    1a74:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    1a78:	49637500 	stmdbmi	r3!, {r8, sl, ip, sp, lr}^
    1a7c:	64644150 	strbtvs	r4, [r4], #-336	; 0xfffffeb0
    1a80:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1a84:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; b8c <_start-0x7474>
    1a88:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a8c:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
    1a90:	534e4463 	movtpl	r4, #58467	; 0xe463
    1a94:	76726553 			; <UNDEFINED> instruction: 0x76726553
    1a98:	64417265 	strbvs	r7, [r1], #-613	; 0xfffffd9b
    1a9c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1aa0:	616d0073 	smcvs	53251	; 0xd003
    1aa4:	74006e69 	strvc	r6, [r0], #-3689	; 0xfffff197
    1aa8:	316b7361 	cmncc	fp, r1, ror #6
    1aac:	73617400 	cmnvc	r1, #0, 8
    1ab0:	7500326b 	strvc	r3, [r0, #-619]	; 0xfffffd95
    1ab4:	74614763 	strbtvc	r4, [r1], #-1891	; 0xfffff89d
    1ab8:	79617765 	stmdbvc	r1!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1abc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1ac0:	00737365 	rsbseq	r7, r3, r5, ror #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x10bb1d4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <__bss_end+0x7f4aa0>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x000000000000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00010000 	andeq	r0, r1, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <__bss_end+0xedde0>
  24:	0b0d4201 	bleq	350830 <__bss_end+0x33ace0>
  28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
  2c:	000ecb42 	andeq	ip, lr, r2, asr #22
  30:	00000018 	andeq	r0, r0, r8, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	00010240 	andeq	r0, r1, r0, asr #4
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	8b080e42 	blhi	203950 <__bss_end+0x1ede00>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	00040b0c 	andeq	r0, r4, ip, lsl #22
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	0001025c 	andeq	r0, r1, ip, asr r2
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	8b040e42 	blhi	10396c <__bss_end+0xede1c>
  60:	0b0d4201 	bleq	35086c <__bss_end+0x33ad1c>
  64:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
  68:	00000ecb 	andeq	r0, r0, fp, asr #29
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	00010274 	andeq	r0, r1, r4, ror r2
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	8b080e42 	blhi	20398c <__bss_end+0x1ede3c>
  80:	42018e02 	andmi	r8, r1, #2, 28
  84:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
  88:	00080d0c 	andeq	r0, r8, ip, lsl #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	000102ac 	andeq	r0, r1, ip, lsr #5
  98:	00000098 	muleq	r0, r8, r0
  9c:	8b080e42 	blhi	2039ac <__bss_end+0x1ede5c>
  a0:	42018e02 	andmi	r8, r1, #2, 28
  a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
  a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  b4:	7c020001 	stcvc	0, cr0, [r2], {1}
  b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	000000ac 	andeq	r0, r0, ip, lsr #1
  c4:	00010344 	andeq	r0, r1, r4, asr #6
  c8:	00000098 	muleq	r0, r8, r0
  cc:	8b040e42 	blhi	1039dc <__bss_end+0xede8c>
  d0:	0b0d4201 	bleq	3508dc <__bss_end+0x33ad8c>
  d4:	420d0d7e 	andmi	r0, sp, #8064	; 0x1f80
  d8:	00000ecb 	andeq	r0, r0, fp, asr #29
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	000000ac 	andeq	r0, r0, ip, lsr #1
  e4:	000103dc 	ldrdeq	r0, [r1], -ip
  e8:	000000b4 	strheq	r0, [r0], -r4
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000ac 	andeq	r0, r0, ip, lsr #1
  f4:	00010490 	muleq	r1, r0, r4
  f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	000000ac 	andeq	r0, r0, ip, lsr #1
 104:	00010540 	andeq	r0, r1, r0, asr #10
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	8b040e42 	blhi	103a1c <__bss_end+0xedecc>
 110:	0b0d4201 	bleq	35091c <__bss_end+0x33adcc>
 114:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 118:	00000ecb 	andeq	r0, r0, fp, asr #29
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	000000ac 	andeq	r0, r0, ip, lsr #1
 124:	00010584 	andeq	r0, r1, r4, lsl #11
 128:	00000064 	andeq	r0, r0, r4, rrx
 12c:	8b040e42 	blhi	103a3c <__bss_end+0xedeec>
 130:	0b0d4201 	bleq	35093c <__bss_end+0x33adec>
 134:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
 138:	00000ecb 	andeq	r0, r0, fp, asr #29
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 158:	00000168 	andeq	r0, r0, r8, ror #2
 15c:	8b080e42 	blhi	203a6c <__bss_end+0x1edf1c>
 160:	42018e02 	andmi	r8, r1, #2, 28
 164:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000013c 	andeq	r0, r0, ip, lsr r1
 174:	00010758 	andeq	r0, r1, r8, asr r7
 178:	000000e4 	andeq	r0, r0, r4, ror #1
 17c:	8b080e42 	blhi	203a8c <__bss_end+0x1edf3c>
 180:	42018e02 	andmi	r8, r1, #2, 28
 184:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000013c 	andeq	r0, r0, ip, lsr r1
 194:	0001083c 	andeq	r0, r1, ip, lsr r8
 198:	000000ec 	andeq	r0, r0, ip, ror #1
 19c:	8b080e42 	blhi	203aac <__bss_end+0x1edf5c>
 1a0:	42018e02 	andmi	r8, r1, #2, 28
 1a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1b4:	00010928 	andeq	r0, r1, r8, lsr #18
 1b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1bc:	8b080e42 	blhi	203acc <__bss_end+0x1edf7c>
 1c0:	42018e02 	andmi	r8, r1, #2, 28
 1c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1c8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1d4:	00010af8 	strdeq	r0, [r1], -r8
 1d8:	00000128 	andeq	r0, r0, r8, lsr #2
 1dc:	8b080e42 	blhi	203aec <__bss_end+0x1edf9c>
 1e0:	42018e02 	andmi	r8, r1, #2, 28
 1e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1e8:	080d0c88 	stmdaeq	sp, {r3, r7, sl, fp}
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1f4:	00010c20 	andeq	r0, r1, r0, lsr #24
 1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 1fc:	8b080e42 	blhi	203b0c <__bss_end+0x1edfbc>
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	0000013c 	andeq	r0, r0, ip, lsr r1
 214:	00010cc8 	andeq	r0, r1, r8, asr #25
 218:	0000008c 	andeq	r0, r0, ip, lsl #1
 21c:	8b080e42 	blhi	203b2c <__bss_end+0x1edfdc>
 220:	42018e02 	andmi	r8, r1, #2, 28
 224:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
 228:	00080d0c 	andeq	r0, r8, ip, lsl #26
 22c:	0000000c 	andeq	r0, r0, ip
 230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 234:	7c020001 	stcvc	0, cr0, [r2], {1}
 238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000022c 	andeq	r0, r0, ip, lsr #4
 244:	00010d54 	andeq	r0, r1, r4, asr sp
 248:	00000068 	andeq	r0, r0, r8, rrx
 24c:	8b040e42 	blhi	103b5c <__bss_end+0xee00c>
 250:	0b0d4201 	bleq	350a5c <__bss_end+0x33af0c>
 254:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
 258:	00000ecb 	andeq	r0, r0, fp, asr #29
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000022c 	andeq	r0, r0, ip, lsr #4
 264:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
 268:	0000002c 	andeq	r0, r0, ip, lsr #32
 26c:	8b040e42 	blhi	103b7c <__bss_end+0xee02c>
 270:	0b0d4201 	bleq	350a7c <__bss_end+0x33af2c>
 274:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 278:	00000ecb 	andeq	r0, r0, fp, asr #29
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000022c 	andeq	r0, r0, ip, lsr #4
 284:	00010de8 	andeq	r0, r1, r8, ror #27
 288:	00000098 	muleq	r0, r8, r0
 28c:	8b040e42 	blhi	103b9c <__bss_end+0xee04c>
 290:	0b0d4201 	bleq	350a9c <__bss_end+0x33af4c>
 294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 298:	000ecb42 	andeq	ip, lr, r2, asr #22
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2a4:	00010e80 	andeq	r0, r1, r0, lsl #29
 2a8:	000000d8 	ldrdeq	r0, [r0], -r8
 2ac:	8b040e42 	blhi	103bbc <__bss_end+0xee06c>
 2b0:	0b0d4201 	bleq	350abc <__bss_end+0x33af6c>
 2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2c4:	00010f58 	andeq	r0, r1, r8, asr pc
 2c8:	00000098 	muleq	r0, r8, r0
 2cc:	8b040e42 	blhi	103bdc <__bss_end+0xee08c>
 2d0:	0b0d4201 	bleq	350adc <__bss_end+0x33af8c>
 2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002dc 	ldrdeq	r0, [r0], -ip
 2f4:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 2f8:	00000114 	andeq	r0, r0, r4, lsl r1
 2fc:	8b080e42 	blhi	203c0c <__bss_end+0x1ee0bc>
 300:	42018e02 	andmi	r8, r1, #2, 28
 304:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002dc 	ldrdeq	r0, [r0], -ip
 314:	00011104 	andeq	r1, r1, r4, lsl #2
 318:	000000c8 	andeq	r0, r0, r8, asr #1
 31c:	8b080e42 	blhi	203c2c <__bss_end+0x1ee0dc>
 320:	42018e02 	andmi	r8, r1, #2, 28
 324:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002dc 	ldrdeq	r0, [r0], -ip
 334:	000111cc 	andeq	r1, r1, ip, asr #3
 338:	000001a4 	andeq	r0, r0, r4, lsr #3
 33c:	8b080e42 	blhi	203c4c <__bss_end+0x1ee0fc>
 340:	42018e02 	andmi	r8, r1, #2, 28
 344:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002dc 	ldrdeq	r0, [r0], -ip
 354:	00011370 	andeq	r1, r1, r0, ror r3
 358:	000000dc 	ldrdeq	r0, [r0], -ip
 35c:	8b080e42 	blhi	203c6c <__bss_end+0x1ee11c>
 360:	42018e02 	andmi	r8, r1, #2, 28
 364:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002dc 	ldrdeq	r0, [r0], -ip
 374:	0001144c 	andeq	r1, r1, ip, asr #8
 378:	00000204 	andeq	r0, r0, r4, lsl #4
 37c:	8b080e42 	blhi	203c8c <__bss_end+0x1ee13c>
 380:	42018e02 	andmi	r8, r1, #2, 28
 384:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000002dc 	ldrdeq	r0, [r0], -ip
 394:	00011650 	andeq	r1, r1, r0, asr r6
 398:	000000e0 	andeq	r0, r0, r0, ror #1
 39c:	8b080e42 	blhi	203cac <__bss_end+0x1ee15c>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002dc 	ldrdeq	r0, [r0], -ip
 3b4:	00011730 	andeq	r1, r1, r0, lsr r7
 3b8:	00000034 	andeq	r0, r0, r4, lsr r0
 3bc:	8b080e42 	blhi	203ccc <__bss_end+0x1ee17c>
 3c0:	42018e02 	andmi	r8, r1, #2, 28
 3c4:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000002dc 	ldrdeq	r0, [r0], -ip
 3d4:	00011764 	andeq	r1, r1, r4, ror #14
 3d8:	00000030 	andeq	r0, r0, r0, lsr r0
 3dc:	8b040e42 	blhi	103cec <__bss_end+0xee19c>
 3e0:	0b0d4201 	bleq	350bec <__bss_end+0x33b09c>
 3e4:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
 3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000002dc 	ldrdeq	r0, [r0], -ip
 3f4:	00011794 	muleq	r1, r4, r7
 3f8:	00000034 	andeq	r0, r0, r4, lsr r0
 3fc:	8b080e42 	blhi	203d0c <__bss_end+0x1ee1bc>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 408:	00080d0c 	andeq	r0, r8, ip, lsl #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000002dc 	ldrdeq	r0, [r0], -ip
 414:	000117c8 	andeq	r1, r1, r8, asr #15
 418:	0000012c 	andeq	r0, r0, ip, lsr #2
 41c:	8b080e42 	blhi	203d2c <__bss_end+0x1ee1dc>
 420:	42018e02 	andmi	r8, r1, #2, 28
 424:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000002dc 	ldrdeq	r0, [r0], -ip
 434:	000118f4 	strdeq	r1, [r1], -r4
 438:	00000090 	muleq	r0, r0, r0
 43c:	8b080e42 	blhi	203d4c <__bss_end+0x1ee1fc>
 440:	42018e02 	andmi	r8, r1, #2, 28
 444:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000002dc 	ldrdeq	r0, [r0], -ip
 454:	00011984 	andeq	r1, r1, r4, lsl #19
 458:	00000104 	andeq	r0, r0, r4, lsl #2
 45c:	8b080e42 	blhi	203d6c <__bss_end+0x1ee21c>
 460:	42018e02 	andmi	r8, r1, #2, 28
 464:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000002dc 	ldrdeq	r0, [r0], -ip
 474:	00011a88 	andeq	r1, r1, r8, lsl #21
 478:	00000044 	andeq	r0, r0, r4, asr #32
 47c:	8b080e42 	blhi	203d8c <__bss_end+0x1ee23c>
 480:	42018e02 	andmi	r8, r1, #2, 28
 484:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
 488:	00080d0c 	andeq	r0, r8, ip, lsl #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000002dc 	ldrdeq	r0, [r0], -ip
 494:	00011acc 	andeq	r1, r1, ip, asr #21
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	8b040e42 	blhi	103dac <__bss_end+0xee25c>
 4a0:	0b0d4201 	bleq	350cac <__bss_end+0x33b15c>
 4a4:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000002dc 	ldrdeq	r0, [r0], -ip
 4b4:	00011b0c 	andeq	r1, r1, ip, lsl #22
 4b8:	0000004c 	andeq	r0, r0, ip, asr #32
 4bc:	8b080e42 	blhi	203dcc <__bss_end+0x1ee27c>
 4c0:	42018e02 	andmi	r8, r1, #2, 28
 4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
 4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000002dc 	ldrdeq	r0, [r0], -ip
 4d4:	00011b58 	andeq	r1, r1, r8, asr fp
 4d8:	00000048 	andeq	r0, r0, r8, asr #32
 4dc:	8b040e42 	blhi	103dec <__bss_end+0xee29c>
 4e0:	0b0d4201 	bleq	350cec <__bss_end+0x33b19c>
 4e4:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
 4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	00000020 	andeq	r0, r0, r0, lsr #32
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	00011ba0 	andeq	r1, r1, r0, lsr #23
 508:	00000248 	andeq	r0, r0, r8, asr #4
 50c:	8b080e42 	blhi	203e1c <__bss_end+0x1ee2cc>
 510:	42018e02 	andmi	r8, r1, #2, 28
 514:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 518:	0d0c0110 	stfeqs	f0, [ip, #-64]	; 0xffffffc0
 51c:	00000008 	andeq	r0, r0, r8
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004ec 	andeq	r0, r0, ip, ror #9
 528:	00011de8 	andeq	r1, r1, r8, ror #27
 52c:	00000100 	andeq	r0, r0, r0, lsl #2
 530:	8b080e42 	blhi	203e40 <__bss_end+0x1ee2f0>
 534:	42018e02 	andmi	r8, r1, #2, 28
 538:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000004ec 	andeq	r0, r0, ip, ror #9
 548:	00011ee8 	andeq	r1, r1, r8, ror #29
 54c:	00000110 	andeq	r0, r0, r0, lsl r1
 550:	8b080e42 	blhi	203e60 <__bss_end+0x1ee310>
 554:	42018e02 	andmi	r8, r1, #2, 28
 558:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	000004ec 	andeq	r0, r0, ip, ror #9
 568:	00011ff8 	strdeq	r1, [r1], -r8
 56c:	00000084 	andeq	r0, r0, r4, lsl #1
 570:	8b080e42 	blhi	203e80 <__bss_end+0x1ee330>
 574:	42018e02 	andmi	r8, r1, #2, 28
 578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
 57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	000004ec 	andeq	r0, r0, ip, ror #9
 588:	0001207c 	andeq	r2, r1, ip, ror r0
 58c:	00000058 	andeq	r0, r0, r8, asr r0
 590:	8b080e42 	blhi	203ea0 <__bss_end+0x1ee350>
 594:	42018e02 	andmi	r8, r1, #2, 28
 598:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
 59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	000004ec 	andeq	r0, r0, ip, ror #9
 5a8:	000120d4 	ldrdeq	r2, [r1], -r4
 5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 5b0:	8b080e42 	blhi	203ec0 <__bss_end+0x1ee370>
 5b4:	42018e02 	andmi	r8, r1, #2, 28
 5b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c4:	000004ec 	andeq	r0, r0, ip, ror #9
 5c8:	0001227c 	andeq	r2, r1, ip, ror r2
 5cc:	00000104 	andeq	r0, r0, r4, lsl #2
 5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x1ee390>
 5d4:	42018e02 	andmi	r8, r1, #2, 28
 5d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e4:	000004ec 	andeq	r0, r0, ip, ror #9
 5e8:	00012380 	andeq	r2, r1, r0, lsl #7
 5ec:	0000007c 	andeq	r0, r0, ip, ror r0
 5f0:	8b040e42 	blhi	103f00 <__bss_end+0xee3b0>
 5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x33b2b0>
 5f8:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
 5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	000004ec 	andeq	r0, r0, ip, ror #9
 608:	000123fc 	strdeq	r2, [r1], -ip
 60c:	000000f8 	strdeq	r0, [r0], -r8
 610:	8b080e42 	blhi	203f20 <__bss_end+0x1ee3d0>
 614:	42018e02 	andmi	r8, r1, #2, 28
 618:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	000004ec 	andeq	r0, r0, ip, ror #9
 628:	000124f4 	strdeq	r2, [r1], -r4
 62c:	0000011c 	andeq	r0, r0, ip, lsl r1
 630:	8b080e42 	blhi	203f40 <__bss_end+0x1ee3f0>
 634:	42018e02 	andmi	r8, r1, #2, 28
 638:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	000004ec 	andeq	r0, r0, ip, ror #9
 648:	00012610 	andeq	r2, r1, r0, lsl r6
 64c:	0000009c 	muleq	r0, ip, r0
 650:	8b080e42 	blhi	203f60 <__bss_end+0x1ee410>
 654:	42018e02 	andmi	r8, r1, #2, 28
 658:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	000004ec 	andeq	r0, r0, ip, ror #9
 668:	000126ac 	andeq	r2, r1, ip, lsr #13
 66c:	00000038 	andeq	r0, r0, r8, lsr r0
 670:	8b080e42 	blhi	203f80 <__bss_end+0x1ee430>
 674:	42018e02 	andmi	r8, r1, #2, 28
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	000004ec 	andeq	r0, r0, ip, ror #9
 684:	000126e4 	andeq	r2, r1, r4, ror #13
 688:	00000030 	andeq	r0, r0, r0, lsr r0
 68c:	8b040e42 	blhi	103f9c <__bss_end+0xee44c>
 690:	0b0d4201 	bleq	350e9c <__bss_end+0x33b34c>
 694:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 698:	00000ecb 	andeq	r0, r0, fp, asr #29
 69c:	00000020 	andeq	r0, r0, r0, lsr #32
 6a0:	000004ec 	andeq	r0, r0, ip, ror #9
 6a4:	00012714 	andeq	r2, r1, r4, lsl r7
 6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
 6ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
 6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
 6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x2fb370>
 6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
 6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000004ec 	andeq	r0, r0, ip, ror #9
 6c8:	000128b8 			; <UNDEFINED> instruction: 0x000128b8
 6cc:	00000034 	andeq	r0, r0, r4, lsr r0
 6d0:	8b080e42 	blhi	203fe0 <__bss_end+0x1ee490>
 6d4:	42018e02 	andmi	r8, r1, #2, 28
 6d8:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
 6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000004ec 	andeq	r0, r0, ip, ror #9
 6e8:	000128ec 	andeq	r2, r1, ip, ror #17
 6ec:	00000038 	andeq	r0, r0, r8, lsr r0
 6f0:	8b040e42 	blhi	104000 <__bss_end+0xee4b0>
 6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x33b3b0>
 6f8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
 6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 700:	0000001c 	andeq	r0, r0, ip, lsl r0
 704:	000004ec 	andeq	r0, r0, ip, ror #9
 708:	00012924 	andeq	r2, r1, r4, lsr #18
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <__bss_end+0xee4d0>
 714:	0b0d4201 	bleq	350f20 <__bss_end+0x33b3d0>
 718:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 71c:	00000ecb 	andeq	r0, r0, fp, asr #29
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	000004ec 	andeq	r0, r0, ip, ror #9
 728:	00012948 	andeq	r2, r1, r8, asr #18
 72c:	0000021c 	andeq	r0, r0, ip, lsl r2
 730:	8b080e42 	blhi	204040 <__bss_end+0x1ee4f0>
 734:	42018e02 	andmi	r8, r1, #2, 28
 738:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	000004ec 	andeq	r0, r0, ip, ror #9
 748:	00012b64 	andeq	r2, r1, r4, ror #22
 74c:	0000005c 	andeq	r0, r0, ip, asr r0
 750:	8b080e42 	blhi	204060 <__bss_end+0x1ee510>
 754:	42018e02 	andmi	r8, r1, #2, 28
 758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	000004ec 	andeq	r0, r0, ip, ror #9
 768:	00012bc0 	andeq	r2, r1, r0, asr #23
 76c:	0000005c 	andeq	r0, r0, ip, asr r0
 770:	8b080e42 	blhi	204080 <__bss_end+0x1ee530>
 774:	42018e02 	andmi	r8, r1, #2, 28
 778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	000004ec 	andeq	r0, r0, ip, ror #9
 788:	00012c1c 	andeq	r2, r1, ip, lsl ip
 78c:	0000007c 	andeq	r0, r0, ip, ror r0
 790:	8b080e42 	blhi	2040a0 <__bss_end+0x1ee550>
 794:	42018e02 	andmi	r8, r1, #2, 28
 798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a4:	000004ec 	andeq	r0, r0, ip, ror #9
 7a8:	00012c98 	muleq	r1, r8, ip
 7ac:	00000108 	andeq	r0, r0, r8, lsl #2
 7b0:	8b040e42 	blhi	1040c0 <__bss_end+0xee570>
 7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x33b470>
 7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
 7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
 7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c4:	000004ec 	andeq	r0, r0, ip, ror #9
 7c8:	00012da0 	andeq	r2, r1, r0, lsr #27
 7cc:	0000009c 	muleq	r0, ip, r0
 7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x1ee590>
 7d4:	42018e02 	andmi	r8, r1, #2, 28
 7d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e4:	000004ec 	andeq	r0, r0, ip, ror #9
 7e8:	00012e3c 	andeq	r2, r1, ip, lsr lr
 7ec:	00000118 	andeq	r0, r0, r8, lsl r1
 7f0:	8b080e42 	blhi	204100 <__bss_end+0x1ee5b0>
 7f4:	42018e02 	andmi	r8, r1, #2, 28
 7f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 800:	0000001c 	andeq	r0, r0, ip, lsl r0
 804:	000004ec 	andeq	r0, r0, ip, ror #9
 808:	00012f54 	andeq	r2, r1, r4, asr pc
 80c:	00000048 	andeq	r0, r0, r8, asr #32
 810:	8b040e42 	blhi	104120 <__bss_end+0xee5d0>
 814:	0b0d4201 	bleq	351020 <__bss_end+0x33b4d0>
 818:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 81c:	00000ecb 	andeq	r0, r0, fp, asr #29
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	000004ec 	andeq	r0, r0, ip, ror #9
 828:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 82c:	000000f4 	strdeq	r0, [r0], -r4
 830:	8b080e42 	blhi	204140 <__bss_end+0x1ee5f0>
 834:	42018e02 	andmi	r8, r1, #2, 28
 838:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	000004ec 	andeq	r0, r0, ip, ror #9
 848:	00013090 	muleq	r1, r0, r0
 84c:	00000028 	andeq	r0, r0, r8, lsr #32
 850:	8b040e42 	blhi	104160 <__bss_end+0xee610>
 854:	0b0d4201 	bleq	351060 <__bss_end+0x33b510>
 858:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
 85c:	00000ecb 	andeq	r0, r0, fp, asr #29
 860:	00000018 	andeq	r0, r0, r8, lsl r0
 864:	000004ec 	andeq	r0, r0, ip, ror #9
 868:	000130b8 	strheq	r3, [r1], -r8
 86c:	00000030 	andeq	r0, r0, r0, lsr r0
 870:	8b080e42 	blhi	204180 <__bss_end+0x1ee630>
 874:	42018e02 	andmi	r8, r1, #2, 28
 878:	00040b0c 	andeq	r0, r4, ip, lsl #22
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	000004ec 	andeq	r0, r0, ip, ror #9
 884:	000130e8 	andeq	r3, r1, r8, ror #1
 888:	000000c0 	andeq	r0, r0, r0, asr #1
 88c:	8b080e42 	blhi	20419c <__bss_end+0x1ee64c>
 890:	42018e02 	andmi	r8, r1, #2, 28
 894:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
 89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a0:	000004ec 	andeq	r0, r0, ip, ror #9
 8a4:	000131a8 	andeq	r3, r1, r8, lsr #3
 8a8:	000000c0 	andeq	r0, r0, r0, asr #1
 8ac:	8b080e42 	blhi	2041bc <__bss_end+0x1ee66c>
 8b0:	42018e02 	andmi	r8, r1, #2, 28
 8b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
 8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c0:	000004ec 	andeq	r0, r0, ip, ror #9
 8c4:	00013268 	andeq	r3, r1, r8, ror #4
 8c8:	000000bc 	strheq	r0, [r0], -ip
 8cc:	8b080e42 	blhi	2041dc <__bss_end+0x1ee68c>
 8d0:	42018e02 	andmi	r8, r1, #2, 28
 8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	000004ec 	andeq	r0, r0, ip, ror #9
 8e4:	00013324 	andeq	r3, r1, r4, lsr #6
 8e8:	000000b8 	strheq	r0, [r0], -r8
 8ec:	8b080e42 	blhi	2041fc <__bss_end+0x1ee6ac>
 8f0:	42018e02 	andmi	r8, r1, #2, 28
 8f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
 8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 900:	000004ec 	andeq	r0, r0, ip, ror #9
 904:	000133dc 	ldrdeq	r3, [r1], -ip
 908:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 90c:	8b080e42 	blhi	20421c <__bss_end+0x1ee6cc>
 910:	42018e02 	andmi	r8, r1, #2, 28
 914:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 91c:	0000001c 	andeq	r0, r0, ip, lsl r0
 920:	000004ec 	andeq	r0, r0, ip, ror #9
 924:	0001348c 	andeq	r3, r1, ip, lsl #9
 928:	00000034 	andeq	r0, r0, r4, lsr r0
 92c:	8b080e42 	blhi	20423c <__bss_end+0x1ee6ec>
 930:	42018e02 	andmi	r8, r1, #2, 28
 934:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 938:	00080d0c 	andeq	r0, r8, ip, lsl #26
 93c:	0000000c 	andeq	r0, r0, ip
 940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 944:	7c020001 	stcvc	0, cr0, [r2], {1}
 948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000093c 	andeq	r0, r0, ip, lsr r9
 954:	000134c0 	andeq	r3, r1, r0, asr #9
 958:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 95c:	8b080e42 	blhi	20426c <__bss_end+0x1ee71c>
 960:	42018e02 	andmi	r8, r1, #2, 28
 964:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 968:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	0000093c 	andeq	r0, r0, ip, lsr r9
 974:	00013570 	andeq	r3, r1, r0, ror r5
 978:	000000a0 	andeq	r0, r0, r0, lsr #1
 97c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
 980:	8b038504 	blhi	e1d98 <__bss_end+0xcc248>
 984:	42018e02 	andmi	r8, r1, #2, 28
 988:	00040b0c 	andeq	r0, r4, ip, lsl #22
 98c:	0000001c 	andeq	r0, r0, ip, lsl r0
 990:	0000093c 	andeq	r0, r0, ip, lsr r9
 994:	00013610 	andeq	r3, r1, r0, lsl r6
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	8b040e42 	blhi	1042ac <__bss_end+0xee75c>
 9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x33b65c>
 9a4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9b4:	0001362c 	andeq	r3, r1, ip, lsr #12
 9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9bc:	8b040e42 	blhi	1042cc <__bss_end+0xee77c>
 9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x33b67c>
 9c4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9d4:	00013648 	andeq	r3, r1, r8, asr #12
 9d8:	00000064 	andeq	r0, r0, r4, rrx
 9dc:	8b080e42 	blhi	2042ec <__bss_end+0x1ee79c>
 9e0:	42018e02 	andmi	r8, r1, #2, 28
 9e4:	6a040b0c 	bvs	10361c <__bss_end+0xedacc>
 9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9f4:	000136ac 	andeq	r3, r1, ip, lsr #13
 9f8:	000000d4 	ldrdeq	r0, [r0], -r4
 9fc:	8b040e42 	blhi	10430c <__bss_end+0xee7bc>
 a00:	0b0d4201 	bleq	35120c <__bss_end+0x33b6bc>
 a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
 a08:	000ecb42 	andeq	ip, lr, r2, asr #22
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	0000093c 	andeq	r0, r0, ip, lsr r9
 a14:	00013780 	andeq	r3, r1, r0, lsl #15
 a18:	000000e0 	andeq	r0, r0, r0, ror #1
 a1c:	8b040e42 	blhi	10432c <__bss_end+0xee7dc>
 a20:	0b0d4201 	bleq	35122c <__bss_end+0x33b6dc>
 a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 a28:	000ecb42 	andeq	ip, lr, r2, asr #22
 a2c:	0000000c 	andeq	r0, r0, ip
 a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a34:	7c020001 	stcvc	0, cr0, [r2], {1}
 a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a44:	00013860 	andeq	r3, r1, r0, ror #16
 a48:	000000dc 	ldrdeq	r0, [r0], -ip
 a4c:	8b040e42 	blhi	10435c <__bss_end+0xee80c>
 a50:	0b0d4201 	bleq	35125c <__bss_end+0x33b70c>
 a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
 a58:	000ecb42 	andeq	ip, lr, r2, asr #22
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a64:	0001393c 	andeq	r3, r1, ip, lsr r9
 a68:	00000034 	andeq	r0, r0, r4, lsr r0
 a6c:	8b080e42 	blhi	20437c <__bss_end+0x1ee82c>
 a70:	42018e02 	andmi	r8, r1, #2, 28
 a74:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a84:	00013970 	andeq	r3, r1, r0, ror r9
 a88:	000000b8 	strheq	r0, [r0], -r8
 a8c:	8b040e42 	blhi	10439c <__bss_end+0xee84c>
 a90:	0b0d4201 	bleq	35129c <__bss_end+0x33b74c>
 a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
 a98:	000ecb42 	andeq	ip, lr, r2, asr #22
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 aa4:	00013a28 	andeq	r3, r1, r8, lsr #20
 aa8:	00000050 	andeq	r0, r0, r0, asr r0
 aac:	8b040e42 	blhi	1043bc <__bss_end+0xee86c>
 ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x33b76c>
 ab4:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
 abc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ac4:	00013a78 	andeq	r3, r1, r8, ror sl
 ac8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 acc:	8b040e42 	blhi	1043dc <__bss_end+0xee88c>
 ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x33b78c>
 ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
 ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
 adc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ae4:	00013c28 	andeq	r3, r1, r8, lsr #24
 ae8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 aec:	8b040e42 	blhi	1043fc <__bss_end+0xee8ac>
 af0:	0b0d4201 	bleq	3512fc <__bss_end+0x33b7ac>
 af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
 af8:	000ecb42 	andeq	ip, lr, r2, asr #22
 afc:	0000001c 	andeq	r0, r0, ip, lsl r0
 b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
 b04:	00013de0 	andeq	r3, r1, r0, ror #27
 b08:	00000058 	andeq	r0, r0, r8, asr r0
 b0c:	8b040e42 	blhi	10441c <__bss_end+0xee8cc>
 b10:	0b0d4201 	bleq	35131c <__bss_end+0x33b7cc>
 b14:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
 b18:	00000ecb 	andeq	r0, r0, fp, asr #29
 b1c:	0000000c 	andeq	r0, r0, ip
 b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b24:	7c020001 	stcvc	0, cr0, [r2], {1}
 b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b34:	00013e38 	andeq	r3, r1, r8, lsr lr
 b38:	000001c8 	andeq	r0, r0, r8, asr #3
 b3c:	8b080e42 	blhi	20444c <__bss_end+0x1ee8fc>
 b40:	42018e02 	andmi	r8, r1, #2, 28
 b44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b54:	00014000 	andeq	r4, r1, r0
 b58:	0000007c 	andeq	r0, r0, ip, ror r0
 b5c:	8b080e42 	blhi	20446c <__bss_end+0x1ee91c>
 b60:	42018e02 	andmi	r8, r1, #2, 28
 b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b74:	0001407c 	andeq	r4, r1, ip, ror r0
 b78:	00000024 	andeq	r0, r0, r4, lsr #32
 b7c:	8b040e42 	blhi	10448c <__bss_end+0xee93c>
 b80:	0b0d4201 	bleq	35138c <__bss_end+0x33b83c>
 b84:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 b88:	00000ecb 	andeq	r0, r0, fp, asr #29
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b94:	000140a0 	andeq	r4, r1, r0, lsr #1
 b98:	00000018 	andeq	r0, r0, r8, lsl r0
 b9c:	8b040e42 	blhi	1044ac <__bss_end+0xee95c>
 ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x33b85c>
 ba4:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bb4:	000140b8 	strheq	r4, [r1], -r8
 bb8:	000000d8 	ldrdeq	r0, [r0], -r8
 bbc:	8b040e42 	blhi	1044cc <__bss_end+0xee97c>
 bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x33b87c>
 bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
 bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bd4:	00014190 	muleq	r1, r0, r1
 bd8:	00000154 	andeq	r0, r0, r4, asr r1
 bdc:	8b040e42 	blhi	1044ec <__bss_end+0xee99c>
 be0:	0b0d4201 	bleq	3513ec <__bss_end+0x33b89c>
 be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
 be8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	000142fc 	strdeq	r4, [r1], -ip
 c08:	00000044 	andeq	r0, r0, r4, asr #32
 c0c:	8b080e42 	blhi	20451c <__bss_end+0x1ee9cc>
 c10:	42018e02 	andmi	r8, r1, #2, 28
 c14:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c18:	00000018 	andeq	r0, r0, r8, lsl r0
 c1c:	00000bec 	andeq	r0, r0, ip, ror #23
 c20:	00014340 	andeq	r4, r1, r0, asr #6
 c24:	00000044 	andeq	r0, r0, r4, asr #32
 c28:	8b080e42 	blhi	204538 <__bss_end+0x1ee9e8>
 c2c:	42018e02 	andmi	r8, r1, #2, 28
 c30:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c34:	00000018 	andeq	r0, r0, r8, lsl r0
 c38:	00000bec 	andeq	r0, r0, ip, ror #23
 c3c:	00014384 	andeq	r4, r1, r4, lsl #7
 c40:	00000098 	muleq	r0, r8, r0
 c44:	8b080e42 	blhi	204554 <__bss_end+0x1eea04>
 c48:	42018e02 	andmi	r8, r1, #2, 28
 c4c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c50:	0000000c 	andeq	r0, r0, ip
 c54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c58:	7c020001 	stcvc	0, cr0, [r2], {1}
 c5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c60:	00000030 	andeq	r0, r0, r0, lsr r0
 c64:	00000c50 	andeq	r0, r0, r0, asr ip
 c68:	00014458 	andeq	r4, r1, r8, asr r4
 c6c:	00000114 	andeq	r0, r0, r4, lsl r1
 c70:	84140e60 	ldrhi	r0, [r4], #-3680	; 0xfffff1a0
 c74:	86048505 	strhi	r8, [r4], -r5, lsl #10
 c78:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 c7c:	ce5e0201 	cdpgt	2, 5, cr0, cr14, cr1, {0}
 c80:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
 c84:	0e48000e 	cdpeq	0, 4, cr0, cr8, cr14, {0}
 c88:	85058414 	strhi	r8, [r5, #-1044]	; 0xfffffbec
 c8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 c90:	00018e02 	andeq	r8, r1, r2, lsl #28
 c94:	0000000c 	andeq	r0, r0, ip
 c98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c9c:	7c020001 	stcvc	0, cr0, [r2], {1}
 ca0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca8:	00000c94 	muleq	r0, r4, ip
 cac:	0001456c 	andeq	r4, r1, ip, ror #10
 cb0:	00000114 	andeq	r0, r0, r4, lsl r1
 cb4:	84080e62 	strhi	r0, [r8], #-3682	; 0xfffff19e
 cb8:	02018e02 	andeq	r8, r1, #2, 28
 cbc:	0ec4ce52 	mcreq	14, 6, ip, cr4, cr2, {2}
 cc0:	00000000 	andeq	r0, r0, r0
 cc4:	0000000c 	andeq	r0, r0, ip
 cc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ccc:	7c020001 	stcvc	0, cr0, [r2], {1}
 cd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 cd4:	0000002c 	andeq	r0, r0, ip, lsr #32
 cd8:	00000cc4 	andeq	r0, r0, r4, asr #25
 cdc:	00014680 	andeq	r4, r1, r0, lsl #13
 ce0:	000000dc 	ldrdeq	r0, [r0], -ip
 ce4:	84100e52 	ldrhi	r0, [r0], #-3666	; 0xfffff1ae
 ce8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 cec:	02018e02 	andeq	r8, r1, #2, 28
 cf0:	c6ce0a40 	strbgt	r0, [lr], r0, asr #20
 cf4:	000ec4c5 	andeq	ip, lr, r5, asr #9
 cf8:	0a500b42 	beq	1403a08 <__bss_end+0x13edeb8>
 cfc:	cec6c5c4 	cdpgt	5, 12, cr12, cr6, cr4, {6}
 d00:	0b42000e 	bleq	1080d40 <__bss_end+0x106b1f0>
